{"version":3,"sources":["../src/constants.ts","../src/meshDevice.ts","../src/protobufs.ts","../node_modules/@buf/meshtastic_protobufs.bufbuild_es/meshtastic/admin_pb.js","../node_modules/@bufbuild/protobuf/dist/esm/private/assert.js","../node_modules/@bufbuild/protobuf/dist/esm/private/enum.js","../node_modules/@bufbuild/protobuf/dist/esm/message.js","../node_modules/@bufbuild/protobuf/dist/esm/private/message-type.js","../node_modules/@bufbuild/protobuf/dist/esm/google/varint.js","../node_modules/@bufbuild/protobuf/dist/esm/proto-int64.js","../node_modules/@bufbuild/protobuf/dist/esm/scalar.js","../node_modules/@bufbuild/protobuf/dist/esm/private/scalars.js","../node_modules/@bufbuild/protobuf/dist/esm/binary-encoding.js","../node_modules/@bufbuild/protobuf/dist/esm/private/extensions.js","../node_modules/@bufbuild/protobuf/dist/esm/proto-base64.js","../node_modules/@bufbuild/protobuf/dist/esm/extension-accessor.js","../node_modules/@bufbuild/protobuf/dist/esm/private/reflect.js","../node_modules/@bufbuild/protobuf/dist/esm/is-message.js","../node_modules/@bufbuild/protobuf/dist/esm/private/field-wrapper.js","../node_modules/@bufbuild/protobuf/dist/esm/private/json-format.js","../node_modules/@bufbuild/protobuf/dist/esm/private/binary-format.js","../node_modules/@bufbuild/protobuf/dist/esm/private/util-common.js","../node_modules/@bufbuild/protobuf/dist/esm/private/proto-runtime.js","../node_modules/@bufbuild/protobuf/dist/esm/private/field-list.js","../node_modules/@bufbuild/protobuf/dist/esm/private/names.js","../node_modules/@bufbuild/protobuf/dist/esm/private/field.js","../node_modules/@bufbuild/protobuf/dist/esm/private/field-normalize.js","../node_modules/@bufbuild/protobuf/dist/esm/proto3.js","../node_modules/@buf/meshtastic_protobufs.bufbuild_es/meshtastic/channel_pb.js","../node_modules/@buf/meshtastic_protobufs.bufbuild_es/meshtastic/mesh_pb.js","../node_modules/@buf/meshtastic_protobufs.bufbuild_es/meshtastic/config_pb.js","../node_modules/@buf/meshtastic_protobufs.bufbuild_es/meshtastic/portnums_pb.js","../node_modules/@buf/meshtastic_protobufs.bufbuild_es/meshtastic/telemetry_pb.js","../node_modules/@buf/meshtastic_protobufs.bufbuild_es/meshtastic/module_config_pb.js","../node_modules/@buf/meshtastic_protobufs.bufbuild_es/meshtastic/xmodem_pb.js","../node_modules/@buf/meshtastic_protobufs.bufbuild_es/meshtastic/connection_status_pb.js","../node_modules/@buf/meshtastic_protobufs.bufbuild_es/meshtastic/apponly_pb.js","../node_modules/@buf/meshtastic_protobufs.bufbuild_es/meshtastic/cannedmessages_pb.js","../node_modules/@buf/meshtastic_protobufs.bufbuild_es/meshtastic/clientonly_pb.js","../node_modules/@buf/meshtastic_protobufs.bufbuild_es/meshtastic/localonly_pb.js","../node_modules/@buf/meshtastic_protobufs.bufbuild_es/meshtastic/deviceonly_pb.js","../node_modules/@buf/meshtastic_protobufs.bufbuild_es/meshtastic/mqtt_pb.js","../node_modules/@buf/meshtastic_protobufs.bufbuild_es/meshtastic/paxcount_pb.js","../node_modules/@buf/meshtastic_protobufs.bufbuild_es/meshtastic/remote_hardware_pb.js","../node_modules/@buf/meshtastic_protobufs.bufbuild_es/meshtastic/rtttl_pb.js","../node_modules/@buf/meshtastic_protobufs.bufbuild_es/meshtastic/storeforward_pb.js","../src/types.ts","../src/utils/index.ts","../src/utils/eventSystem.ts","../src/utils/general.ts","../src/utils/queue.ts","../src/utils/transformHandler.ts","../src/utils/xmodem.ts","../src/utils/nodeTransformHandler.ts","../src/adapters/bleConnection.ts","../src/adapters/httpConnection.ts","../src/adapters/serialConnection.ts","../src/adapters/nodeSerialConnection.ts","../src/client.ts"],"sourcesContent":["/** Bluetooth Low Energy ToRadio characteristic */\nexport const ToRadioUuid = \"f75c76d2-129e-4dad-a1dd-7866124401e7\";\n\n/** Bluetooth Low Energy FromRadio characteristic */\nexport const FromRadioUuid = \"2c55e69e-4993-11ed-b878-0242ac120002\";\n\n/**\n * Bluetooth Low Energy FromNum characteristic, provides BLE notification on new\n * FromRadio message and a message counter\n */\nexport const FromNumUuid = \"ed9da18c-a800-4f66-a670-aa7547e34453\";\n\n/** Bluetooth Service characteristic, used to identify Meshtastic devices */\nexport const ServiceUuid = \"6ba1b218-15a8-461f-9fa8-5dcae273eafd\";\n\n/** Broadcast destination number */\nexport const broadcastNum = 0xffffffff;\n\n/** Minimum device firmware version supported by this version of the library. */\nexport const minFwVer = 2.2;\n\nexport const Constants = {\n  ToRadioUuid,\n  FromRadioUuid,\n  FromNumUuid,\n  ServiceUuid,\n  broadcastNum,\n  minFwVer,\n};\n","import { Logger } from \"tslog\";\nimport { broadcastNum, minFwVer } from \"./constants.js\";\nimport * as Protobuf from \"./protobufs.js\";\nimport * as Types from \"./types.js\";\nimport { EventSystem, Queue, Xmodem } from \"./utils/index.js\";\n\n/** Base class for connection methods to extend */\nexport abstract class MeshDevice {\n  /** Abstract property that states the connection type */\n  protected abstract connType: Types.ConnectionTypeName;\n\n  protected abstract portId: string;\n\n  /** Logs to the console and the logging event emitter */\n  protected log: Logger<unknown>;\n\n  /** Describes the current state of the device */\n  protected deviceStatus: Types.DeviceStatusEnum;\n\n  /** Describes the current state of the device */\n  protected isConfigured: boolean;\n\n  /** Are there any settings that have yet to be applied? */\n  protected pendingSettingsChanges: boolean;\n\n  /** Device's node number */\n  private myNodeInfo: Protobuf.Mesh.MyNodeInfo;\n\n  /** Randomly generated number to ensure confiuration lockstep */\n  public configId: number;\n\n  /**\n   * Packert queue, to space out transmissions and routing handle errors and\n   * acks\n   */\n  public queue: Queue;\n\n  public events: EventSystem;\n\n  public xModem: Xmodem;\n\n  constructor(configId?: number) {\n    this.log = new Logger({\n      name: \"iMeshDevice\",\n      prettyLogTemplate:\n        \"{{hh}}:{{MM}}:{{ss}}:{{ms}}\\t{{logLevelName}}\\t[{{name}}]\\t\",\n    });\n\n    this.deviceStatus = Types.DeviceStatusEnum.DeviceDisconnected;\n    this.isConfigured = false;\n    this.pendingSettingsChanges = false;\n    this.myNodeInfo = new Protobuf.Mesh.MyNodeInfo();\n    this.configId = configId ?? this.generateRandId();\n    this.queue = new Queue();\n    this.events = new EventSystem();\n    this.xModem = new Xmodem(this.sendRaw.bind(this)); //TODO: try wihtout bind\n\n    this.events.onDeviceStatus.subscribe((status) => {\n      this.deviceStatus = status;\n      if (status === Types.DeviceStatusEnum.DeviceConfigured) {\n        this.isConfigured = true;\n      } else if (status === Types.DeviceStatusEnum.DeviceConfiguring) {\n        this.isConfigured = false;\n      }\n    });\n\n    this.events.onMyNodeInfo.subscribe((myNodeInfo) => {\n      this.myNodeInfo = myNodeInfo;\n    });\n\n    this.events.onPendingSettingsChange.subscribe((state) => {\n      this.pendingSettingsChanges = state;\n    });\n  }\n\n  /** Abstract method that writes data to the radio */\n  protected abstract writeToRadio(data: Uint8Array): Promise<void>;\n\n  /** Abstract method that connects to the radio */\n  protected abstract connect(\n    parameters: Types.ConnectionParameters,\n  ): Promise<void>;\n\n  /** Abstract method that disconnects from the radio */\n  protected abstract disconnect(): void;\n\n  /** Abstract method that pings the radio */\n  protected abstract ping(): Promise<boolean>;\n\n  /**\n   * Sends a text over the radio\n   */\n  public async sendText(\n    text: string,\n    destination?: Types.Destination,\n    wantAck?: boolean,\n    channel?: Types.ChannelNumber,\n  ): Promise<number> {\n    this.log.debug(\n      Types.Emitter[Types.Emitter.SendText],\n      `📤 Sending message to ${destination ?? \"broadcast\"} on channel ${\n        channel?.toString() ?? 0\n      }`,\n    );\n\n    const enc = new TextEncoder();\n\n    return await this.sendPacket(\n      enc.encode(text),\n      Protobuf.Portnums.PortNum.TEXT_MESSAGE_APP,\n      destination ?? \"broadcast\",\n      channel,\n      wantAck,\n      false,\n      true,\n    );\n  }\n\n  /**\n   * Sends a text over the radio\n   */\n  public sendWaypoint(\n    waypointMessage: Protobuf.Mesh.Waypoint,\n    destination: Types.Destination,\n    channel?: Types.ChannelNumber,\n  ): Promise<number> {\n    this.log.debug(\n      Types.Emitter[Types.Emitter.SendWaypoint],\n      `📤 Sending waypoint to ${destination} on channel ${\n        channel?.toString() ?? 0\n      }`,\n    );\n\n    waypointMessage.id = this.generateRandId();\n\n    return this.sendPacket(\n      waypointMessage.toBinary(),\n      Protobuf.Portnums.PortNum.WAYPOINT_APP,\n      destination,\n      channel,\n      true,\n      false,\n    );\n  }\n\n  /**\n   * Sends packet over the radio\n   */\n  public async sendPacket(\n    byteData: Uint8Array,\n    portNum: Protobuf.Portnums.PortNum,\n    destination: Types.Destination,\n    channel: Types.ChannelNumber = Types.ChannelNumber.Primary,\n    wantAck = true,\n    wantResponse = true,\n    echoResponse = false,\n    replyId?: number,\n    emoji?: number,\n  ): Promise<number> {\n    this.log.trace(\n      Types.Emitter[Types.Emitter.SendPacket],\n      `📤 Sending ${Protobuf.Portnums.PortNum[portNum]} to ${destination}`,\n    );\n\n    const meshPacket = new Protobuf.Mesh.MeshPacket({\n      payloadVariant: {\n        case: \"decoded\",\n        value: {\n          payload: byteData,\n          portnum: portNum,\n          wantResponse,\n          emoji,\n          replyId,\n          dest: 0, //change this!\n          requestId: 0, //change this!\n          source: 0, //change this!\n        },\n      },\n      from: this.myNodeInfo.myNodeNum,\n      to:\n        destination === \"broadcast\"\n          ? broadcastNum\n          : destination === \"self\"\n            ? this.myNodeInfo.myNodeNum\n            : destination,\n      id: this.generateRandId(),\n      wantAck: wantAck,\n      channel,\n    });\n\n    const toRadioMessage = new Protobuf.Mesh.ToRadio({\n      payloadVariant: {\n        case: \"packet\",\n        value: meshPacket,\n      },\n    });\n\n    if (echoResponse) {\n      meshPacket.rxTime = Math.trunc(new Date().getTime() / 1000);\n      this.handleMeshPacket(meshPacket);\n    }\n    return await this.sendRaw(toRadioMessage.toBinary(), meshPacket.id);\n  }\n\n  /**\n   * Sends raw packet over the radio\n   */\n  public async sendRaw(\n    toRadio: Uint8Array,\n    id: number = this.generateRandId(),\n  ): Promise<number> {\n    if (toRadio.length > 512) {\n      throw new Error(\"Message longer than 512 bytes, it will not be sent!\");\n    }\n    this.queue.push({\n      id,\n      data: toRadio,\n    });\n\n    await this.queue.processQueue(async (data) => {\n      await this.writeToRadio(data);\n    });\n\n    return this.queue.wait(id);\n  }\n\n  /**\n   * Writes config to device\n   */\n  public async setConfig(config: Protobuf.Config.Config): Promise<number> {\n    this.log.debug(\n      Types.Emitter[Types.Emitter.SetConfig],\n      `⚙️ Setting config, Variant: ${config.payloadVariant.case ?? \"Unknown\"}`,\n    );\n\n    if (!this.pendingSettingsChanges) {\n      await this.beginEditSettings();\n    }\n\n    const configMessage = new Protobuf.Admin.AdminMessage({\n      payloadVariant: {\n        case: \"setConfig\",\n        value: config,\n      },\n    });\n\n    return this.sendPacket(\n      configMessage.toBinary(),\n      Protobuf.Portnums.PortNum.ADMIN_APP,\n      \"self\",\n    );\n  }\n\n  /**\n   * Writes module config to device\n   */\n  public async setModuleConfig(\n    moduleConfig: Protobuf.ModuleConfig.ModuleConfig,\n  ): Promise<number> {\n    this.log.debug(\n      Types.Emitter[Types.Emitter.SetModuleConfig],\n      \"⚙️ Setting module config\",\n    );\n\n    const moduleConfigMessage = new Protobuf.Admin.AdminMessage({\n      payloadVariant: {\n        case: \"setModuleConfig\",\n        value: moduleConfig,\n      },\n    });\n\n    return await this.sendPacket(\n      moduleConfigMessage.toBinary(),\n      Protobuf.Portnums.PortNum.ADMIN_APP,\n      \"self\",\n    );\n  }\n\n  /**\n   * Sets devices owner data\n   */\n  public async setOwner(owner: Protobuf.Mesh.User): Promise<number> {\n    this.log.debug(Types.Emitter[Types.Emitter.SetOwner], \"👤 Setting owner\");\n\n    const setOwnerMessage = new Protobuf.Admin.AdminMessage({\n      payloadVariant: {\n        case: \"setOwner\",\n        value: owner,\n      },\n    });\n\n    return await this.sendPacket(\n      setOwnerMessage.toBinary(),\n      Protobuf.Portnums.PortNum.ADMIN_APP,\n      \"self\",\n    );\n  }\n\n  /**\n   * Sets devices ChannelSettings\n   */\n  public async setChannel(channel: Protobuf.Channel.Channel): Promise<number> {\n    this.log.debug(\n      Types.Emitter[Types.Emitter.SetChannel],\n      `📻 Setting Channel: ${channel.index}`,\n    );\n\n    const setChannelMessage = new Protobuf.Admin.AdminMessage({\n      payloadVariant: {\n        case: \"setChannel\",\n        value: channel,\n      },\n    });\n\n    return await this.sendPacket(\n      setChannelMessage.toBinary(),\n      Protobuf.Portnums.PortNum.ADMIN_APP,\n      \"self\",\n    );\n  }\n\n  public async setPosition(\n    positionMessage: Protobuf.Mesh.Position,\n  ): Promise<number> {\n    return await this.sendPacket(\n      positionMessage.toBinary(),\n      Protobuf.Portnums.PortNum.POSITION_APP,\n      \"self\",\n    );\n  }\n\n  /**\n   * Gets specified channel information from the radio\n   */\n  public async getChannel(index: number): Promise<number> {\n    this.log.debug(\n      Types.Emitter[Types.Emitter.GetChannel],\n      `📻 Requesting Channel: ${index}`,\n    );\n\n    const getChannelRequestMessage = new Protobuf.Admin.AdminMessage({\n      payloadVariant: {\n        case: \"getChannelRequest\",\n        value: index + 1,\n      },\n    });\n\n    return await this.sendPacket(\n      getChannelRequestMessage.toBinary(),\n      Protobuf.Portnums.PortNum.ADMIN_APP,\n      \"self\",\n    );\n  }\n\n  /**\n   * Gets devices config\n   *   request\n   */\n  public async getConfig(\n    configType: Protobuf.Admin.AdminMessage_ConfigType,\n  ): Promise<number> {\n    this.log.debug(\n      Types.Emitter[Types.Emitter.GetConfig],\n      \"⚙️ Requesting config\",\n    );\n\n    const getRadioRequestMessage = new Protobuf.Admin.AdminMessage({\n      payloadVariant: {\n        case: \"getConfigRequest\",\n        value: configType,\n      },\n    });\n\n    return await this.sendPacket(\n      getRadioRequestMessage.toBinary(),\n      Protobuf.Portnums.PortNum.ADMIN_APP,\n      \"self\",\n    );\n  }\n\n  /**\n   * Gets Module config\n   */\n  public async getModuleConfig(\n    moduleConfigType: Protobuf.Admin.AdminMessage_ModuleConfigType,\n  ): Promise<number> {\n    this.log.debug(\n      Types.Emitter[Types.Emitter.GetModuleConfig],\n      \"⚙️ Requesting module config\",\n    );\n\n    const getRadioRequestMessage = new Protobuf.Admin.AdminMessage({\n      payloadVariant: {\n        case: \"getModuleConfigRequest\",\n        value: moduleConfigType,\n      },\n    });\n\n    return await this.sendPacket(\n      getRadioRequestMessage.toBinary(),\n      Protobuf.Portnums.PortNum.ADMIN_APP,\n      \"self\",\n    );\n  }\n\n  /** Gets devices Owner */\n  public async getOwner(): Promise<number> {\n    this.log.debug(\n      Types.Emitter[Types.Emitter.GetOwner],\n      \"👤 Requesting owner\",\n    );\n\n    const getOwnerRequestMessage = new Protobuf.Admin.AdminMessage({\n      payloadVariant: {\n        case: \"getOwnerRequest\",\n        value: true,\n      },\n    });\n\n    return await this.sendPacket(\n      getOwnerRequestMessage.toBinary(),\n      Protobuf.Portnums.PortNum.ADMIN_APP,\n      \"self\",\n    );\n  }\n\n  /**\n   * Gets devices metadata\n   */\n  public async getMetadata(nodeNum: number): Promise<number> {\n    this.log.debug(\n      Types.Emitter[Types.Emitter.GetMetadata],\n      `🏷️ Requesting metadata from ${nodeNum}`,\n    );\n\n    const getDeviceMetricsRequestMessage = new Protobuf.Admin.AdminMessage({\n      payloadVariant: {\n        case: \"getDeviceMetadataRequest\",\n        value: true,\n      },\n    });\n\n    return await this.sendPacket(\n      getDeviceMetricsRequestMessage.toBinary(),\n      Protobuf.Portnums.PortNum.ADMIN_APP,\n      nodeNum,\n      Types.ChannelNumber.Admin,\n    );\n  }\n\n  /**\n   * Clears specific channel with the designated index\n   */\n  public async clearChannel(index: number): Promise<number> {\n    this.log.debug(\n      Types.Emitter[Types.Emitter.ClearChannel],\n      `📻 Clearing Channel ${index}`,\n    );\n\n    const channel = new Protobuf.Channel.Channel({\n      index,\n      role: Protobuf.Channel.Channel_Role.DISABLED,\n    });\n    const setChannelMessage = new Protobuf.Admin.AdminMessage({\n      payloadVariant: {\n        case: \"setChannel\",\n        value: channel,\n      },\n    });\n\n    return await this.sendPacket(\n      setChannelMessage.toBinary(),\n      Protobuf.Portnums.PortNum.ADMIN_APP,\n      \"self\",\n    );\n  }\n\n  private async beginEditSettings(): Promise<number> {\n    this.events.onPendingSettingsChange.dispatch(true);\n\n    const beginEditSettings = new Protobuf.Admin.AdminMessage({\n      payloadVariant: {\n        case: \"beginEditSettings\",\n        value: true,\n      },\n    });\n\n    return await this.sendPacket(\n      beginEditSettings.toBinary(),\n      Protobuf.Portnums.PortNum.ADMIN_APP,\n      \"self\",\n    );\n  }\n\n  public async commitEditSettings(): Promise<number> {\n    this.events.onPendingSettingsChange.dispatch(false);\n\n    const commitEditSettings = new Protobuf.Admin.AdminMessage({\n      payloadVariant: {\n        case: \"commitEditSettings\",\n        value: true,\n      },\n    });\n\n    return await this.sendPacket(\n      commitEditSettings.toBinary(),\n      Protobuf.Portnums.PortNum.ADMIN_APP,\n      \"self\",\n    );\n  }\n\n  /**\n   * Resets the internal NodeDB of the radio, usefull for removing old nodes\n   * that no longer exist.\n   */\n  public async resetNodes(): Promise<number> {\n    this.log.debug(\n      Types.Emitter[Types.Emitter.ResetNodes],\n      \"📻 Resetting NodeDB\",\n    );\n\n    const resetNodes = new Protobuf.Admin.AdminMessage({\n      payloadVariant: {\n        case: \"nodedbReset\",\n        value: 1,\n      },\n    });\n\n    return await this.sendPacket(\n      resetNodes.toBinary(),\n      Protobuf.Portnums.PortNum.ADMIN_APP,\n      \"self\",\n    );\n  }\n\n  /**\n   * Removes a node from the internal NodeDB of the radio by node number\n   */\n  public async removeNodeByNum(nodeNum: number): Promise<number> {\n    this.log.debug(\n      Types.Emitter[Types.Emitter.RemoveNodeByNum],\n      `📻 Removing Node ${nodeNum} from NodeDB`,\n    );\n\n    const removeNodeByNum = new Protobuf.Admin.AdminMessage({\n      payloadVariant: {\n        case: \"removeByNodenum\",\n        value: nodeNum,\n      },\n    });\n\n    return await this.sendPacket(\n      removeNodeByNum.toBinary(),\n      Protobuf.Portnums.PortNum.ADMIN_APP,\n      \"self\",\n    );\n  }\n\n  /** Shuts down the current node after the specified amount of time has elapsed. */\n  public async shutdown(time: number): Promise<number> {\n    this.log.debug(\n      Types.Emitter[Types.Emitter.Shutdown],\n      `🔌 Shutting down ${time > 2 ? \"now\" : `in ${time} seconds`}`,\n    );\n\n    const shutdown = new Protobuf.Admin.AdminMessage({\n      payloadVariant: {\n        case: \"shutdownSeconds\",\n        value: time,\n      },\n    });\n\n    return await this.sendPacket(\n      shutdown.toBinary(),\n      Protobuf.Portnums.PortNum.ADMIN_APP,\n      \"self\",\n    );\n  }\n\n  /** Reboots the current node after the specified amount of time has elapsed. */\n  public async reboot(time: number): Promise<number> {\n    this.log.debug(\n      Types.Emitter[Types.Emitter.Reboot],\n      `🔌 Rebooting node ${time > 0 ? \"now\" : `in ${time} seconds`}`,\n    );\n\n    const reboot = new Protobuf.Admin.AdminMessage({\n      payloadVariant: {\n        case: \"rebootSeconds\",\n        value: time,\n      },\n    });\n\n    return await this.sendPacket(\n      reboot.toBinary(),\n      Protobuf.Portnums.PortNum.ADMIN_APP,\n      \"self\",\n    );\n  }\n\n  /**\n   * Reboots the current node into OTA mode after the specified amount of time\n   * has elapsed.\n   */\n  public async rebootOta(time: number): Promise<number> {\n    this.log.debug(\n      Types.Emitter[Types.Emitter.RebootOta],\n      `🔌 Rebooting into OTA mode ${time > 0 ? \"now\" : `in ${time} seconds`}`,\n    );\n\n    const rebootOta = new Protobuf.Admin.AdminMessage({\n      payloadVariant: {\n        case: \"rebootOtaSeconds\",\n        value: time,\n      },\n    });\n\n    return await this.sendPacket(\n      rebootOta.toBinary(),\n      Protobuf.Portnums.PortNum.ADMIN_APP,\n      \"self\",\n    );\n  }\n\n  /** Factory resets the current device */\n  // public async factoryResetDevice(): Promise<number> {\n  //   this.log.debug(\n  //     Types.Emitter[Types.Emitter.FactoryReset],\n  //     \"♻️ Factory resetting device\",\n  //   );\n\n  //   const factoryReset = new Protobuf.Admin.AdminMessage({\n  //     payloadVariant: {\n  //       case: \"factoryResetDevice\",\n  //       value: 1,\n  //     },\n  //   });\n\n  //   return await this.sendPacket(\n  //     factoryReset.toBinary(),\n  //     Protobuf.Portnums.PortNum.ADMIN_APP,\n  //     \"self\",\n  //   );\n  // }\n\n  /** Factory resets the current config */\n  // public async factoryResetConfig(): Promise<number> {\n  //   this.log.debug(\n  //     Types.Emitter[Types.Emitter.FactoryReset],\n  //     \"♻️ Factory resetting config\",\n  //   );\n\n  //   const factoryReset = new Protobuf.Admin.AdminMessage({\n  //     payloadVariant: {\n  //       case: \"factoryResetConfig\",\n  //       value: 1,\n  //     },\n  //   });\n\n  //   return await this.sendPacket(\n  //     factoryReset.toBinary(),\n  //     Protobuf.Portnums.PortNum.ADMIN_APP,\n  //     \"self\",\n  //   );\n  // }\n\n  /** Triggers the device configure process */\n  public configure(): Promise<number> {\n    this.log.debug(\n      Types.Emitter[Types.Emitter.Configure],\n      \"⚙️ Requesting device configuration\",\n    );\n    this.updateDeviceStatus(Types.DeviceStatusEnum.DeviceConfiguring);\n\n    const toRadio = new Protobuf.Mesh.ToRadio({\n      payloadVariant: {\n        case: \"wantConfigId\",\n        value: this.configId,\n      },\n    });\n\n    return this.sendRaw(toRadio.toBinary());\n  }\n\n  /** Sends a trace route packet to the designated node */\n  public async traceRoute(destination: number): Promise<number> {\n    const routeDiscovery = new Protobuf.Mesh.RouteDiscovery({\n      route: [],\n    });\n\n    return await this.sendPacket(\n      routeDiscovery.toBinary(),\n      Protobuf.Portnums.PortNum.TRACEROUTE_APP,\n      destination,\n    );\n  }\n\n  /** Requests position from the designated node */\n  public async requestPosition(destination: number): Promise<number> {\n    return await this.sendPacket(\n      new Uint8Array(),\n      Protobuf.Portnums.PortNum.POSITION_APP,\n      destination,\n    );\n  }\n\n  /**\n   * Updates the device status eliminating duplicate status events\n   */\n  public updateDeviceStatus(status: Types.DeviceStatusEnum): void {\n    if (status !== this.deviceStatus) {\n      this.events.onDeviceStatus.dispatch(status);\n    }\n  }\n\n  /**\n   * Generates random packet identifier\n   *\n   * @returns {number} Random packet ID\n   */\n  private generateRandId(): number {\n    const seed = crypto.getRandomValues(new Uint32Array(1));\n    if (!seed[0]) {\n      throw new Error(\"Cannot generate CSPRN\");\n    }\n\n    return Math.floor(seed[0] * 2 ** -32 * 1e9);\n  }\n\n  /**\n   * Gets called whenever a fromRadio message is received from device, returns\n   * fromRadio data\n   */\n  protected handleFromRadio(fromRadio: Uint8Array): void {\n    const decodedMessage = Protobuf.Mesh.FromRadio.fromBinary(fromRadio);\n    this.events.onFromRadio.dispatch(decodedMessage);\n\n    /** @todo Add map here when `all=true` gets fixed. */\n    switch (decodedMessage.payloadVariant.case) {\n      case \"packet\": {\n        this.handleMeshPacket(decodedMessage.payloadVariant.value);\n        break;\n      }\n\n      case \"myInfo\": {\n        this.events.onMyNodeInfo.dispatch(decodedMessage.payloadVariant.value);\n        this.log.info(\n          Types.Emitter[Types.Emitter.HandleFromRadio],\n          \"📱 Received Node info for this device\",\n        );\n        break;\n      }\n\n      case \"nodeInfo\": {\n        this.log.info(\n          Types.Emitter[Types.Emitter.HandleFromRadio],\n          `📱 Received Node Info packet for node: ${decodedMessage.payloadVariant.value.num}`,\n        );\n\n        this.events.onNodeInfoPacket.dispatch(\n          decodedMessage.payloadVariant.value,\n        );\n\n        //TODO: HERE\n        if (decodedMessage.payloadVariant.value?.position) {\n          this.events.onPositionPacket.dispatch({\n            id: decodedMessage.id,\n            rxTime: new Date(),\n            from: decodedMessage.payloadVariant.value.num,\n            to: decodedMessage.payloadVariant.value.num,\n            type: \"direct\",\n            channel: Types.ChannelNumber.Primary,\n            data: decodedMessage.payloadVariant.value.position,\n          });\n        }\n\n        //TODO: HERE\n        if (decodedMessage.payloadVariant.value.user) {\n          this.events.onUserPacket.dispatch({\n            id: decodedMessage.id,\n            rxTime: new Date(),\n            from: decodedMessage.payloadVariant.value.num,\n            to: decodedMessage.payloadVariant.value.num,\n            type: \"direct\",\n            channel: Types.ChannelNumber.Primary,\n            data: decodedMessage.payloadVariant.value.user,\n          });\n        }\n        break;\n      }\n\n      case \"config\": {\n        if (decodedMessage.payloadVariant.value.payloadVariant.case) {\n          this.log.trace(\n            Types.Emitter[Types.Emitter.HandleFromRadio],\n            `💾 Received Config packet of variant: ${decodedMessage.payloadVariant.value.payloadVariant.case}`,\n          );\n        } else {\n          this.log.warn(\n            Types.Emitter[Types.Emitter.HandleFromRadio],\n            `⚠️ Received Config packet of variant: ${\"UNK\"}`,\n          );\n        }\n\n        this.events.onConfigPacket.dispatch(\n          decodedMessage.payloadVariant.value,\n        );\n        break;\n      }\n\n      case \"logRecord\": {\n        this.log.trace(\n          Types.Emitter[Types.Emitter.HandleFromRadio],\n          \"Received onLogRecord\",\n        );\n        this.events.onLogRecord.dispatch(decodedMessage.payloadVariant.value);\n        break;\n      }\n\n      case \"configCompleteId\": {\n        if (decodedMessage.payloadVariant.value !== this.configId) {\n          this.log.error(\n            Types.Emitter[Types.Emitter.HandleFromRadio],\n            `❌ Invalid config id received from device, expected ${this.configId} but received ${decodedMessage.payloadVariant.value}`,\n          );\n        }\n\n        this.log.info(\n          Types.Emitter[Types.Emitter.HandleFromRadio],\n          `⚙️ Valid config id received from device: ${this.configId}`,\n        );\n\n        this.updateDeviceStatus(Types.DeviceStatusEnum.DeviceConfigured);\n        break;\n      }\n\n      case \"rebooted\": {\n        this.configure().catch(() => {\n          // TODO: FIX, workaround for `wantConfigId` not getting acks.\n        });\n        break;\n      }\n\n      case \"moduleConfig\": {\n        if (decodedMessage.payloadVariant.value.payloadVariant.case) {\n          this.log.trace(\n            Types.Emitter[Types.Emitter.HandleFromRadio],\n            `💾 Received Module Config packet of variant: ${decodedMessage.payloadVariant.value.payloadVariant.case}`,\n          );\n        } else {\n          this.log.warn(\n            Types.Emitter[Types.Emitter.HandleFromRadio],\n            \"⚠️ Received Module Config packet of variant: UNK\",\n          );\n        }\n\n        this.events.onModuleConfigPacket.dispatch(\n          decodedMessage.payloadVariant.value,\n        );\n        break;\n      }\n\n      case \"channel\": {\n        this.log.trace(\n          Types.Emitter[Types.Emitter.HandleFromRadio],\n          `🔐 Received Channel: ${decodedMessage.payloadVariant.value.index}`,\n        );\n\n        this.events.onChannelPacket.dispatch(\n          decodedMessage.payloadVariant.value,\n        );\n        break;\n      }\n\n      case \"queueStatus\": {\n        this.log.trace(\n          Types.Emitter[Types.Emitter.HandleFromRadio],\n          `🚧 Received Queue Status: ${decodedMessage.payloadVariant.value}`,\n        );\n\n        this.events.onQueueStatus.dispatch(decodedMessage.payloadVariant.value);\n        break;\n      }\n\n      case \"xmodemPacket\": {\n        this.xModem.handlePacket(decodedMessage.payloadVariant.value);\n        break;\n      }\n\n      case \"metadata\": {\n        if (\n          Number.parseFloat(\n            decodedMessage.payloadVariant.value.firmwareVersion,\n          ) < minFwVer\n        ) {\n          this.log.fatal(\n            Types.Emitter[Types.Emitter.HandleFromRadio],\n            `Device firmware outdated. Min supported: ${minFwVer} got : ${decodedMessage.payloadVariant.value.firmwareVersion}`,\n          );\n        }\n        this.log.debug(\n          Types.Emitter[Types.Emitter.GetMetadata],\n          \"🏷️ Received metadata packet\",\n        );\n\n        this.events.onDeviceMetadataPacket.dispatch({\n          id: decodedMessage.id,\n          rxTime: new Date(),\n          from: 0,\n          to: 0,\n          type: \"direct\",\n          channel: Types.ChannelNumber.Primary,\n          data: decodedMessage.payloadVariant.value,\n        });\n        break;\n      }\n\n      case \"mqttClientProxyMessage\": {\n        break;\n      }\n\n      default: {\n        this.log.warn(\n          Types.Emitter[Types.Emitter.HandleFromRadio],\n          `⚠️ Unhandled payload variant: ${decodedMessage.payloadVariant.case}`,\n        );\n      }\n    }\n  }\n\n  /** Completes all Events */\n  public complete(): void {\n    this.queue.clear();\n  }\n\n  /**\n   * Gets called when a MeshPacket is received from device\n   */\n  private handleMeshPacket(meshPacket: Protobuf.Mesh.MeshPacket): void {\n    this.events.onMeshPacket.dispatch(meshPacket);\n    if (meshPacket.from !== this.myNodeInfo.myNodeNum) {\n      /**\n       * TODO: this shouldn't be called unless the device interracts with the\n       * mesh, currently it does.\n       */\n      this.events.onMeshHeartbeat.dispatch(new Date());\n    }\n\n    switch (meshPacket.payloadVariant.case) {\n      case \"decoded\": {\n        this.handleDecodedPacket(meshPacket.payloadVariant.value, meshPacket);\n        break;\n      }\n\n      case \"encrypted\": {\n        this.log.debug(\n          Types.Emitter[Types.Emitter.HandleMeshPacket],\n          \"🔐 Device received encrypted data packet, ignoring.\",\n        );\n        break;\n      }\n\n      default:\n        throw new Error(`Unhandled case ${meshPacket.payloadVariant.case}`);\n    }\n  }\n\n  private handleDecodedPacket(\n    dataPacket: Protobuf.Mesh.Data,\n    meshPacket: Protobuf.Mesh.MeshPacket,\n  ) {\n    let adminMessage: Protobuf.Admin.AdminMessage | undefined = undefined;\n    let routingPacket: Protobuf.Mesh.Routing | undefined = undefined;\n\n    const packetMetadata: Omit<Types.PacketMetadata<unknown>, \"data\"> = {\n      id: meshPacket.id,\n      rxTime: new Date(meshPacket.rxTime * 1000),\n      type: meshPacket.to === broadcastNum ? \"broadcast\" : \"direct\",\n      from: meshPacket.from,\n      to: meshPacket.to,\n      channel: meshPacket.channel,\n    };\n\n    this.log.trace(\n      Types.Emitter[Types.Emitter.HandleMeshPacket],\n      `📦 Received ${Protobuf.Portnums.PortNum[dataPacket.portnum]} packet`,\n    );\n\n    switch (dataPacket.portnum) {\n      case Protobuf.Portnums.PortNum.TEXT_MESSAGE_APP: {\n        this.events.onMessagePacket.dispatch({\n          ...packetMetadata,\n          data: new TextDecoder().decode(dataPacket.payload),\n        });\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.REMOTE_HARDWARE_APP: {\n        this.events.onRemoteHardwarePacket.dispatch({\n          ...packetMetadata,\n          data: Protobuf.RemoteHardware.HardwareMessage.fromBinary(\n            dataPacket.payload,\n          ),\n        });\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.POSITION_APP: {\n        this.events.onPositionPacket.dispatch({\n          ...packetMetadata,\n          data: Protobuf.Mesh.Position.fromBinary(dataPacket.payload),\n        });\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.NODEINFO_APP: {\n        this.events.onUserPacket.dispatch({\n          ...packetMetadata,\n          data: Protobuf.Mesh.User.fromBinary(dataPacket.payload),\n        });\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.ROUTING_APP: {\n        routingPacket = Protobuf.Mesh.Routing.fromBinary(dataPacket.payload);\n\n        this.events.onRoutingPacket.dispatch({\n          ...packetMetadata,\n          data: routingPacket,\n        });\n        switch (routingPacket.variant.case) {\n          case \"errorReason\": {\n            if (\n              routingPacket.variant.value === Protobuf.Mesh.Routing_Error.NONE\n            ) {\n              this.queue.processAck(dataPacket.requestId);\n            } else {\n              this.queue.processError({\n                id: dataPacket.requestId,\n                error: routingPacket.variant.value,\n              });\n            }\n\n            break;\n          }\n          case \"routeReply\": {\n            break;\n          }\n          case \"routeRequest\": {\n            break;\n          }\n\n          default: {\n            throw new Error(`Unhandled case ${routingPacket.variant.case}`);\n          }\n        }\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.ADMIN_APP: {\n        adminMessage = Protobuf.Admin.AdminMessage.fromBinary(\n          dataPacket.payload,\n        );\n        switch (adminMessage.payloadVariant.case) {\n          case \"getChannelResponse\": {\n            this.events.onChannelPacket.dispatch(\n              adminMessage.payloadVariant.value,\n            );\n            break;\n          }\n          case \"getOwnerResponse\": {\n            this.events.onUserPacket.dispatch({\n              ...packetMetadata,\n              data: adminMessage.payloadVariant.value,\n            });\n            break;\n          }\n          case \"getConfigResponse\": {\n            this.events.onConfigPacket.dispatch(\n              adminMessage.payloadVariant.value,\n            );\n            break;\n          }\n          case \"getModuleConfigResponse\": {\n            this.events.onModuleConfigPacket.dispatch(\n              adminMessage.payloadVariant.value,\n            );\n            break;\n          }\n          case \"getDeviceMetadataResponse\": {\n            this.log.debug(\n              Types.Emitter[Types.Emitter.GetMetadata],\n              `🏷️ Received metadata packet from ${dataPacket.source}`,\n            );\n\n            this.events.onDeviceMetadataPacket.dispatch({\n              ...packetMetadata,\n              data: adminMessage.payloadVariant.value,\n            });\n            break;\n          }\n          default: {\n            this.log.error(\n              Types.Emitter[Types.Emitter.HandleMeshPacket],\n              `⚠️ Received unhandled AdminMessage, type ${\n                adminMessage.payloadVariant.case ?? \"undefined\"\n              }`,\n              dataPacket.payload,\n            );\n          }\n        }\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.WAYPOINT_APP: {\n        this.events.onWaypointPacket.dispatch({\n          ...packetMetadata,\n          data: Protobuf.Mesh.Waypoint.fromBinary(dataPacket.payload),\n        });\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.AUDIO_APP: {\n        this.events.onAudioPacket.dispatch({\n          ...packetMetadata,\n          data: dataPacket.payload,\n        });\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.DETECTION_SENSOR_APP: {\n        this.events.onDetectionSensorPacket.dispatch({\n          ...packetMetadata,\n          data: dataPacket.payload,\n        });\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.REPLY_APP: {\n        this.events.onPingPacket.dispatch({\n          ...packetMetadata,\n          data: dataPacket.payload, //TODO: decode\n        });\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.IP_TUNNEL_APP: {\n        this.events.onIpTunnelPacket.dispatch({\n          ...packetMetadata,\n          data: dataPacket.payload,\n        });\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.PAXCOUNTER_APP: {\n        this.events.onPaxcounterPacket.dispatch({\n          ...packetMetadata,\n          data: Protobuf.PaxCount.Paxcount.fromBinary(dataPacket.payload),\n        });\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.SERIAL_APP: {\n        this.events.onSerialPacket.dispatch({\n          ...packetMetadata,\n          data: dataPacket.payload,\n        });\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.STORE_FORWARD_APP: {\n        this.events.onStoreForwardPacket.dispatch({\n          ...packetMetadata,\n          data: dataPacket.payload,\n        });\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.RANGE_TEST_APP: {\n        this.events.onRangeTestPacket.dispatch({\n          ...packetMetadata,\n          data: dataPacket.payload,\n        });\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.TELEMETRY_APP: {\n        this.events.onTelemetryPacket.dispatch({\n          ...packetMetadata,\n          data: Protobuf.Telemetry.Telemetry.fromBinary(dataPacket.payload),\n        });\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.ZPS_APP: {\n        this.events.onZpsPacket.dispatch({\n          ...packetMetadata,\n          data: dataPacket.payload,\n        });\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.SIMULATOR_APP: {\n        this.events.onSimulatorPacket.dispatch({\n          ...packetMetadata,\n          data: dataPacket.payload,\n        });\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.TRACEROUTE_APP: {\n        this.events.onTraceRoutePacket.dispatch({\n          ...packetMetadata,\n          data: Protobuf.Mesh.RouteDiscovery.fromBinary(dataPacket.payload),\n        });\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.NEIGHBORINFO_APP: {\n        this.events.onNeighborInfoPacket.dispatch({\n          ...packetMetadata,\n          data: Protobuf.Mesh.NeighborInfo.fromBinary(dataPacket.payload),\n        });\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.ATAK_PLUGIN: {\n        this.events.onAtakPluginPacket.dispatch({\n          ...packetMetadata,\n          data: dataPacket.payload,\n        });\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.MAP_REPORT_APP: {\n        this.events.onMapReportPacket.dispatch({\n          ...packetMetadata,\n          data: dataPacket.payload,\n        });\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.PRIVATE_APP: {\n        this.events.onPrivatePacket.dispatch({\n          ...packetMetadata,\n          data: dataPacket.payload,\n        });\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.ATAK_FORWARDER: {\n        this.events.onAtakForwarderPacket.dispatch({\n          ...packetMetadata,\n          data: dataPacket.payload,\n        });\n        break;\n      }\n\n      default:\n        throw new Error(`Unhandled case ${dataPacket.portnum}`);\n    }\n  }\n}\n","export * as Admin from \"@buf/meshtastic_protobufs.bufbuild_es/meshtastic/admin_pb.js\";\nexport * as AppOnly from \"@buf/meshtastic_protobufs.bufbuild_es/meshtastic/apponly_pb.js\";\nexport * as CannedMessages from \"@buf/meshtastic_protobufs.bufbuild_es/meshtastic/cannedmessages_pb.js\";\nexport * as Channel from \"@buf/meshtastic_protobufs.bufbuild_es/meshtastic/channel_pb.js\";\nexport * as ClientOnly from \"@buf/meshtastic_protobufs.bufbuild_es/meshtastic/clientonly_pb.js\";\nexport * as Config from \"@buf/meshtastic_protobufs.bufbuild_es/meshtastic/config_pb.js\";\nexport * as ConnectionStatus from \"@buf/meshtastic_protobufs.bufbuild_es/meshtastic/connection_status_pb.js\";\nexport * as DeviceOnly from \"@buf/meshtastic_protobufs.bufbuild_es/meshtastic/deviceonly_pb.js\";\nexport * as LocalOnly from \"@buf/meshtastic_protobufs.bufbuild_es/meshtastic/localonly_pb.js\";\nexport * as Mesh from \"@buf/meshtastic_protobufs.bufbuild_es/meshtastic/mesh_pb.js\";\nexport * as ModuleConfig from \"@buf/meshtastic_protobufs.bufbuild_es/meshtastic/module_config_pb.js\";\nexport * as Mqtt from \"@buf/meshtastic_protobufs.bufbuild_es/meshtastic/mqtt_pb.js\";\nexport * as PaxCount from \"@buf/meshtastic_protobufs.bufbuild_es/meshtastic/paxcount_pb.js\";\nexport * as Portnums from \"@buf/meshtastic_protobufs.bufbuild_es/meshtastic/portnums_pb.js\";\nexport * as RemoteHardware from \"@buf/meshtastic_protobufs.bufbuild_es/meshtastic/remote_hardware_pb.js\";\nexport * as Rtttl from \"@buf/meshtastic_protobufs.bufbuild_es/meshtastic/rtttl_pb.js\";\nexport * as StoreForward from \"@buf/meshtastic_protobufs.bufbuild_es/meshtastic/storeforward_pb.js\";\nexport * as Telemetry from \"@buf/meshtastic_protobufs.bufbuild_es/meshtastic/telemetry_pb.js\";\nexport * as Xmodem from \"@buf/meshtastic_protobufs.bufbuild_es/meshtastic/xmodem_pb.js\";\n","// @generated by protoc-gen-es v1.10.0\n// @generated from file meshtastic/admin.proto (package meshtastic, syntax proto3)\n/* eslint-disable */\n// @ts-nocheck\n\nimport { proto3 } from \"@bufbuild/protobuf\";\nimport { Channel } from \"./channel_pb.js\";\nimport { DeviceMetadata, NodeRemoteHardwarePin, Position, User } from \"./mesh_pb.js\";\nimport { Config } from \"./config_pb.js\";\nimport { ModuleConfig } from \"./module_config_pb.js\";\nimport { DeviceConnectionStatus } from \"./connection_status_pb.js\";\n\n/**\n *\n * This message is handled by the Admin module and is responsible for all settings/channel read/write operations.\n * This message is used to do settings operations to both remote AND local nodes.\n * (Prior to 1.2 these operations were done via special ToRadio operations)\n *\n * @generated from message meshtastic.AdminMessage\n */\nexport const AdminMessage = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.AdminMessage\",\n  () => [\n    { no: 101, name: \"session_passkey\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n    { no: 1, name: \"get_channel_request\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */, oneof: \"payload_variant\" },\n    { no: 2, name: \"get_channel_response\", kind: \"message\", T: Channel, oneof: \"payload_variant\" },\n    { no: 3, name: \"get_owner_request\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, oneof: \"payload_variant\" },\n    { no: 4, name: \"get_owner_response\", kind: \"message\", T: User, oneof: \"payload_variant\" },\n    { no: 5, name: \"get_config_request\", kind: \"enum\", T: proto3.getEnumType(AdminMessage_ConfigType), oneof: \"payload_variant\" },\n    { no: 6, name: \"get_config_response\", kind: \"message\", T: Config, oneof: \"payload_variant\" },\n    { no: 7, name: \"get_module_config_request\", kind: \"enum\", T: proto3.getEnumType(AdminMessage_ModuleConfigType), oneof: \"payload_variant\" },\n    { no: 8, name: \"get_module_config_response\", kind: \"message\", T: ModuleConfig, oneof: \"payload_variant\" },\n    { no: 10, name: \"get_canned_message_module_messages_request\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, oneof: \"payload_variant\" },\n    { no: 11, name: \"get_canned_message_module_messages_response\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, oneof: \"payload_variant\" },\n    { no: 12, name: \"get_device_metadata_request\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, oneof: \"payload_variant\" },\n    { no: 13, name: \"get_device_metadata_response\", kind: \"message\", T: DeviceMetadata, oneof: \"payload_variant\" },\n    { no: 14, name: \"get_ringtone_request\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, oneof: \"payload_variant\" },\n    { no: 15, name: \"get_ringtone_response\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, oneof: \"payload_variant\" },\n    { no: 16, name: \"get_device_connection_status_request\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, oneof: \"payload_variant\" },\n    { no: 17, name: \"get_device_connection_status_response\", kind: \"message\", T: DeviceConnectionStatus, oneof: \"payload_variant\" },\n    { no: 18, name: \"set_ham_mode\", kind: \"message\", T: HamParameters, oneof: \"payload_variant\" },\n    { no: 19, name: \"get_node_remote_hardware_pins_request\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, oneof: \"payload_variant\" },\n    { no: 20, name: \"get_node_remote_hardware_pins_response\", kind: \"message\", T: NodeRemoteHardwarePinsResponse, oneof: \"payload_variant\" },\n    { no: 21, name: \"enter_dfu_mode_request\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, oneof: \"payload_variant\" },\n    { no: 22, name: \"delete_file_request\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, oneof: \"payload_variant\" },\n    { no: 23, name: \"set_scale\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */, oneof: \"payload_variant\" },\n    { no: 32, name: \"set_owner\", kind: \"message\", T: User, oneof: \"payload_variant\" },\n    { no: 33, name: \"set_channel\", kind: \"message\", T: Channel, oneof: \"payload_variant\" },\n    { no: 34, name: \"set_config\", kind: \"message\", T: Config, oneof: \"payload_variant\" },\n    { no: 35, name: \"set_module_config\", kind: \"message\", T: ModuleConfig, oneof: \"payload_variant\" },\n    { no: 36, name: \"set_canned_message_module_messages\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, oneof: \"payload_variant\" },\n    { no: 37, name: \"set_ringtone_message\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, oneof: \"payload_variant\" },\n    { no: 38, name: \"remove_by_nodenum\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */, oneof: \"payload_variant\" },\n    { no: 39, name: \"set_favorite_node\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */, oneof: \"payload_variant\" },\n    { no: 40, name: \"remove_favorite_node\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */, oneof: \"payload_variant\" },\n    { no: 41, name: \"set_fixed_position\", kind: \"message\", T: Position, oneof: \"payload_variant\" },\n    { no: 42, name: \"remove_fixed_position\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, oneof: \"payload_variant\" },\n    { no: 43, name: \"set_time_only\", kind: \"scalar\", T: 7 /* ScalarType.FIXED32 */, oneof: \"payload_variant\" },\n    { no: 64, name: \"begin_edit_settings\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, oneof: \"payload_variant\" },\n    { no: 65, name: \"commit_edit_settings\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, oneof: \"payload_variant\" },\n    { no: 94, name: \"factory_reset_device\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, oneof: \"payload_variant\" },\n    { no: 95, name: \"reboot_ota_seconds\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, oneof: \"payload_variant\" },\n    { no: 96, name: \"exit_simulator\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, oneof: \"payload_variant\" },\n    { no: 97, name: \"reboot_seconds\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, oneof: \"payload_variant\" },\n    { no: 98, name: \"shutdown_seconds\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, oneof: \"payload_variant\" },\n    { no: 99, name: \"factory_reset_config\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, oneof: \"payload_variant\" },\n    { no: 100, name: \"nodedb_reset\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, oneof: \"payload_variant\" },\n  ],\n);\n\n/**\n *\n * TODO: REPLACE\n *\n * @generated from enum meshtastic.AdminMessage.ConfigType\n */\nexport const AdminMessage_ConfigType = /*@__PURE__*/ proto3.makeEnum(\n  \"meshtastic.AdminMessage.ConfigType\",\n  [\n    {no: 0, name: \"DEVICE_CONFIG\"},\n    {no: 1, name: \"POSITION_CONFIG\"},\n    {no: 2, name: \"POWER_CONFIG\"},\n    {no: 3, name: \"NETWORK_CONFIG\"},\n    {no: 4, name: \"DISPLAY_CONFIG\"},\n    {no: 5, name: \"LORA_CONFIG\"},\n    {no: 6, name: \"BLUETOOTH_CONFIG\"},\n    {no: 7, name: \"SECURITY_CONFIG\"},\n    {no: 8, name: \"SESSIONKEY_CONFIG\"},\n  ],\n);\n\n/**\n *\n * TODO: REPLACE\n *\n * @generated from enum meshtastic.AdminMessage.ModuleConfigType\n */\nexport const AdminMessage_ModuleConfigType = /*@__PURE__*/ proto3.makeEnum(\n  \"meshtastic.AdminMessage.ModuleConfigType\",\n  [\n    {no: 0, name: \"MQTT_CONFIG\"},\n    {no: 1, name: \"SERIAL_CONFIG\"},\n    {no: 2, name: \"EXTNOTIF_CONFIG\"},\n    {no: 3, name: \"STOREFORWARD_CONFIG\"},\n    {no: 4, name: \"RANGETEST_CONFIG\"},\n    {no: 5, name: \"TELEMETRY_CONFIG\"},\n    {no: 6, name: \"CANNEDMSG_CONFIG\"},\n    {no: 7, name: \"AUDIO_CONFIG\"},\n    {no: 8, name: \"REMOTEHARDWARE_CONFIG\"},\n    {no: 9, name: \"NEIGHBORINFO_CONFIG\"},\n    {no: 10, name: \"AMBIENTLIGHTING_CONFIG\"},\n    {no: 11, name: \"DETECTIONSENSOR_CONFIG\"},\n    {no: 12, name: \"PAXCOUNTER_CONFIG\"},\n  ],\n);\n\n/**\n *\n * Parameters for setting up Meshtastic for ameteur radio usage\n *\n * @generated from message meshtastic.HamParameters\n */\nexport const HamParameters = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.HamParameters\",\n  () => [\n    { no: 1, name: \"call_sign\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"tx_power\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 3, name: \"frequency\", kind: \"scalar\", T: 2 /* ScalarType.FLOAT */ },\n    { no: 4, name: \"short_name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ],\n);\n\n/**\n *\n * Response envelope for node_remote_hardware_pins\n *\n * @generated from message meshtastic.NodeRemoteHardwarePinsResponse\n */\nexport const NodeRemoteHardwarePinsResponse = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.NodeRemoteHardwarePinsResponse\",\n  () => [\n    { no: 1, name: \"node_remote_hardware_pins\", kind: \"message\", T: NodeRemoteHardwarePin, repeated: true },\n  ],\n);\n\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Assert that condition is truthy or throw error (with message)\n */\nexport function assert(condition, msg) {\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions -- we want the implicit conversion to boolean\n    if (!condition) {\n        throw new Error(msg);\n    }\n}\nconst FLOAT32_MAX = 3.4028234663852886e38, FLOAT32_MIN = -3.4028234663852886e38, UINT32_MAX = 0xffffffff, INT32_MAX = 0x7fffffff, INT32_MIN = -0x80000000;\n/**\n * Assert a valid signed protobuf 32-bit integer.\n */\nexport function assertInt32(arg) {\n    if (typeof arg !== \"number\")\n        throw new Error(\"invalid int 32: \" + typeof arg);\n    if (!Number.isInteger(arg) || arg > INT32_MAX || arg < INT32_MIN)\n        throw new Error(\"invalid int 32: \" + arg); // eslint-disable-line @typescript-eslint/restrict-plus-operands -- we want the implicit conversion to string\n}\n/**\n * Assert a valid unsigned protobuf 32-bit integer.\n */\nexport function assertUInt32(arg) {\n    if (typeof arg !== \"number\")\n        throw new Error(\"invalid uint 32: \" + typeof arg);\n    if (!Number.isInteger(arg) || arg > UINT32_MAX || arg < 0)\n        throw new Error(\"invalid uint 32: \" + arg); // eslint-disable-line @typescript-eslint/restrict-plus-operands -- we want the implicit conversion to string\n}\n/**\n * Assert a valid protobuf float value.\n */\nexport function assertFloat32(arg) {\n    if (typeof arg !== \"number\")\n        throw new Error(\"invalid float 32: \" + typeof arg);\n    if (!Number.isFinite(arg))\n        return;\n    if (arg > FLOAT32_MAX || arg < FLOAT32_MIN)\n        throw new Error(\"invalid float 32: \" + arg); // eslint-disable-line @typescript-eslint/restrict-plus-operands -- we want the implicit conversion to string\n}\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { assert } from \"./assert.js\";\nconst enumTypeSymbol = Symbol(\"@bufbuild/protobuf/enum-type\");\n/**\n * Get reflection information from a generated enum.\n * If this function is called on something other than a generated\n * enum, it raises an error.\n */\nexport function getEnumType(enumObject) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-explicit-any\n    const t = enumObject[enumTypeSymbol];\n    assert(t, \"missing enum type on enum object\");\n    return t; // eslint-disable-line @typescript-eslint/no-unsafe-return\n}\n/**\n * Sets reflection information on a generated enum.\n */\nexport function setEnumType(enumObject, typeName, values, opt) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n    enumObject[enumTypeSymbol] = makeEnumType(typeName, values.map((v) => ({\n        no: v.no,\n        name: v.name,\n        localName: enumObject[v.no],\n    })), opt);\n}\n/**\n * Create a new EnumType with the given values.\n */\nexport function makeEnumType(typeName, values, \n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n_opt) {\n    const names = Object.create(null);\n    const numbers = Object.create(null);\n    const normalValues = [];\n    for (const value of values) {\n        // We do not surface options at this time\n        // const value: EnumValueInfo = {...v, options: v.options ?? emptyReadonlyObject};\n        const n = normalizeEnumValue(value);\n        normalValues.push(n);\n        names[value.name] = n;\n        numbers[value.no] = n;\n    }\n    return {\n        typeName,\n        values: normalValues,\n        // We do not surface options at this time\n        // options: opt?.options ?? Object.create(null),\n        findName(name) {\n            return names[name];\n        },\n        findNumber(no) {\n            return numbers[no];\n        },\n    };\n}\n/**\n * Create a new enum object with the given values.\n * Sets reflection information.\n */\nexport function makeEnum(typeName, values, opt) {\n    const enumObject = {};\n    for (const value of values) {\n        const n = normalizeEnumValue(value);\n        enumObject[n.localName] = n.no;\n        enumObject[n.no] = n.localName;\n    }\n    setEnumType(enumObject, typeName, values, opt);\n    return enumObject;\n}\nfunction normalizeEnumValue(value) {\n    if (\"localName\" in value) {\n        return value;\n    }\n    return Object.assign(Object.assign({}, value), { localName: value.name });\n}\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Message is the base class of every message, generated, or created at\n * runtime.\n *\n * It is _not_ safe to extend this class. If you want to create a message at\n * run time, use proto3.makeMessageType().\n */\nexport class Message {\n    /**\n     * Compare with a message of the same type.\n     * Note that this function disregards extensions and unknown fields.\n     */\n    equals(other) {\n        return this.getType().runtime.util.equals(this.getType(), this, other);\n    }\n    /**\n     * Create a deep copy.\n     */\n    clone() {\n        return this.getType().runtime.util.clone(this);\n    }\n    /**\n     * Parse from binary data, merging fields.\n     *\n     * Repeated fields are appended. Map entries are added, overwriting\n     * existing keys.\n     *\n     * If a message field is already present, it will be merged with the\n     * new data.\n     */\n    fromBinary(bytes, options) {\n        const type = this.getType(), format = type.runtime.bin, opt = format.makeReadOptions(options);\n        format.readMessage(this, opt.readerFactory(bytes), bytes.byteLength, opt);\n        return this;\n    }\n    /**\n     * Parse a message from a JSON value.\n     */\n    fromJson(jsonValue, options) {\n        const type = this.getType(), format = type.runtime.json, opt = format.makeReadOptions(options);\n        format.readMessage(type, jsonValue, opt, this);\n        return this;\n    }\n    /**\n     * Parse a message from a JSON string.\n     */\n    fromJsonString(jsonString, options) {\n        let json;\n        try {\n            json = JSON.parse(jsonString);\n        }\n        catch (e) {\n            throw new Error(`cannot decode ${this.getType().typeName} from JSON: ${e instanceof Error ? e.message : String(e)}`);\n        }\n        return this.fromJson(json, options);\n    }\n    /**\n     * Serialize the message to binary data.\n     */\n    toBinary(options) {\n        const type = this.getType(), bin = type.runtime.bin, opt = bin.makeWriteOptions(options), writer = opt.writerFactory();\n        bin.writeMessage(this, writer, opt);\n        return writer.finish();\n    }\n    /**\n     * Serialize the message to a JSON value, a JavaScript value that can be\n     * passed to JSON.stringify().\n     */\n    toJson(options) {\n        const type = this.getType(), json = type.runtime.json, opt = json.makeWriteOptions(options);\n        return json.writeMessage(this, opt);\n    }\n    /**\n     * Serialize the message to a JSON string.\n     */\n    toJsonString(options) {\n        var _a;\n        const value = this.toJson(options);\n        return JSON.stringify(value, null, (_a = options === null || options === void 0 ? void 0 : options.prettySpaces) !== null && _a !== void 0 ? _a : 0);\n    }\n    /**\n     * Override for serialization behavior. This will be invoked when calling\n     * JSON.stringify on this message (i.e. JSON.stringify(msg)).\n     *\n     * Note that this will not serialize google.protobuf.Any with a packed\n     * message because the protobuf JSON format specifies that it needs to be\n     * unpacked, and this is only possible with a type registry to look up the\n     * message type.  As a result, attempting to serialize a message with this\n     * type will throw an Error.\n     *\n     * This method is protected because you should not need to invoke it\n     * directly -- instead use JSON.stringify or toJsonString for\n     * stringified JSON.  Alternatively, if actual JSON is desired, you should\n     * use toJson.\n     */\n    toJSON() {\n        return this.toJson({\n            emitDefaultValues: true,\n        });\n    }\n    /**\n     * Retrieve the MessageType of this message - a singleton that represents\n     * the protobuf message declaration and provides metadata for reflection-\n     * based operations.\n     */\n    getType() {\n        // Any class that extends Message _must_ provide a complete static\n        // implementation of MessageType.\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return\n        return Object.getPrototypeOf(this).constructor;\n    }\n}\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"../message.js\";\n/**\n * Create a new message type using the given runtime.\n */\nexport function makeMessageType(runtime, typeName, fields, opt) {\n    var _a;\n    const localName = (_a = opt === null || opt === void 0 ? void 0 : opt.localName) !== null && _a !== void 0 ? _a : typeName.substring(typeName.lastIndexOf(\".\") + 1);\n    const type = {\n        [localName]: function (data) {\n            runtime.util.initFields(this);\n            runtime.util.initPartial(data, this);\n        },\n    }[localName];\n    Object.setPrototypeOf(type.prototype, new Message());\n    Object.assign(type, {\n        runtime,\n        typeName,\n        fields: runtime.util.newFieldList(fields),\n        fromBinary(bytes, options) {\n            return new type().fromBinary(bytes, options);\n        },\n        fromJson(jsonValue, options) {\n            return new type().fromJson(jsonValue, options);\n        },\n        fromJsonString(jsonString, options) {\n            return new type().fromJsonString(jsonString, options);\n        },\n        equals(a, b) {\n            return runtime.util.equals(type, a, b);\n        },\n    });\n    return type;\n}\n","// Copyright 2008 Google Inc.  All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n// Code generated by the Protocol Buffer compiler is owned by the owner\n// of the input file used when generating it.  This code is not\n// standalone and requires a support library to be linked with it.  This\n// support library is itself covered by the above license.\n/* eslint-disable prefer-const,@typescript-eslint/restrict-plus-operands */\n/**\n * Read a 64 bit varint as two JS numbers.\n *\n * Returns tuple:\n * [0]: low bits\n * [1]: high bits\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L175\n */\nexport function varint64read() {\n    let lowBits = 0;\n    let highBits = 0;\n    for (let shift = 0; shift < 28; shift += 7) {\n        let b = this.buf[this.pos++];\n        lowBits |= (b & 0x7f) << shift;\n        if ((b & 0x80) == 0) {\n            this.assertBounds();\n            return [lowBits, highBits];\n        }\n    }\n    let middleByte = this.buf[this.pos++];\n    // last four bits of the first 32 bit number\n    lowBits |= (middleByte & 0x0f) << 28;\n    // 3 upper bits are part of the next 32 bit number\n    highBits = (middleByte & 0x70) >> 4;\n    if ((middleByte & 0x80) == 0) {\n        this.assertBounds();\n        return [lowBits, highBits];\n    }\n    for (let shift = 3; shift <= 31; shift += 7) {\n        let b = this.buf[this.pos++];\n        highBits |= (b & 0x7f) << shift;\n        if ((b & 0x80) == 0) {\n            this.assertBounds();\n            return [lowBits, highBits];\n        }\n    }\n    throw new Error(\"invalid varint\");\n}\n/**\n * Write a 64 bit varint, given as two JS numbers, to the given bytes array.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/writer.js#L344\n */\nexport function varint64write(lo, hi, bytes) {\n    for (let i = 0; i < 28; i = i + 7) {\n        const shift = lo >>> i;\n        const hasNext = !(shift >>> 7 == 0 && hi == 0);\n        const byte = (hasNext ? shift | 0x80 : shift) & 0xff;\n        bytes.push(byte);\n        if (!hasNext) {\n            return;\n        }\n    }\n    const splitBits = ((lo >>> 28) & 0x0f) | ((hi & 0x07) << 4);\n    const hasMoreBits = !(hi >> 3 == 0);\n    bytes.push((hasMoreBits ? splitBits | 0x80 : splitBits) & 0xff);\n    if (!hasMoreBits) {\n        return;\n    }\n    for (let i = 3; i < 31; i = i + 7) {\n        const shift = hi >>> i;\n        const hasNext = !(shift >>> 7 == 0);\n        const byte = (hasNext ? shift | 0x80 : shift) & 0xff;\n        bytes.push(byte);\n        if (!hasNext) {\n            return;\n        }\n    }\n    bytes.push((hi >>> 31) & 0x01);\n}\n// constants for binary math\nconst TWO_PWR_32_DBL = 0x100000000;\n/**\n * Parse decimal string of 64 bit integer value as two JS numbers.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10\n */\nexport function int64FromString(dec) {\n    // Check for minus sign.\n    const minus = dec[0] === \"-\";\n    if (minus) {\n        dec = dec.slice(1);\n    }\n    // Work 6 decimal digits at a time, acting like we're converting base 1e6\n    // digits to binary. This is safe to do with floating point math because\n    // Number.isSafeInteger(ALL_32_BITS * 1e6) == true.\n    const base = 1e6;\n    let lowBits = 0;\n    let highBits = 0;\n    function add1e6digit(begin, end) {\n        // Note: Number('') is 0.\n        const digit1e6 = Number(dec.slice(begin, end));\n        highBits *= base;\n        lowBits = lowBits * base + digit1e6;\n        // Carry bits from lowBits to\n        if (lowBits >= TWO_PWR_32_DBL) {\n            highBits = highBits + ((lowBits / TWO_PWR_32_DBL) | 0);\n            lowBits = lowBits % TWO_PWR_32_DBL;\n        }\n    }\n    add1e6digit(-24, -18);\n    add1e6digit(-18, -12);\n    add1e6digit(-12, -6);\n    add1e6digit(-6);\n    return minus ? negate(lowBits, highBits) : newBits(lowBits, highBits);\n}\n/**\n * Losslessly converts a 64-bit signed integer in 32:32 split representation\n * into a decimal string.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10\n */\nexport function int64ToString(lo, hi) {\n    let bits = newBits(lo, hi);\n    // If we're treating the input as a signed value and the high bit is set, do\n    // a manual two's complement conversion before the decimal conversion.\n    const negative = (bits.hi & 0x80000000);\n    if (negative) {\n        bits = negate(bits.lo, bits.hi);\n    }\n    const result = uInt64ToString(bits.lo, bits.hi);\n    return negative ? \"-\" + result : result;\n}\n/**\n * Losslessly converts a 64-bit unsigned integer in 32:32 split representation\n * into a decimal string.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10\n */\nexport function uInt64ToString(lo, hi) {\n    ({ lo, hi } = toUnsigned(lo, hi));\n    // Skip the expensive conversion if the number is small enough to use the\n    // built-in conversions.\n    // Number.MAX_SAFE_INTEGER = 0x001FFFFF FFFFFFFF, thus any number with\n    // highBits <= 0x1FFFFF can be safely expressed with a double and retain\n    // integer precision.\n    // Proven by: Number.isSafeInteger(0x1FFFFF * 2**32 + 0xFFFFFFFF) == true.\n    if (hi <= 0x1FFFFF) {\n        return String(TWO_PWR_32_DBL * hi + lo);\n    }\n    // What this code is doing is essentially converting the input number from\n    // base-2 to base-1e7, which allows us to represent the 64-bit range with\n    // only 3 (very large) digits. Those digits are then trivial to convert to\n    // a base-10 string.\n    // The magic numbers used here are -\n    // 2^24 = 16777216 = (1,6777216) in base-1e7.\n    // 2^48 = 281474976710656 = (2,8147497,6710656) in base-1e7.\n    // Split 32:32 representation into 16:24:24 representation so our\n    // intermediate digits don't overflow.\n    const low = lo & 0xFFFFFF;\n    const mid = ((lo >>> 24) | (hi << 8)) & 0xFFFFFF;\n    const high = (hi >> 16) & 0xFFFF;\n    // Assemble our three base-1e7 digits, ignoring carries. The maximum\n    // value in a digit at this step is representable as a 48-bit integer, which\n    // can be stored in a 64-bit floating point number.\n    let digitA = low + (mid * 6777216) + (high * 6710656);\n    let digitB = mid + (high * 8147497);\n    let digitC = (high * 2);\n    // Apply carries from A to B and from B to C.\n    const base = 10000000;\n    if (digitA >= base) {\n        digitB += Math.floor(digitA / base);\n        digitA %= base;\n    }\n    if (digitB >= base) {\n        digitC += Math.floor(digitB / base);\n        digitB %= base;\n    }\n    // If digitC is 0, then we should have returned in the trivial code path\n    // at the top for non-safe integers. Given this, we can assume both digitB\n    // and digitA need leading zeros.\n    return digitC.toString() + decimalFrom1e7WithLeadingZeros(digitB) +\n        decimalFrom1e7WithLeadingZeros(digitA);\n}\nfunction toUnsigned(lo, hi) {\n    return { lo: lo >>> 0, hi: hi >>> 0 };\n}\nfunction newBits(lo, hi) {\n    return { lo: lo | 0, hi: hi | 0 };\n}\n/**\n * Returns two's compliment negation of input.\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Signed_32-bit_integers\n */\nfunction negate(lowBits, highBits) {\n    highBits = ~highBits;\n    if (lowBits) {\n        lowBits = ~lowBits + 1;\n    }\n    else {\n        // If lowBits is 0, then bitwise-not is 0xFFFFFFFF,\n        // adding 1 to that, results in 0x100000000, which leaves\n        // the low bits 0x0 and simply adds one to the high bits.\n        highBits += 1;\n    }\n    return newBits(lowBits, highBits);\n}\n/**\n * Returns decimal representation of digit1e7 with leading zeros.\n */\nconst decimalFrom1e7WithLeadingZeros = (digit1e7) => {\n    const partial = String(digit1e7);\n    return \"0000000\".slice(partial.length) + partial;\n};\n/**\n * Write a 32 bit varint, signed or unsigned. Same as `varint64write(0, value, bytes)`\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/1b18833f4f2a2f681f4e4a25cdf3b0a43115ec26/js/binary/encoder.js#L144\n */\nexport function varint32write(value, bytes) {\n    if (value >= 0) {\n        // write value as varint 32\n        while (value > 0x7f) {\n            bytes.push((value & 0x7f) | 0x80);\n            value = value >>> 7;\n        }\n        bytes.push(value);\n    }\n    else {\n        for (let i = 0; i < 9; i++) {\n            bytes.push((value & 127) | 128);\n            value = value >> 7;\n        }\n        bytes.push(1);\n    }\n}\n/**\n * Read an unsigned 32 bit varint.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L220\n */\nexport function varint32read() {\n    let b = this.buf[this.pos++];\n    let result = b & 0x7f;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7f) << 7;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7f) << 14;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7f) << 21;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    // Extract only last 4 bits\n    b = this.buf[this.pos++];\n    result |= (b & 0x0f) << 28;\n    for (let readBytes = 5; (b & 0x80) !== 0 && readBytes < 10; readBytes++)\n        b = this.buf[this.pos++];\n    if ((b & 0x80) != 0)\n        throw new Error(\"invalid varint\");\n    this.assertBounds();\n    // Result can have 32 bits, convert it to unsigned\n    return result >>> 0;\n}\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { assert } from \"./private/assert.js\";\nimport { int64FromString, int64ToString, uInt64ToString, } from \"./google/varint.js\";\nfunction makeInt64Support() {\n    const dv = new DataView(new ArrayBuffer(8));\n    // note that Safari 14 implements BigInt, but not the DataView methods\n    const ok = typeof BigInt === \"function\" &&\n        typeof dv.getBigInt64 === \"function\" &&\n        typeof dv.getBigUint64 === \"function\" &&\n        typeof dv.setBigInt64 === \"function\" &&\n        typeof dv.setBigUint64 === \"function\" &&\n        (typeof process != \"object\" ||\n            typeof process.env != \"object\" ||\n            process.env.BUF_BIGINT_DISABLE !== \"1\");\n    if (ok) {\n        const MIN = BigInt(\"-9223372036854775808\"), MAX = BigInt(\"9223372036854775807\"), UMIN = BigInt(\"0\"), UMAX = BigInt(\"18446744073709551615\");\n        return {\n            zero: BigInt(0),\n            supported: true,\n            parse(value) {\n                const bi = typeof value == \"bigint\" ? value : BigInt(value);\n                if (bi > MAX || bi < MIN) {\n                    throw new Error(`int64 invalid: ${value}`);\n                }\n                return bi;\n            },\n            uParse(value) {\n                const bi = typeof value == \"bigint\" ? value : BigInt(value);\n                if (bi > UMAX || bi < UMIN) {\n                    throw new Error(`uint64 invalid: ${value}`);\n                }\n                return bi;\n            },\n            enc(value) {\n                dv.setBigInt64(0, this.parse(value), true);\n                return {\n                    lo: dv.getInt32(0, true),\n                    hi: dv.getInt32(4, true),\n                };\n            },\n            uEnc(value) {\n                dv.setBigInt64(0, this.uParse(value), true);\n                return {\n                    lo: dv.getInt32(0, true),\n                    hi: dv.getInt32(4, true),\n                };\n            },\n            dec(lo, hi) {\n                dv.setInt32(0, lo, true);\n                dv.setInt32(4, hi, true);\n                return dv.getBigInt64(0, true);\n            },\n            uDec(lo, hi) {\n                dv.setInt32(0, lo, true);\n                dv.setInt32(4, hi, true);\n                return dv.getBigUint64(0, true);\n            },\n        };\n    }\n    const assertInt64String = (value) => assert(/^-?[0-9]+$/.test(value), `int64 invalid: ${value}`);\n    const assertUInt64String = (value) => assert(/^[0-9]+$/.test(value), `uint64 invalid: ${value}`);\n    return {\n        zero: \"0\",\n        supported: false,\n        parse(value) {\n            if (typeof value != \"string\") {\n                value = value.toString();\n            }\n            assertInt64String(value);\n            return value;\n        },\n        uParse(value) {\n            if (typeof value != \"string\") {\n                value = value.toString();\n            }\n            assertUInt64String(value);\n            return value;\n        },\n        enc(value) {\n            if (typeof value != \"string\") {\n                value = value.toString();\n            }\n            assertInt64String(value);\n            return int64FromString(value);\n        },\n        uEnc(value) {\n            if (typeof value != \"string\") {\n                value = value.toString();\n            }\n            assertUInt64String(value);\n            return int64FromString(value);\n        },\n        dec(lo, hi) {\n            return int64ToString(lo, hi);\n        },\n        uDec(lo, hi) {\n            return uInt64ToString(lo, hi);\n        },\n    };\n}\nexport const protoInt64 = makeInt64Support();\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Scalar value types. This is a subset of field types declared by protobuf\n * enum google.protobuf.FieldDescriptorProto.Type The types GROUP and MESSAGE\n * are omitted, but the numerical values are identical.\n */\nexport var ScalarType;\n(function (ScalarType) {\n    // 0 is reserved for errors.\n    // Order is weird for historical reasons.\n    ScalarType[ScalarType[\"DOUBLE\"] = 1] = \"DOUBLE\";\n    ScalarType[ScalarType[\"FLOAT\"] = 2] = \"FLOAT\";\n    // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if\n    // negative values are likely.\n    ScalarType[ScalarType[\"INT64\"] = 3] = \"INT64\";\n    ScalarType[ScalarType[\"UINT64\"] = 4] = \"UINT64\";\n    // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if\n    // negative values are likely.\n    ScalarType[ScalarType[\"INT32\"] = 5] = \"INT32\";\n    ScalarType[ScalarType[\"FIXED64\"] = 6] = \"FIXED64\";\n    ScalarType[ScalarType[\"FIXED32\"] = 7] = \"FIXED32\";\n    ScalarType[ScalarType[\"BOOL\"] = 8] = \"BOOL\";\n    ScalarType[ScalarType[\"STRING\"] = 9] = \"STRING\";\n    // Tag-delimited aggregate.\n    // Group type is deprecated and not supported in proto3. However, Proto3\n    // implementations should still be able to parse the group wire format and\n    // treat group fields as unknown fields.\n    // TYPE_GROUP = 10,\n    // TYPE_MESSAGE = 11,  // Length-delimited aggregate.\n    // New in version 2.\n    ScalarType[ScalarType[\"BYTES\"] = 12] = \"BYTES\";\n    ScalarType[ScalarType[\"UINT32\"] = 13] = \"UINT32\";\n    // TYPE_ENUM = 14,\n    ScalarType[ScalarType[\"SFIXED32\"] = 15] = \"SFIXED32\";\n    ScalarType[ScalarType[\"SFIXED64\"] = 16] = \"SFIXED64\";\n    ScalarType[ScalarType[\"SINT32\"] = 17] = \"SINT32\";\n    ScalarType[ScalarType[\"SINT64\"] = 18] = \"SINT64\";\n})(ScalarType || (ScalarType = {}));\n/**\n * JavaScript representation of fields with 64 bit integral types (int64, uint64,\n * sint64, fixed64, sfixed64).\n *\n * This is a subset of google.protobuf.FieldOptions.JSType, which defines JS_NORMAL,\n * JS_STRING, and JS_NUMBER. Protobuf-ES uses BigInt by default, but will use\n * String if `[jstype = JS_STRING]` is specified.\n *\n * ```protobuf\n * uint64 field_a = 1; // BigInt\n * uint64 field_b = 2 [jstype = JS_NORMAL]; // BigInt\n * uint64 field_b = 2 [jstype = JS_NUMBER]; // BigInt\n * uint64 field_b = 2 [jstype = JS_STRING]; // String\n * ```\n */\nexport var LongType;\n(function (LongType) {\n    /**\n     * Use JavaScript BigInt.\n     */\n    LongType[LongType[\"BIGINT\"] = 0] = \"BIGINT\";\n    /**\n     * Use JavaScript String.\n     *\n     * Field option `[jstype = JS_STRING]`.\n     */\n    LongType[LongType[\"STRING\"] = 1] = \"STRING\";\n})(LongType || (LongType = {}));\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { protoInt64 } from \"../proto-int64.js\";\nimport { LongType, ScalarType } from \"../scalar.js\";\n/**\n * Returns true if both scalar values are equal.\n */\nexport function scalarEquals(type, a, b) {\n    if (a === b) {\n        // This correctly matches equal values except BYTES and (possibly) 64-bit integers.\n        return true;\n    }\n    // Special case BYTES - we need to compare each byte individually\n    if (type == ScalarType.BYTES) {\n        if (!(a instanceof Uint8Array) || !(b instanceof Uint8Array)) {\n            return false;\n        }\n        if (a.length !== b.length) {\n            return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n            if (a[i] !== b[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    // Special case 64-bit integers - we support number, string and bigint representation.\n    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\n    switch (type) {\n        case ScalarType.UINT64:\n        case ScalarType.FIXED64:\n        case ScalarType.INT64:\n        case ScalarType.SFIXED64:\n        case ScalarType.SINT64:\n            // Loose comparison will match between 0n, 0 and \"0\".\n            return a == b;\n    }\n    // Anything that hasn't been caught by strict comparison or special cased\n    // BYTES and 64-bit integers is not equal.\n    return false;\n}\n/**\n * Returns the zero value for the given scalar type.\n */\nexport function scalarZeroValue(type, longType) {\n    switch (type) {\n        case ScalarType.BOOL:\n            return false;\n        case ScalarType.UINT64:\n        case ScalarType.FIXED64:\n        case ScalarType.INT64:\n        case ScalarType.SFIXED64:\n        case ScalarType.SINT64:\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison -- acceptable since it's covered by tests\n            return (longType == 0 ? protoInt64.zero : \"0\");\n        case ScalarType.DOUBLE:\n        case ScalarType.FLOAT:\n            return 0.0;\n        case ScalarType.BYTES:\n            return new Uint8Array(0);\n        case ScalarType.STRING:\n            return \"\";\n        default:\n            // Handles INT32, UINT32, SINT32, FIXED32, SFIXED32.\n            // We do not use individual cases to save a few bytes code size.\n            return 0;\n    }\n}\n/**\n * Returns true for a zero-value. For example, an integer has the zero-value `0`,\n * a boolean is `false`, a string is `\"\"`, and bytes is an empty Uint8Array.\n *\n * In proto3, zero-values are not written to the wire, unless the field is\n * optional or repeated.\n */\nexport function isScalarZeroValue(type, value) {\n    switch (type) {\n        case ScalarType.BOOL:\n            return value === false;\n        case ScalarType.STRING:\n            return value === \"\";\n        case ScalarType.BYTES:\n            return value instanceof Uint8Array && !value.byteLength;\n        default:\n            return value == 0; // Loose comparison matches 0n, 0 and \"0\"\n    }\n}\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { varint32read, varint32write, varint64read, varint64write, } from \"./google/varint.js\";\nimport { assertFloat32, assertInt32, assertUInt32 } from \"./private/assert.js\";\nimport { protoInt64 } from \"./proto-int64.js\";\n/* eslint-disable prefer-const,no-case-declarations,@typescript-eslint/restrict-plus-operands */\n/**\n * Protobuf binary format wire types.\n *\n * A wire type provides just enough information to find the length of the\n * following value.\n *\n * See https://developers.google.com/protocol-buffers/docs/encoding#structure\n */\nexport var WireType;\n(function (WireType) {\n    /**\n     * Used for int32, int64, uint32, uint64, sint32, sint64, bool, enum\n     */\n    WireType[WireType[\"Varint\"] = 0] = \"Varint\";\n    /**\n     * Used for fixed64, sfixed64, double.\n     * Always 8 bytes with little-endian byte order.\n     */\n    WireType[WireType[\"Bit64\"] = 1] = \"Bit64\";\n    /**\n     * Used for string, bytes, embedded messages, packed repeated fields\n     *\n     * Only repeated numeric types (types which use the varint, 32-bit,\n     * or 64-bit wire types) can be packed. In proto3, such fields are\n     * packed by default.\n     */\n    WireType[WireType[\"LengthDelimited\"] = 2] = \"LengthDelimited\";\n    /**\n     * Start of a tag-delimited aggregate, such as a proto2 group, or a message\n     * in editions with message_encoding = DELIMITED.\n     */\n    WireType[WireType[\"StartGroup\"] = 3] = \"StartGroup\";\n    /**\n     * End of a tag-delimited aggregate.\n     */\n    WireType[WireType[\"EndGroup\"] = 4] = \"EndGroup\";\n    /**\n     * Used for fixed32, sfixed32, float.\n     * Always 4 bytes with little-endian byte order.\n     */\n    WireType[WireType[\"Bit32\"] = 5] = \"Bit32\";\n})(WireType || (WireType = {}));\nexport class BinaryWriter {\n    constructor(textEncoder) {\n        /**\n         * Previous fork states.\n         */\n        this.stack = [];\n        this.textEncoder = textEncoder !== null && textEncoder !== void 0 ? textEncoder : new TextEncoder();\n        this.chunks = [];\n        this.buf = [];\n    }\n    /**\n     * Return all bytes written and reset this writer.\n     */\n    finish() {\n        this.chunks.push(new Uint8Array(this.buf)); // flush the buffer\n        let len = 0;\n        for (let i = 0; i < this.chunks.length; i++)\n            len += this.chunks[i].length;\n        let bytes = new Uint8Array(len);\n        let offset = 0;\n        for (let i = 0; i < this.chunks.length; i++) {\n            bytes.set(this.chunks[i], offset);\n            offset += this.chunks[i].length;\n        }\n        this.chunks = [];\n        return bytes;\n    }\n    /**\n     * Start a new fork for length-delimited data like a message\n     * or a packed repeated field.\n     *\n     * Must be joined later with `join()`.\n     */\n    fork() {\n        this.stack.push({ chunks: this.chunks, buf: this.buf });\n        this.chunks = [];\n        this.buf = [];\n        return this;\n    }\n    /**\n     * Join the last fork. Write its length and bytes, then\n     * return to the previous state.\n     */\n    join() {\n        // get chunk of fork\n        let chunk = this.finish();\n        // restore previous state\n        let prev = this.stack.pop();\n        if (!prev)\n            throw new Error(\"invalid state, fork stack empty\");\n        this.chunks = prev.chunks;\n        this.buf = prev.buf;\n        // write length of chunk as varint\n        this.uint32(chunk.byteLength);\n        return this.raw(chunk);\n    }\n    /**\n     * Writes a tag (field number and wire type).\n     *\n     * Equivalent to `uint32( (fieldNo << 3 | type) >>> 0 )`.\n     *\n     * Generated code should compute the tag ahead of time and call `uint32()`.\n     */\n    tag(fieldNo, type) {\n        return this.uint32(((fieldNo << 3) | type) >>> 0);\n    }\n    /**\n     * Write a chunk of raw bytes.\n     */\n    raw(chunk) {\n        if (this.buf.length) {\n            this.chunks.push(new Uint8Array(this.buf));\n            this.buf = [];\n        }\n        this.chunks.push(chunk);\n        return this;\n    }\n    /**\n     * Write a `uint32` value, an unsigned 32 bit varint.\n     */\n    uint32(value) {\n        assertUInt32(value);\n        // write value as varint 32, inlined for speed\n        while (value > 0x7f) {\n            this.buf.push((value & 0x7f) | 0x80);\n            value = value >>> 7;\n        }\n        this.buf.push(value);\n        return this;\n    }\n    /**\n     * Write a `int32` value, a signed 32 bit varint.\n     */\n    int32(value) {\n        assertInt32(value);\n        varint32write(value, this.buf);\n        return this;\n    }\n    /**\n     * Write a `bool` value, a variant.\n     */\n    bool(value) {\n        this.buf.push(value ? 1 : 0);\n        return this;\n    }\n    /**\n     * Write a `bytes` value, length-delimited arbitrary data.\n     */\n    bytes(value) {\n        this.uint32(value.byteLength); // write length of chunk as varint\n        return this.raw(value);\n    }\n    /**\n     * Write a `string` value, length-delimited data converted to UTF-8 text.\n     */\n    string(value) {\n        let chunk = this.textEncoder.encode(value);\n        this.uint32(chunk.byteLength); // write length of chunk as varint\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `float` value, 32-bit floating point number.\n     */\n    float(value) {\n        assertFloat32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setFloat32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `double` value, a 64-bit floating point number.\n     */\n    double(value) {\n        let chunk = new Uint8Array(8);\n        new DataView(chunk.buffer).setFloat64(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `fixed32` value, an unsigned, fixed-length 32-bit integer.\n     */\n    fixed32(value) {\n        assertUInt32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setUint32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `sfixed32` value, a signed, fixed-length 32-bit integer.\n     */\n    sfixed32(value) {\n        assertInt32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setInt32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `sint32` value, a signed, zigzag-encoded 32-bit varint.\n     */\n    sint32(value) {\n        assertInt32(value);\n        // zigzag encode\n        value = ((value << 1) ^ (value >> 31)) >>> 0;\n        varint32write(value, this.buf);\n        return this;\n    }\n    /**\n     * Write a `fixed64` value, a signed, fixed-length 64-bit integer.\n     */\n    sfixed64(value) {\n        let chunk = new Uint8Array(8), view = new DataView(chunk.buffer), tc = protoInt64.enc(value);\n        view.setInt32(0, tc.lo, true);\n        view.setInt32(4, tc.hi, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `fixed64` value, an unsigned, fixed-length 64 bit integer.\n     */\n    fixed64(value) {\n        let chunk = new Uint8Array(8), view = new DataView(chunk.buffer), tc = protoInt64.uEnc(value);\n        view.setInt32(0, tc.lo, true);\n        view.setInt32(4, tc.hi, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `int64` value, a signed 64-bit varint.\n     */\n    int64(value) {\n        let tc = protoInt64.enc(value);\n        varint64write(tc.lo, tc.hi, this.buf);\n        return this;\n    }\n    /**\n     * Write a `sint64` value, a signed, zig-zag-encoded 64-bit varint.\n     */\n    sint64(value) {\n        let tc = protoInt64.enc(value), \n        // zigzag encode\n        sign = tc.hi >> 31, lo = (tc.lo << 1) ^ sign, hi = ((tc.hi << 1) | (tc.lo >>> 31)) ^ sign;\n        varint64write(lo, hi, this.buf);\n        return this;\n    }\n    /**\n     * Write a `uint64` value, an unsigned 64-bit varint.\n     */\n    uint64(value) {\n        let tc = protoInt64.uEnc(value);\n        varint64write(tc.lo, tc.hi, this.buf);\n        return this;\n    }\n}\nexport class BinaryReader {\n    constructor(buf, textDecoder) {\n        this.varint64 = varint64read; // dirty cast for `this`\n        /**\n         * Read a `uint32` field, an unsigned 32 bit varint.\n         */\n        this.uint32 = varint32read; // dirty cast for `this` and access to protected `buf`\n        this.buf = buf;\n        this.len = buf.length;\n        this.pos = 0;\n        this.view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n        this.textDecoder = textDecoder !== null && textDecoder !== void 0 ? textDecoder : new TextDecoder();\n    }\n    /**\n     * Reads a tag - field number and wire type.\n     */\n    tag() {\n        let tag = this.uint32(), fieldNo = tag >>> 3, wireType = tag & 7;\n        if (fieldNo <= 0 || wireType < 0 || wireType > 5)\n            throw new Error(\"illegal tag: field no \" + fieldNo + \" wire type \" + wireType);\n        return [fieldNo, wireType];\n    }\n    /**\n     * Skip one element and return the skipped data.\n     *\n     * When skipping StartGroup, provide the tags field number to check for\n     * matching field number in the EndGroup tag.\n     */\n    skip(wireType, fieldNo) {\n        let start = this.pos;\n        switch (wireType) {\n            case WireType.Varint:\n                while (this.buf[this.pos++] & 0x80) {\n                    // ignore\n                }\n                break;\n            // eslint-disable-next-line\n            // @ts-ignore TS7029: Fallthrough case in switch\n            case WireType.Bit64:\n                this.pos += 4;\n            // eslint-disable-next-line\n            // @ts-ignore TS7029: Fallthrough case in switch\n            case WireType.Bit32:\n                this.pos += 4;\n                break;\n            case WireType.LengthDelimited:\n                let len = this.uint32();\n                this.pos += len;\n                break;\n            case WireType.StartGroup:\n                for (;;) {\n                    const [fn, wt] = this.tag();\n                    if (wt === WireType.EndGroup) {\n                        if (fieldNo !== undefined && fn !== fieldNo) {\n                            throw new Error(\"invalid end group tag\");\n                        }\n                        break;\n                    }\n                    this.skip(wt, fn);\n                }\n                break;\n            default:\n                throw new Error(\"cant skip wire type \" + wireType);\n        }\n        this.assertBounds();\n        return this.buf.subarray(start, this.pos);\n    }\n    /**\n     * Throws error if position in byte array is out of range.\n     */\n    assertBounds() {\n        if (this.pos > this.len)\n            throw new RangeError(\"premature EOF\");\n    }\n    /**\n     * Read a `int32` field, a signed 32 bit varint.\n     */\n    int32() {\n        return this.uint32() | 0;\n    }\n    /**\n     * Read a `sint32` field, a signed, zigzag-encoded 32-bit varint.\n     */\n    sint32() {\n        let zze = this.uint32();\n        // decode zigzag\n        return (zze >>> 1) ^ -(zze & 1);\n    }\n    /**\n     * Read a `int64` field, a signed 64-bit varint.\n     */\n    int64() {\n        return protoInt64.dec(...this.varint64());\n    }\n    /**\n     * Read a `uint64` field, an unsigned 64-bit varint.\n     */\n    uint64() {\n        return protoInt64.uDec(...this.varint64());\n    }\n    /**\n     * Read a `sint64` field, a signed, zig-zag-encoded 64-bit varint.\n     */\n    sint64() {\n        let [lo, hi] = this.varint64();\n        // decode zig zag\n        let s = -(lo & 1);\n        lo = ((lo >>> 1) | ((hi & 1) << 31)) ^ s;\n        hi = (hi >>> 1) ^ s;\n        return protoInt64.dec(lo, hi);\n    }\n    /**\n     * Read a `bool` field, a variant.\n     */\n    bool() {\n        let [lo, hi] = this.varint64();\n        return lo !== 0 || hi !== 0;\n    }\n    /**\n     * Read a `fixed32` field, an unsigned, fixed-length 32-bit integer.\n     */\n    fixed32() {\n        return this.view.getUint32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `sfixed32` field, a signed, fixed-length 32-bit integer.\n     */\n    sfixed32() {\n        return this.view.getInt32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `fixed64` field, an unsigned, fixed-length 64 bit integer.\n     */\n    fixed64() {\n        return protoInt64.uDec(this.sfixed32(), this.sfixed32());\n    }\n    /**\n     * Read a `fixed64` field, a signed, fixed-length 64-bit integer.\n     */\n    sfixed64() {\n        return protoInt64.dec(this.sfixed32(), this.sfixed32());\n    }\n    /**\n     * Read a `float` field, 32-bit floating point number.\n     */\n    float() {\n        return this.view.getFloat32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `double` field, a 64-bit floating point number.\n     */\n    double() {\n        return this.view.getFloat64((this.pos += 8) - 8, true);\n    }\n    /**\n     * Read a `bytes` field, length-delimited arbitrary data.\n     */\n    bytes() {\n        let len = this.uint32(), start = this.pos;\n        this.pos += len;\n        this.assertBounds();\n        return this.buf.subarray(start, start + len);\n    }\n    /**\n     * Read a `string` field, length-delimited data converted to UTF-8 text.\n     */\n    string() {\n        return this.textDecoder.decode(this.bytes());\n    }\n}\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { scalarZeroValue } from \"./scalars.js\";\nimport { WireType } from \"../binary-encoding.js\";\n/**\n * Create a new extension using the given runtime.\n */\nexport function makeExtension(runtime, typeName, extendee, field) {\n    let fi;\n    return {\n        typeName,\n        extendee,\n        get field() {\n            if (!fi) {\n                const i = (typeof field == \"function\" ? field() : field);\n                i.name = typeName.split(\".\").pop();\n                i.jsonName = `[${typeName}]`;\n                fi = runtime.util.newFieldList([i]).list()[0];\n            }\n            return fi;\n        },\n        runtime,\n    };\n}\n/**\n * Create a container that allows us to read extension fields into it with the\n * same logic as regular fields.\n */\nexport function createExtensionContainer(extension) {\n    const localName = extension.field.localName;\n    const container = Object.create(null);\n    container[localName] = initExtensionField(extension);\n    return [container, () => container[localName]];\n}\nfunction initExtensionField(ext) {\n    const field = ext.field;\n    if (field.repeated) {\n        return [];\n    }\n    if (field.default !== undefined) {\n        return field.default;\n    }\n    switch (field.kind) {\n        case \"enum\":\n            return field.T.values[0].no;\n        case \"scalar\":\n            return scalarZeroValue(field.T, field.L);\n        case \"message\":\n            // eslint-disable-next-line no-case-declarations\n            const T = field.T, value = new T();\n            return T.fieldWrapper ? T.fieldWrapper.unwrapField(value) : value;\n        case \"map\":\n            throw \"map fields are not allowed to be extensions\";\n    }\n}\n/**\n * Helper to filter unknown fields, optimized based on field type.\n */\nexport function filterUnknownFields(unknownFields, field) {\n    if (!field.repeated && (field.kind == \"enum\" || field.kind == \"scalar\")) {\n        // singular scalar fields do not merge, we pick the last\n        for (let i = unknownFields.length - 1; i >= 0; --i) {\n            if (unknownFields[i].no == field.no) {\n                return [unknownFields[i]];\n            }\n        }\n        return [];\n    }\n    return unknownFields.filter((uf) => uf.no === field.no);\n}\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* eslint-disable @typescript-eslint/ban-ts-comment, @typescript-eslint/no-unnecessary-condition, prefer-const */\n// lookup table from base64 character to byte\nlet encTable = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".split(\"\");\n// lookup table from base64 character *code* to byte because lookup by number is fast\nlet decTable = [];\nfor (let i = 0; i < encTable.length; i++)\n    decTable[encTable[i].charCodeAt(0)] = i;\n// support base64url variants\ndecTable[\"-\".charCodeAt(0)] = encTable.indexOf(\"+\");\ndecTable[\"_\".charCodeAt(0)] = encTable.indexOf(\"/\");\nexport const protoBase64 = {\n    /**\n     * Decodes a base64 string to a byte array.\n     *\n     * - ignores white-space, including line breaks and tabs\n     * - allows inner padding (can decode concatenated base64 strings)\n     * - does not require padding\n     * - understands base64url encoding:\n     *   \"-\" instead of \"+\",\n     *   \"_\" instead of \"/\",\n     *   no padding\n     */\n    dec(base64Str) {\n        // estimate byte size, not accounting for inner padding and whitespace\n        let es = (base64Str.length * 3) / 4;\n        if (base64Str[base64Str.length - 2] == \"=\")\n            es -= 2;\n        else if (base64Str[base64Str.length - 1] == \"=\")\n            es -= 1;\n        let bytes = new Uint8Array(es), bytePos = 0, // position in byte array\n        groupPos = 0, // position in base64 group\n        b, // current byte\n        p = 0; // previous byte\n        for (let i = 0; i < base64Str.length; i++) {\n            b = decTable[base64Str.charCodeAt(i)];\n            if (b === undefined) {\n                switch (base64Str[i]) {\n                    // @ts-ignore TS7029: Fallthrough case in switch\n                    case \"=\":\n                        groupPos = 0; // reset state when padding found\n                    // @ts-ignore TS7029: Fallthrough case in switch\n                    case \"\\n\":\n                    case \"\\r\":\n                    case \"\\t\":\n                    case \" \":\n                        continue; // skip white-space, and padding\n                    default:\n                        throw Error(\"invalid base64 string.\");\n                }\n            }\n            switch (groupPos) {\n                case 0:\n                    p = b;\n                    groupPos = 1;\n                    break;\n                case 1:\n                    bytes[bytePos++] = (p << 2) | ((b & 48) >> 4);\n                    p = b;\n                    groupPos = 2;\n                    break;\n                case 2:\n                    bytes[bytePos++] = ((p & 15) << 4) | ((b & 60) >> 2);\n                    p = b;\n                    groupPos = 3;\n                    break;\n                case 3:\n                    bytes[bytePos++] = ((p & 3) << 6) | b;\n                    groupPos = 0;\n                    break;\n            }\n        }\n        if (groupPos == 1)\n            throw Error(\"invalid base64 string.\");\n        return bytes.subarray(0, bytePos);\n    },\n    /**\n     * Encode a byte array to a base64 string.\n     */\n    enc(bytes) {\n        let base64 = \"\", groupPos = 0, // position in base64 group\n        b, // current byte\n        p = 0; // carry over from previous byte\n        for (let i = 0; i < bytes.length; i++) {\n            b = bytes[i];\n            switch (groupPos) {\n                case 0:\n                    base64 += encTable[b >> 2];\n                    p = (b & 3) << 4;\n                    groupPos = 1;\n                    break;\n                case 1:\n                    base64 += encTable[p | (b >> 4)];\n                    p = (b & 15) << 2;\n                    groupPos = 2;\n                    break;\n                case 2:\n                    base64 += encTable[p | (b >> 6)];\n                    base64 += encTable[b & 63];\n                    groupPos = 0;\n                    break;\n            }\n        }\n        // add output padding\n        if (groupPos) {\n            base64 += encTable[p];\n            base64 += \"=\";\n            if (groupPos == 1)\n                base64 += \"=\";\n        }\n        return base64;\n    },\n};\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { assert } from \"./private/assert.js\";\nimport { createExtensionContainer, filterUnknownFields, } from \"./private/extensions.js\";\n/**\n * Retrieve an extension value from a message.\n *\n * The function never returns undefined. Use hasExtension() to check whether an\n * extension is set. If the extension is not set, this function returns the\n * default value (if one was specified in the protobuf source), or the zero value\n * (for example `0` for numeric types, `[]` for repeated extension fields, and\n * an empty message instance for message fields).\n *\n * Extensions are stored as unknown fields on a message. To mutate an extension\n * value, make sure to store the new value with setExtension() after mutating.\n *\n * If the extension does not extend the given message, an error is raised.\n */\nexport function getExtension(message, extension, options) {\n    assertExtendee(extension, message);\n    const opt = extension.runtime.bin.makeReadOptions(options);\n    const ufs = filterUnknownFields(message.getType().runtime.bin.listUnknownFields(message), extension.field);\n    const [container, get] = createExtensionContainer(extension);\n    for (const uf of ufs) {\n        extension.runtime.bin.readField(container, opt.readerFactory(uf.data), extension.field, uf.wireType, opt);\n    }\n    return get();\n}\n/**\n * Set an extension value on a message. If the message already has a value for\n * this extension, the value is replaced.\n *\n * If the extension does not extend the given message, an error is raised.\n */\nexport function setExtension(message, extension, value, options) {\n    assertExtendee(extension, message);\n    const readOpt = extension.runtime.bin.makeReadOptions(options);\n    const writeOpt = extension.runtime.bin.makeWriteOptions(options);\n    if (hasExtension(message, extension)) {\n        const ufs = message\n            .getType()\n            .runtime.bin.listUnknownFields(message)\n            .filter((uf) => uf.no != extension.field.no);\n        message.getType().runtime.bin.discardUnknownFields(message);\n        for (const uf of ufs) {\n            message\n                .getType()\n                .runtime.bin.onUnknownField(message, uf.no, uf.wireType, uf.data);\n        }\n    }\n    const writer = writeOpt.writerFactory();\n    let f = extension.field;\n    // Implicit presence does not apply to extensions, see https://github.com/protocolbuffers/protobuf/issues/8234\n    // We patch the field info to use explicit presence:\n    if (!f.opt && !f.repeated && (f.kind == \"enum\" || f.kind == \"scalar\")) {\n        f = Object.assign(Object.assign({}, extension.field), { opt: true });\n    }\n    extension.runtime.bin.writeField(f, value, writer, writeOpt);\n    const reader = readOpt.readerFactory(writer.finish());\n    while (reader.pos < reader.len) {\n        const [no, wireType] = reader.tag();\n        const data = reader.skip(wireType, no);\n        message.getType().runtime.bin.onUnknownField(message, no, wireType, data);\n    }\n}\n/**\n * Remove an extension value from a message.\n *\n * If the extension does not extend the given message, an error is raised.\n */\nexport function clearExtension(message, extension) {\n    assertExtendee(extension, message);\n    if (hasExtension(message, extension)) {\n        const bin = message.getType().runtime.bin;\n        const ufs = bin\n            .listUnknownFields(message)\n            .filter((uf) => uf.no != extension.field.no);\n        bin.discardUnknownFields(message);\n        for (const uf of ufs) {\n            bin.onUnknownField(message, uf.no, uf.wireType, uf.data);\n        }\n    }\n}\n/**\n * Check whether an extension is set on a message.\n */\nexport function hasExtension(message, extension) {\n    const messageType = message.getType();\n    return (extension.extendee.typeName === messageType.typeName &&\n        !!messageType.runtime.bin\n            .listUnknownFields(message)\n            .find((uf) => uf.no == extension.field.no));\n}\nfunction assertExtendee(extension, message) {\n    assert(extension.extendee.typeName == message.getType().typeName, `extension ${extension.typeName} can only be applied to message ${extension.extendee.typeName}`);\n}\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { isScalarZeroValue, scalarZeroValue } from \"./scalars.js\";\n/**\n * Returns true if the field is set.\n */\nexport function isFieldSet(field, target) {\n    const localName = field.localName;\n    if (field.repeated) {\n        return target[localName].length > 0;\n    }\n    if (field.oneof) {\n        return target[field.oneof.localName].case === localName; // eslint-disable-line @typescript-eslint/no-unsafe-member-access\n    }\n    switch (field.kind) {\n        case \"enum\":\n        case \"scalar\":\n            if (field.opt || field.req) {\n                // explicit presence\n                return target[localName] !== undefined;\n            }\n            // implicit presence\n            if (field.kind == \"enum\") {\n                return target[localName] !== field.T.values[0].no;\n            }\n            return !isScalarZeroValue(field.T, target[localName]);\n        case \"message\":\n            return target[localName] !== undefined;\n        case \"map\":\n            return Object.keys(target[localName]).length > 0; // eslint-disable-line @typescript-eslint/no-unsafe-argument\n    }\n}\n/**\n * Resets the field, so that isFieldSet() will return false.\n */\nexport function clearField(field, target) {\n    const localName = field.localName;\n    const implicitPresence = !field.opt && !field.req;\n    if (field.repeated) {\n        target[localName] = [];\n    }\n    else if (field.oneof) {\n        target[field.oneof.localName] = { case: undefined };\n    }\n    else {\n        switch (field.kind) {\n            case \"map\":\n                target[localName] = {};\n                break;\n            case \"enum\":\n                target[localName] = implicitPresence ? field.T.values[0].no : undefined;\n                break;\n            case \"scalar\":\n                target[localName] = implicitPresence\n                    ? scalarZeroValue(field.T, field.L)\n                    : undefined;\n                break;\n            case \"message\":\n                target[localName] = undefined;\n                break;\n        }\n    }\n}\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"./message.js\";\n/**\n * Check whether the given object is any subtype of Message or is a specific\n * Message by passing the type.\n *\n * Just like `instanceof`, `isMessage` narrows the type. The advantage of\n * `isMessage` is that it compares identity by the message type name, not by\n * class identity. This makes it robust against the dual package hazard and\n * similar situations, where the same message is duplicated.\n *\n * This function is _mostly_ equivalent to the `instanceof` operator. For\n * example, `isMessage(foo, MyMessage)` is the same as `foo instanceof MyMessage`,\n * and `isMessage(foo)` is the same as `foo instanceof Message`. In most cases,\n * `isMessage` should be preferred over `instanceof`.\n *\n * However, due to the fact that `isMessage` does not use class identity, there\n * are subtle differences between this function and `instanceof`. Notably,\n * calling `isMessage` on an explicit type of Message will return false.\n */\nexport function isMessage(arg, type) {\n    if (arg === null || typeof arg != \"object\") {\n        return false;\n    }\n    if (!Object.getOwnPropertyNames(Message.prototype).every((m) => m in arg && typeof arg[m] == \"function\")) {\n        return false;\n    }\n    const actualType = arg.getType();\n    if (actualType === null ||\n        typeof actualType != \"function\" ||\n        !(\"typeName\" in actualType) ||\n        typeof actualType.typeName != \"string\") {\n        return false;\n    }\n    return type === undefined ? true : actualType.typeName == type.typeName;\n}\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"../message.js\";\nimport { ScalarType } from \"../scalar.js\";\nimport { isMessage } from \"../is-message.js\";\n/**\n * Wrap a primitive message field value in its corresponding wrapper\n * message. This function is idempotent.\n */\nexport function wrapField(type, value) {\n    if (isMessage(value) || !type.fieldWrapper) {\n        return value;\n    }\n    return type.fieldWrapper.wrapField(value);\n}\n/**\n * If the given field uses one of the well-known wrapper types, return\n * the primitive type it wraps.\n */\nexport function getUnwrappedFieldType(field) {\n    if (field.fieldKind !== \"message\") {\n        return undefined;\n    }\n    if (field.repeated) {\n        return undefined;\n    }\n    if (field.oneof != undefined) {\n        return undefined;\n    }\n    return wktWrapperToScalarType[field.message.typeName];\n}\nconst wktWrapperToScalarType = {\n    \"google.protobuf.DoubleValue\": ScalarType.DOUBLE,\n    \"google.protobuf.FloatValue\": ScalarType.FLOAT,\n    \"google.protobuf.Int64Value\": ScalarType.INT64,\n    \"google.protobuf.UInt64Value\": ScalarType.UINT64,\n    \"google.protobuf.Int32Value\": ScalarType.INT32,\n    \"google.protobuf.UInt32Value\": ScalarType.UINT32,\n    \"google.protobuf.BoolValue\": ScalarType.BOOL,\n    \"google.protobuf.StringValue\": ScalarType.STRING,\n    \"google.protobuf.BytesValue\": ScalarType.BYTES,\n};\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"../message.js\";\nimport { assert, assertFloat32, assertInt32, assertUInt32 } from \"./assert.js\";\nimport { protoInt64 } from \"../proto-int64.js\";\nimport { protoBase64 } from \"../proto-base64.js\";\nimport { createExtensionContainer } from \"./extensions.js\";\nimport { getExtension, hasExtension, setExtension, } from \"../extension-accessor.js\";\nimport { clearField, isFieldSet } from \"./reflect.js\";\nimport { wrapField } from \"./field-wrapper.js\";\nimport { scalarZeroValue } from \"./scalars.js\";\nimport { isScalarZeroValue } from \"./scalars.js\";\nimport { LongType, ScalarType } from \"../scalar.js\";\nimport { isMessage } from \"../is-message.js\";\n/* eslint-disable no-case-declarations,@typescript-eslint/no-unsafe-argument,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-call */\n// Default options for parsing JSON.\nconst jsonReadDefaults = {\n    ignoreUnknownFields: false,\n};\n// Default options for serializing to JSON.\nconst jsonWriteDefaults = {\n    emitDefaultValues: false,\n    enumAsInteger: false,\n    useProtoFieldName: false,\n    prettySpaces: 0,\n};\nfunction makeReadOptions(options) {\n    return options ? Object.assign(Object.assign({}, jsonReadDefaults), options) : jsonReadDefaults;\n}\nfunction makeWriteOptions(options) {\n    return options ? Object.assign(Object.assign({}, jsonWriteDefaults), options) : jsonWriteDefaults;\n}\nconst tokenNull = Symbol();\nconst tokenIgnoredUnknownEnum = Symbol();\nexport function makeJsonFormat() {\n    return {\n        makeReadOptions,\n        makeWriteOptions,\n        readMessage(type, json, options, message) {\n            if (json == null || Array.isArray(json) || typeof json != \"object\") {\n                throw new Error(`cannot decode message ${type.typeName} from JSON: ${debugJsonValue(json)}`);\n            }\n            message = message !== null && message !== void 0 ? message : new type();\n            const oneofSeen = new Map();\n            const registry = options.typeRegistry;\n            for (const [jsonKey, jsonValue] of Object.entries(json)) {\n                const field = type.fields.findJsonName(jsonKey);\n                if (field) {\n                    if (field.oneof) {\n                        if (jsonValue === null && field.kind == \"scalar\") {\n                            // see conformance test Required.Proto3.JsonInput.OneofFieldNull{First,Second}\n                            continue;\n                        }\n                        const seen = oneofSeen.get(field.oneof);\n                        if (seen !== undefined) {\n                            throw new Error(`cannot decode message ${type.typeName} from JSON: multiple keys for oneof \"${field.oneof.name}\" present: \"${seen}\", \"${jsonKey}\"`);\n                        }\n                        oneofSeen.set(field.oneof, jsonKey);\n                    }\n                    readField(message, jsonValue, field, options, type);\n                }\n                else {\n                    let found = false;\n                    if ((registry === null || registry === void 0 ? void 0 : registry.findExtension) &&\n                        jsonKey.startsWith(\"[\") &&\n                        jsonKey.endsWith(\"]\")) {\n                        const ext = registry.findExtension(jsonKey.substring(1, jsonKey.length - 1));\n                        if (ext && ext.extendee.typeName == type.typeName) {\n                            found = true;\n                            const [container, get] = createExtensionContainer(ext);\n                            readField(container, jsonValue, ext.field, options, ext);\n                            // We pass on the options as BinaryReadOptions/BinaryWriteOptions,\n                            // so that users can bring their own binary reader and writer factories\n                            // if necessary.\n                            setExtension(message, ext, get(), options);\n                        }\n                    }\n                    if (!found && !options.ignoreUnknownFields) {\n                        throw new Error(`cannot decode message ${type.typeName} from JSON: key \"${jsonKey}\" is unknown`);\n                    }\n                }\n            }\n            return message;\n        },\n        writeMessage(message, options) {\n            const type = message.getType();\n            const json = {};\n            let field;\n            try {\n                for (field of type.fields.byNumber()) {\n                    if (!isFieldSet(field, message)) {\n                        // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n                        if (field.req) {\n                            throw `required field not set`;\n                        }\n                        if (!options.emitDefaultValues) {\n                            continue;\n                        }\n                        if (!canEmitFieldDefaultValue(field)) {\n                            continue;\n                        }\n                    }\n                    const value = field.oneof\n                        ? message[field.oneof.localName].value\n                        : message[field.localName];\n                    const jsonValue = writeField(field, value, options);\n                    if (jsonValue !== undefined) {\n                        json[options.useProtoFieldName ? field.name : field.jsonName] =\n                            jsonValue;\n                    }\n                }\n                const registry = options.typeRegistry;\n                if (registry === null || registry === void 0 ? void 0 : registry.findExtensionFor) {\n                    for (const uf of type.runtime.bin.listUnknownFields(message)) {\n                        const ext = registry.findExtensionFor(type.typeName, uf.no);\n                        if (ext && hasExtension(message, ext)) {\n                            // We pass on the options as BinaryReadOptions, so that users can bring their own\n                            // binary reader factory if necessary.\n                            const value = getExtension(message, ext, options);\n                            const jsonValue = writeField(ext.field, value, options);\n                            if (jsonValue !== undefined) {\n                                json[ext.field.jsonName] = jsonValue;\n                            }\n                        }\n                    }\n                }\n            }\n            catch (e) {\n                const m = field\n                    ? `cannot encode field ${type.typeName}.${field.name} to JSON`\n                    : `cannot encode message ${type.typeName} to JSON`;\n                const r = e instanceof Error ? e.message : String(e);\n                throw new Error(m + (r.length > 0 ? `: ${r}` : \"\"));\n            }\n            return json;\n        },\n        readScalar(type, json, longType) {\n            // The signature of our internal function has changed. For backwards-\n            // compatibility, we support the old form that is part of the public API\n            // through the interface JsonFormat.\n            return readScalar(type, json, longType !== null && longType !== void 0 ? longType : LongType.BIGINT, true);\n        },\n        writeScalar(type, value, emitDefaultValues) {\n            // The signature of our internal function has changed. For backwards-\n            // compatibility, we support the old form that is part of the public API\n            // through the interface JsonFormat.\n            if (value === undefined) {\n                return undefined;\n            }\n            if (emitDefaultValues || isScalarZeroValue(type, value)) {\n                return writeScalar(type, value);\n            }\n            return undefined;\n        },\n        debug: debugJsonValue,\n    };\n}\nfunction debugJsonValue(json) {\n    if (json === null) {\n        return \"null\";\n    }\n    switch (typeof json) {\n        case \"object\":\n            return Array.isArray(json) ? \"array\" : \"object\";\n        case \"string\":\n            return json.length > 100 ? \"string\" : `\"${json.split('\"').join('\\\\\"')}\"`;\n        default:\n            return String(json);\n    }\n}\n// Read a JSON value for a field.\n// The \"parentType\" argument is only used to provide context in errors.\nfunction readField(target, jsonValue, field, options, parentType) {\n    let localName = field.localName;\n    if (field.repeated) {\n        assert(field.kind != \"map\");\n        if (jsonValue === null) {\n            return;\n        }\n        if (!Array.isArray(jsonValue)) {\n            throw new Error(`cannot decode field ${parentType.typeName}.${field.name} from JSON: ${debugJsonValue(jsonValue)}`);\n        }\n        const targetArray = target[localName];\n        for (const jsonItem of jsonValue) {\n            if (jsonItem === null) {\n                throw new Error(`cannot decode field ${parentType.typeName}.${field.name} from JSON: ${debugJsonValue(jsonItem)}`);\n            }\n            switch (field.kind) {\n                case \"message\":\n                    targetArray.push(field.T.fromJson(jsonItem, options));\n                    break;\n                case \"enum\":\n                    const enumValue = readEnum(field.T, jsonItem, options.ignoreUnknownFields, true);\n                    if (enumValue !== tokenIgnoredUnknownEnum) {\n                        targetArray.push(enumValue);\n                    }\n                    break;\n                case \"scalar\":\n                    try {\n                        targetArray.push(readScalar(field.T, jsonItem, field.L, true));\n                    }\n                    catch (e) {\n                        let m = `cannot decode field ${parentType.typeName}.${field.name} from JSON: ${debugJsonValue(jsonItem)}`;\n                        if (e instanceof Error && e.message.length > 0) {\n                            m += `: ${e.message}`;\n                        }\n                        throw new Error(m);\n                    }\n                    break;\n            }\n        }\n    }\n    else if (field.kind == \"map\") {\n        if (jsonValue === null) {\n            return;\n        }\n        if (typeof jsonValue != \"object\" || Array.isArray(jsonValue)) {\n            throw new Error(`cannot decode field ${parentType.typeName}.${field.name} from JSON: ${debugJsonValue(jsonValue)}`);\n        }\n        const targetMap = target[localName];\n        for (const [jsonMapKey, jsonMapValue] of Object.entries(jsonValue)) {\n            if (jsonMapValue === null) {\n                throw new Error(`cannot decode field ${parentType.typeName}.${field.name} from JSON: map value null`);\n            }\n            let key;\n            try {\n                key = readMapKey(field.K, jsonMapKey);\n            }\n            catch (e) {\n                let m = `cannot decode map key for field ${parentType.typeName}.${field.name} from JSON: ${debugJsonValue(jsonValue)}`;\n                if (e instanceof Error && e.message.length > 0) {\n                    m += `: ${e.message}`;\n                }\n                throw new Error(m);\n            }\n            switch (field.V.kind) {\n                case \"message\":\n                    targetMap[key] = field.V.T.fromJson(jsonMapValue, options);\n                    break;\n                case \"enum\":\n                    const enumValue = readEnum(field.V.T, jsonMapValue, options.ignoreUnknownFields, true);\n                    if (enumValue !== tokenIgnoredUnknownEnum) {\n                        targetMap[key] = enumValue;\n                    }\n                    break;\n                case \"scalar\":\n                    try {\n                        targetMap[key] = readScalar(field.V.T, jsonMapValue, LongType.BIGINT, true);\n                    }\n                    catch (e) {\n                        let m = `cannot decode map value for field ${parentType.typeName}.${field.name} from JSON: ${debugJsonValue(jsonValue)}`;\n                        if (e instanceof Error && e.message.length > 0) {\n                            m += `: ${e.message}`;\n                        }\n                        throw new Error(m);\n                    }\n                    break;\n            }\n        }\n    }\n    else {\n        if (field.oneof) {\n            target = target[field.oneof.localName] = { case: localName };\n            localName = \"value\";\n        }\n        switch (field.kind) {\n            case \"message\":\n                const messageType = field.T;\n                if (jsonValue === null &&\n                    messageType.typeName != \"google.protobuf.Value\") {\n                    return;\n                }\n                let currentValue = target[localName];\n                if (isMessage(currentValue)) {\n                    currentValue.fromJson(jsonValue, options);\n                }\n                else {\n                    target[localName] = currentValue = messageType.fromJson(jsonValue, options);\n                    if (messageType.fieldWrapper && !field.oneof) {\n                        target[localName] =\n                            messageType.fieldWrapper.unwrapField(currentValue);\n                    }\n                }\n                break;\n            case \"enum\":\n                const enumValue = readEnum(field.T, jsonValue, options.ignoreUnknownFields, false);\n                switch (enumValue) {\n                    case tokenNull:\n                        clearField(field, target);\n                        break;\n                    case tokenIgnoredUnknownEnum:\n                        break;\n                    default:\n                        target[localName] = enumValue;\n                        break;\n                }\n                break;\n            case \"scalar\":\n                try {\n                    const scalarValue = readScalar(field.T, jsonValue, field.L, false);\n                    switch (scalarValue) {\n                        case tokenNull:\n                            clearField(field, target);\n                            break;\n                        default:\n                            target[localName] = scalarValue;\n                            break;\n                    }\n                }\n                catch (e) {\n                    let m = `cannot decode field ${parentType.typeName}.${field.name} from JSON: ${debugJsonValue(jsonValue)}`;\n                    if (e instanceof Error && e.message.length > 0) {\n                        m += `: ${e.message}`;\n                    }\n                    throw new Error(m);\n                }\n                break;\n        }\n    }\n}\nfunction readMapKey(type, json) {\n    if (type === ScalarType.BOOL) {\n        // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\n        switch (json) {\n            case \"true\":\n                json = true;\n                break;\n            case \"false\":\n                json = false;\n                break;\n        }\n    }\n    return readScalar(type, json, LongType.BIGINT, true).toString();\n}\nfunction readScalar(type, json, longType, nullAsZeroValue) {\n    if (json === null) {\n        if (nullAsZeroValue) {\n            return scalarZeroValue(type, longType);\n        }\n        return tokenNull;\n    }\n    // every valid case in the switch below returns, and every fall\n    // through is regarded as a failure.\n    switch (type) {\n        // float, double: JSON value will be a number or one of the special string values \"NaN\", \"Infinity\", and \"-Infinity\".\n        // Either numbers or strings are accepted. Exponent notation is also accepted.\n        case ScalarType.DOUBLE:\n        case ScalarType.FLOAT:\n            if (json === \"NaN\")\n                return Number.NaN;\n            if (json === \"Infinity\")\n                return Number.POSITIVE_INFINITY;\n            if (json === \"-Infinity\")\n                return Number.NEGATIVE_INFINITY;\n            if (json === \"\") {\n                // empty string is not a number\n                break;\n            }\n            if (typeof json == \"string\" && json.trim().length !== json.length) {\n                // extra whitespace\n                break;\n            }\n            if (typeof json != \"string\" && typeof json != \"number\") {\n                break;\n            }\n            const float = Number(json);\n            if (Number.isNaN(float)) {\n                // not a number\n                break;\n            }\n            if (!Number.isFinite(float)) {\n                // infinity and -infinity are handled by string representation above, so this is an error\n                break;\n            }\n            if (type == ScalarType.FLOAT)\n                assertFloat32(float);\n            return float;\n        // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.\n        case ScalarType.INT32:\n        case ScalarType.FIXED32:\n        case ScalarType.SFIXED32:\n        case ScalarType.SINT32:\n        case ScalarType.UINT32:\n            let int32;\n            if (typeof json == \"number\")\n                int32 = json;\n            else if (typeof json == \"string\" && json.length > 0) {\n                if (json.trim().length === json.length)\n                    int32 = Number(json);\n            }\n            if (int32 === undefined)\n                break;\n            if (type == ScalarType.UINT32 || type == ScalarType.FIXED32)\n                assertUInt32(int32);\n            else\n                assertInt32(int32);\n            return int32;\n        // int64, fixed64, uint64: JSON value will be a decimal string. Either numbers or strings are accepted.\n        case ScalarType.INT64:\n        case ScalarType.SFIXED64:\n        case ScalarType.SINT64:\n            if (typeof json != \"number\" && typeof json != \"string\")\n                break;\n            const long = protoInt64.parse(json);\n            // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n            return longType ? long.toString() : long;\n        case ScalarType.FIXED64:\n        case ScalarType.UINT64:\n            if (typeof json != \"number\" && typeof json != \"string\")\n                break;\n            const uLong = protoInt64.uParse(json);\n            // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n            return longType ? uLong.toString() : uLong;\n        // bool:\n        case ScalarType.BOOL:\n            if (typeof json !== \"boolean\")\n                break;\n            return json;\n        // string:\n        case ScalarType.STRING:\n            if (typeof json !== \"string\") {\n                break;\n            }\n            // A string must always contain UTF-8 encoded or 7-bit ASCII.\n            // We validate with encodeURIComponent, which appears to be the fastest widely available option.\n            try {\n                encodeURIComponent(json);\n            }\n            catch (e) {\n                throw new Error(\"invalid UTF8\");\n            }\n            return json;\n        // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.\n        // Either standard or URL-safe base64 encoding with/without paddings are accepted.\n        case ScalarType.BYTES:\n            if (json === \"\")\n                return new Uint8Array(0);\n            if (typeof json !== \"string\")\n                break;\n            return protoBase64.dec(json);\n    }\n    throw new Error();\n}\nfunction readEnum(type, json, ignoreUnknownFields, nullAsZeroValue) {\n    if (json === null) {\n        if (type.typeName == \"google.protobuf.NullValue\") {\n            return 0; // google.protobuf.NullValue.NULL_VALUE = 0\n        }\n        return nullAsZeroValue ? type.values[0].no : tokenNull;\n    }\n    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\n    switch (typeof json) {\n        case \"number\":\n            if (Number.isInteger(json)) {\n                return json;\n            }\n            break;\n        case \"string\":\n            const value = type.findName(json);\n            if (value !== undefined) {\n                return value.no;\n            }\n            if (ignoreUnknownFields) {\n                return tokenIgnoredUnknownEnum;\n            }\n            break;\n    }\n    throw new Error(`cannot decode enum ${type.typeName} from JSON: ${debugJsonValue(json)}`);\n}\n// Decide whether an unset field should be emitted with JSON write option `emitDefaultValues`\nfunction canEmitFieldDefaultValue(field) {\n    if (field.repeated || field.kind == \"map\") {\n        // maps are {}, repeated fields are []\n        return true;\n    }\n    if (field.oneof) {\n        // oneof fields are never emitted\n        return false;\n    }\n    if (field.kind == \"message\") {\n        // singular message field are allowed to emit JSON null, but we do not\n        return false;\n    }\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n    if (field.opt || field.req) {\n        // the field uses explicit presence, so we cannot emit a zero value\n        return false;\n    }\n    return true;\n}\nfunction writeField(field, value, options) {\n    if (field.kind == \"map\") {\n        assert(typeof value == \"object\" && value != null);\n        const jsonObj = {};\n        const entries = Object.entries(value);\n        switch (field.V.kind) {\n            case \"scalar\":\n                for (const [entryKey, entryValue] of entries) {\n                    jsonObj[entryKey.toString()] = writeScalar(field.V.T, entryValue); // JSON standard allows only (double quoted) string as property key\n                }\n                break;\n            case \"message\":\n                for (const [entryKey, entryValue] of entries) {\n                    // JSON standard allows only (double quoted) string as property key\n                    jsonObj[entryKey.toString()] = entryValue.toJson(options);\n                }\n                break;\n            case \"enum\":\n                const enumType = field.V.T;\n                for (const [entryKey, entryValue] of entries) {\n                    // JSON standard allows only (double quoted) string as property key\n                    jsonObj[entryKey.toString()] = writeEnum(enumType, entryValue, options.enumAsInteger);\n                }\n                break;\n        }\n        return options.emitDefaultValues || entries.length > 0\n            ? jsonObj\n            : undefined;\n    }\n    if (field.repeated) {\n        assert(Array.isArray(value));\n        const jsonArr = [];\n        switch (field.kind) {\n            case \"scalar\":\n                for (let i = 0; i < value.length; i++) {\n                    jsonArr.push(writeScalar(field.T, value[i]));\n                }\n                break;\n            case \"enum\":\n                for (let i = 0; i < value.length; i++) {\n                    jsonArr.push(writeEnum(field.T, value[i], options.enumAsInteger));\n                }\n                break;\n            case \"message\":\n                for (let i = 0; i < value.length; i++) {\n                    jsonArr.push(value[i].toJson(options));\n                }\n                break;\n        }\n        return options.emitDefaultValues || jsonArr.length > 0\n            ? jsonArr\n            : undefined;\n    }\n    switch (field.kind) {\n        case \"scalar\":\n            return writeScalar(field.T, value);\n        case \"enum\":\n            return writeEnum(field.T, value, options.enumAsInteger);\n        case \"message\":\n            return wrapField(field.T, value).toJson(options);\n    }\n}\nfunction writeEnum(type, value, enumAsInteger) {\n    var _a;\n    assert(typeof value == \"number\");\n    if (type.typeName == \"google.protobuf.NullValue\") {\n        return null;\n    }\n    if (enumAsInteger) {\n        return value;\n    }\n    const val = type.findNumber(value);\n    return (_a = val === null || val === void 0 ? void 0 : val.name) !== null && _a !== void 0 ? _a : value; // if we don't know the enum value, just return the number\n}\nfunction writeScalar(type, value) {\n    switch (type) {\n        // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.\n        case ScalarType.INT32:\n        case ScalarType.SFIXED32:\n        case ScalarType.SINT32:\n        case ScalarType.FIXED32:\n        case ScalarType.UINT32:\n            assert(typeof value == \"number\");\n            return value;\n        // float, double: JSON value will be a number or one of the special string values \"NaN\", \"Infinity\", and \"-Infinity\".\n        // Either numbers or strings are accepted. Exponent notation is also accepted.\n        case ScalarType.FLOAT:\n        // assertFloat32(value);\n        case ScalarType.DOUBLE: // eslint-disable-line no-fallthrough\n            assert(typeof value == \"number\");\n            if (Number.isNaN(value))\n                return \"NaN\";\n            if (value === Number.POSITIVE_INFINITY)\n                return \"Infinity\";\n            if (value === Number.NEGATIVE_INFINITY)\n                return \"-Infinity\";\n            return value;\n        // string:\n        case ScalarType.STRING:\n            assert(typeof value == \"string\");\n            return value;\n        // bool:\n        case ScalarType.BOOL:\n            assert(typeof value == \"boolean\");\n            return value;\n        // JSON value will be a decimal string. Either numbers or strings are accepted.\n        case ScalarType.UINT64:\n        case ScalarType.FIXED64:\n        case ScalarType.INT64:\n        case ScalarType.SFIXED64:\n        case ScalarType.SINT64:\n            assert(typeof value == \"bigint\" ||\n                typeof value == \"string\" ||\n                typeof value == \"number\");\n            return value.toString();\n        // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.\n        // Either standard or URL-safe base64 encoding with/without paddings are accepted.\n        case ScalarType.BYTES:\n            assert(value instanceof Uint8Array);\n            return protoBase64.enc(value);\n    }\n}\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { BinaryReader, BinaryWriter, WireType } from \"../binary-encoding.js\";\nimport { Message } from \"../message.js\";\nimport { wrapField } from \"./field-wrapper.js\";\nimport { scalarZeroValue } from \"./scalars.js\";\nimport { assert } from \"./assert.js\";\nimport { isFieldSet } from \"./reflect.js\";\nimport { LongType, ScalarType } from \"../scalar.js\";\nimport { isMessage } from \"../is-message.js\";\n/* eslint-disable prefer-const,no-case-declarations,@typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-argument,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-return */\nconst unknownFieldsSymbol = Symbol(\"@bufbuild/protobuf/unknown-fields\");\n// Default options for parsing binary data.\nconst readDefaults = {\n    readUnknownFields: true,\n    readerFactory: (bytes) => new BinaryReader(bytes),\n};\n// Default options for serializing binary data.\nconst writeDefaults = {\n    writeUnknownFields: true,\n    writerFactory: () => new BinaryWriter(),\n};\nfunction makeReadOptions(options) {\n    return options ? Object.assign(Object.assign({}, readDefaults), options) : readDefaults;\n}\nfunction makeWriteOptions(options) {\n    return options ? Object.assign(Object.assign({}, writeDefaults), options) : writeDefaults;\n}\nexport function makeBinaryFormat() {\n    return {\n        makeReadOptions,\n        makeWriteOptions,\n        listUnknownFields(message) {\n            var _a;\n            return (_a = message[unknownFieldsSymbol]) !== null && _a !== void 0 ? _a : [];\n        },\n        discardUnknownFields(message) {\n            delete message[unknownFieldsSymbol];\n        },\n        writeUnknownFields(message, writer) {\n            const m = message;\n            const c = m[unknownFieldsSymbol];\n            if (c) {\n                for (const f of c) {\n                    writer.tag(f.no, f.wireType).raw(f.data);\n                }\n            }\n        },\n        onUnknownField(message, no, wireType, data) {\n            const m = message;\n            if (!Array.isArray(m[unknownFieldsSymbol])) {\n                m[unknownFieldsSymbol] = [];\n            }\n            m[unknownFieldsSymbol].push({ no, wireType, data });\n        },\n        readMessage(message, reader, lengthOrEndTagFieldNo, options, delimitedMessageEncoding) {\n            const type = message.getType();\n            // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n            const end = delimitedMessageEncoding\n                ? reader.len\n                : reader.pos + lengthOrEndTagFieldNo;\n            let fieldNo, wireType;\n            while (reader.pos < end) {\n                [fieldNo, wireType] = reader.tag();\n                if (delimitedMessageEncoding === true &&\n                    wireType == WireType.EndGroup) {\n                    break;\n                }\n                const field = type.fields.find(fieldNo);\n                if (!field) {\n                    const data = reader.skip(wireType, fieldNo);\n                    if (options.readUnknownFields) {\n                        this.onUnknownField(message, fieldNo, wireType, data);\n                    }\n                    continue;\n                }\n                readField(message, reader, field, wireType, options);\n            }\n            if (delimitedMessageEncoding && // eslint-disable-line @typescript-eslint/strict-boolean-expressions\n                (wireType != WireType.EndGroup || fieldNo !== lengthOrEndTagFieldNo)) {\n                throw new Error(`invalid end group tag`);\n            }\n        },\n        readField,\n        writeMessage(message, writer, options) {\n            const type = message.getType();\n            for (const field of type.fields.byNumber()) {\n                if (!isFieldSet(field, message)) {\n                    if (field.req) {\n                        throw new Error(`cannot encode field ${type.typeName}.${field.name} to binary: required field not set`);\n                    }\n                    continue;\n                }\n                const value = field.oneof\n                    ? message[field.oneof.localName].value\n                    : message[field.localName];\n                writeField(field, value, writer, options);\n            }\n            if (options.writeUnknownFields) {\n                this.writeUnknownFields(message, writer);\n            }\n            return writer;\n        },\n        writeField(field, value, writer, options) {\n            // The behavior of our internal function has changed, it does no longer\n            // accept `undefined` values for singular scalar and map.\n            // For backwards-compatibility, we support the old form that is part of\n            // the public API through the interface BinaryFormat.\n            if (value === undefined) {\n                return undefined;\n            }\n            writeField(field, value, writer, options);\n        },\n    };\n}\nfunction readField(target, // eslint-disable-line @typescript-eslint/no-explicit-any -- `any` is the best choice for dynamic access\nreader, field, wireType, options) {\n    let { repeated, localName } = field;\n    if (field.oneof) {\n        target = target[field.oneof.localName];\n        if (target.case != localName) {\n            delete target.value;\n        }\n        target.case = localName;\n        localName = \"value\";\n    }\n    switch (field.kind) {\n        case \"scalar\":\n        case \"enum\":\n            const scalarType = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\n            let read = readScalar;\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison -- acceptable since it's covered by tests\n            if (field.kind == \"scalar\" && field.L > 0) {\n                read = readScalarLTString;\n            }\n            if (repeated) {\n                let arr = target[localName]; // safe to assume presence of array, oneof cannot contain repeated values\n                const isPacked = wireType == WireType.LengthDelimited &&\n                    scalarType != ScalarType.STRING &&\n                    scalarType != ScalarType.BYTES;\n                if (isPacked) {\n                    let e = reader.uint32() + reader.pos;\n                    while (reader.pos < e) {\n                        arr.push(read(reader, scalarType));\n                    }\n                }\n                else {\n                    arr.push(read(reader, scalarType));\n                }\n            }\n            else {\n                target[localName] = read(reader, scalarType);\n            }\n            break;\n        case \"message\":\n            const messageType = field.T;\n            if (repeated) {\n                // safe to assume presence of array, oneof cannot contain repeated values\n                target[localName].push(readMessageField(reader, new messageType(), options, field));\n            }\n            else {\n                if (isMessage(target[localName])) {\n                    readMessageField(reader, target[localName], options, field);\n                }\n                else {\n                    target[localName] = readMessageField(reader, new messageType(), options, field);\n                    if (messageType.fieldWrapper && !field.oneof && !field.repeated) {\n                        target[localName] = messageType.fieldWrapper.unwrapField(target[localName]);\n                    }\n                }\n            }\n            break;\n        case \"map\":\n            let [mapKey, mapVal] = readMapEntry(field, reader, options);\n            // safe to assume presence of map object, oneof cannot contain repeated values\n            target[localName][mapKey] = mapVal;\n            break;\n    }\n}\n// Read a message, avoiding MessageType.fromBinary() to re-use the\n// BinaryReadOptions and the IBinaryReader.\nfunction readMessageField(reader, message, options, field) {\n    const format = message.getType().runtime.bin;\n    const delimited = field === null || field === void 0 ? void 0 : field.delimited;\n    format.readMessage(message, reader, delimited ? field.no : reader.uint32(), // eslint-disable-line @typescript-eslint/strict-boolean-expressions\n    options, delimited);\n    return message;\n}\n// Read a map field, expecting key field = 1, value field = 2\nfunction readMapEntry(field, reader, options) {\n    const length = reader.uint32(), end = reader.pos + length;\n    let key, val;\n    while (reader.pos < end) {\n        const [fieldNo] = reader.tag();\n        switch (fieldNo) {\n            case 1:\n                key = readScalar(reader, field.K);\n                break;\n            case 2:\n                switch (field.V.kind) {\n                    case \"scalar\":\n                        val = readScalar(reader, field.V.T);\n                        break;\n                    case \"enum\":\n                        val = reader.int32();\n                        break;\n                    case \"message\":\n                        val = readMessageField(reader, new field.V.T(), options, undefined);\n                        break;\n                }\n                break;\n        }\n    }\n    if (key === undefined) {\n        key = scalarZeroValue(field.K, LongType.BIGINT);\n    }\n    if (typeof key != \"string\" && typeof key != \"number\") {\n        key = key.toString();\n    }\n    if (val === undefined) {\n        switch (field.V.kind) {\n            case \"scalar\":\n                val = scalarZeroValue(field.V.T, LongType.BIGINT);\n                break;\n            case \"enum\":\n                val = field.V.T.values[0].no;\n                break;\n            case \"message\":\n                val = new field.V.T();\n                break;\n        }\n    }\n    return [key, val];\n}\n// Read a scalar value, but return 64 bit integral types (int64, uint64,\n// sint64, fixed64, sfixed64) as string instead of bigint.\nfunction readScalarLTString(reader, type) {\n    const v = readScalar(reader, type);\n    return typeof v == \"bigint\" ? v.toString() : v;\n}\n// Does not use scalarTypeInfo() for better performance.\nfunction readScalar(reader, type) {\n    switch (type) {\n        case ScalarType.STRING:\n            return reader.string();\n        case ScalarType.BOOL:\n            return reader.bool();\n        case ScalarType.DOUBLE:\n            return reader.double();\n        case ScalarType.FLOAT:\n            return reader.float();\n        case ScalarType.INT32:\n            return reader.int32();\n        case ScalarType.INT64:\n            return reader.int64();\n        case ScalarType.UINT64:\n            return reader.uint64();\n        case ScalarType.FIXED64:\n            return reader.fixed64();\n        case ScalarType.BYTES:\n            return reader.bytes();\n        case ScalarType.FIXED32:\n            return reader.fixed32();\n        case ScalarType.SFIXED32:\n            return reader.sfixed32();\n        case ScalarType.SFIXED64:\n            return reader.sfixed64();\n        case ScalarType.SINT64:\n            return reader.sint64();\n        case ScalarType.UINT32:\n            return reader.uint32();\n        case ScalarType.SINT32:\n            return reader.sint32();\n    }\n}\nfunction writeField(field, value, writer, options) {\n    assert(value !== undefined);\n    const repeated = field.repeated;\n    switch (field.kind) {\n        case \"scalar\":\n        case \"enum\":\n            let scalarType = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\n            if (repeated) {\n                assert(Array.isArray(value));\n                if (field.packed) {\n                    writePacked(writer, scalarType, field.no, value);\n                }\n                else {\n                    for (const item of value) {\n                        writeScalar(writer, scalarType, field.no, item);\n                    }\n                }\n            }\n            else {\n                writeScalar(writer, scalarType, field.no, value);\n            }\n            break;\n        case \"message\":\n            if (repeated) {\n                assert(Array.isArray(value));\n                for (const item of value) {\n                    writeMessageField(writer, options, field, item);\n                }\n            }\n            else {\n                writeMessageField(writer, options, field, value);\n            }\n            break;\n        case \"map\":\n            assert(typeof value == \"object\" && value != null);\n            for (const [key, val] of Object.entries(value)) {\n                writeMapEntry(writer, options, field, key, val);\n            }\n            break;\n    }\n}\nexport function writeMapEntry(writer, options, field, key, value) {\n    writer.tag(field.no, WireType.LengthDelimited);\n    writer.fork();\n    // javascript only allows number or string for object properties\n    // we convert from our representation to the protobuf type\n    let keyValue = key;\n    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- we deliberately handle just the special cases for map keys\n    switch (field.K) {\n        case ScalarType.INT32:\n        case ScalarType.FIXED32:\n        case ScalarType.UINT32:\n        case ScalarType.SFIXED32:\n        case ScalarType.SINT32:\n            keyValue = Number.parseInt(key);\n            break;\n        case ScalarType.BOOL:\n            assert(key == \"true\" || key == \"false\");\n            keyValue = key == \"true\";\n            break;\n    }\n    // write key, expecting key field number = 1\n    writeScalar(writer, field.K, 1, keyValue);\n    // write value, expecting value field number = 2\n    switch (field.V.kind) {\n        case \"scalar\":\n            writeScalar(writer, field.V.T, 2, value);\n            break;\n        case \"enum\":\n            writeScalar(writer, ScalarType.INT32, 2, value);\n            break;\n        case \"message\":\n            assert(value !== undefined);\n            writer.tag(2, WireType.LengthDelimited).bytes(value.toBinary(options));\n            break;\n    }\n    writer.join();\n}\n// Value must not be undefined\nfunction writeMessageField(writer, options, field, value) {\n    const message = wrapField(field.T, value);\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n    if (field.delimited)\n        writer\n            .tag(field.no, WireType.StartGroup)\n            .raw(message.toBinary(options))\n            .tag(field.no, WireType.EndGroup);\n    else\n        writer\n            .tag(field.no, WireType.LengthDelimited)\n            .bytes(message.toBinary(options));\n}\nfunction writeScalar(writer, type, fieldNo, value) {\n    assert(value !== undefined);\n    let [wireType, method] = scalarTypeInfo(type);\n    writer.tag(fieldNo, wireType)[method](value);\n}\nfunction writePacked(writer, type, fieldNo, value) {\n    if (!value.length) {\n        return;\n    }\n    writer.tag(fieldNo, WireType.LengthDelimited).fork();\n    let [, method] = scalarTypeInfo(type);\n    for (let i = 0; i < value.length; i++) {\n        writer[method](value[i]);\n    }\n    writer.join();\n}\n/**\n * Get information for writing a scalar value.\n *\n * Returns tuple:\n * [0]: appropriate WireType\n * [1]: name of the appropriate method of IBinaryWriter\n * [2]: whether the given value is a default value for proto3 semantics\n *\n * If argument `value` is omitted, [2] is always false.\n */\n// TODO replace call-sites writeScalar() and writePacked(), then remove\nfunction scalarTypeInfo(type) {\n    let wireType = WireType.Varint;\n    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- INT32, UINT32, SINT32 are covered by the defaults\n    switch (type) {\n        case ScalarType.BYTES:\n        case ScalarType.STRING:\n            wireType = WireType.LengthDelimited;\n            break;\n        case ScalarType.DOUBLE:\n        case ScalarType.FIXED64:\n        case ScalarType.SFIXED64:\n            wireType = WireType.Bit64;\n            break;\n        case ScalarType.FIXED32:\n        case ScalarType.SFIXED32:\n        case ScalarType.FLOAT:\n            wireType = WireType.Bit32;\n            break;\n    }\n    const method = ScalarType[type].toLowerCase();\n    return [wireType, method];\n}\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { setEnumType } from \"./enum.js\";\nimport { Message } from \"../message.js\";\nimport { scalarEquals } from \"./scalars.js\";\nimport { ScalarType } from \"../scalar.js\";\nimport { isMessage } from \"../is-message.js\";\n/* eslint-disable @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-argument,no-case-declarations */\nexport function makeUtilCommon() {\n    return {\n        setEnumType,\n        initPartial(source, target) {\n            if (source === undefined) {\n                return;\n            }\n            const type = target.getType();\n            for (const member of type.fields.byMember()) {\n                const localName = member.localName, t = target, s = source;\n                if (s[localName] == null) {\n                    // TODO if source is a Message instance, we should use isFieldSet() here to support future field presence\n                    continue;\n                }\n                switch (member.kind) {\n                    case \"oneof\":\n                        const sk = s[localName].case;\n                        if (sk === undefined) {\n                            continue;\n                        }\n                        const sourceField = member.findField(sk);\n                        let val = s[localName].value;\n                        if (sourceField &&\n                            sourceField.kind == \"message\" &&\n                            !isMessage(val, sourceField.T)) {\n                            val = new sourceField.T(val);\n                        }\n                        else if (sourceField &&\n                            sourceField.kind === \"scalar\" &&\n                            sourceField.T === ScalarType.BYTES) {\n                            val = toU8Arr(val);\n                        }\n                        t[localName] = { case: sk, value: val };\n                        break;\n                    case \"scalar\":\n                    case \"enum\":\n                        let copy = s[localName];\n                        if (member.T === ScalarType.BYTES) {\n                            copy = member.repeated\n                                ? copy.map(toU8Arr)\n                                : toU8Arr(copy);\n                        }\n                        t[localName] = copy;\n                        break;\n                    case \"map\":\n                        switch (member.V.kind) {\n                            case \"scalar\":\n                            case \"enum\":\n                                if (member.V.T === ScalarType.BYTES) {\n                                    for (const [k, v] of Object.entries(s[localName])) {\n                                        t[localName][k] = toU8Arr(v);\n                                    }\n                                }\n                                else {\n                                    Object.assign(t[localName], s[localName]);\n                                }\n                                break;\n                            case \"message\":\n                                const messageType = member.V.T;\n                                for (const k of Object.keys(s[localName])) {\n                                    let val = s[localName][k];\n                                    if (!messageType.fieldWrapper) {\n                                        // We only take partial input for messages that are not a wrapper type.\n                                        // For those messages, we recursively normalize the partial input.\n                                        val = new messageType(val);\n                                    }\n                                    t[localName][k] = val;\n                                }\n                                break;\n                        }\n                        break;\n                    case \"message\":\n                        const mt = member.T;\n                        if (member.repeated) {\n                            t[localName] = s[localName].map((val) => isMessage(val, mt) ? val : new mt(val));\n                        }\n                        else {\n                            const val = s[localName];\n                            if (mt.fieldWrapper) {\n                                if (\n                                // We can't use BytesValue.typeName as that will create a circular import\n                                mt.typeName === \"google.protobuf.BytesValue\") {\n                                    t[localName] = toU8Arr(val);\n                                }\n                                else {\n                                    t[localName] = val;\n                                }\n                            }\n                            else {\n                                t[localName] = isMessage(val, mt) ? val : new mt(val);\n                            }\n                        }\n                        break;\n                }\n            }\n        },\n        // TODO use isFieldSet() here to support future field presence\n        equals(type, a, b) {\n            if (a === b) {\n                return true;\n            }\n            if (!a || !b) {\n                return false;\n            }\n            return type.fields.byMember().every((m) => {\n                const va = a[m.localName];\n                const vb = b[m.localName];\n                if (m.repeated) {\n                    if (va.length !== vb.length) {\n                        return false;\n                    }\n                    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- repeated fields are never \"map\"\n                    switch (m.kind) {\n                        case \"message\":\n                            return va.every((a, i) => m.T.equals(a, vb[i]));\n                        case \"scalar\":\n                            return va.every((a, i) => scalarEquals(m.T, a, vb[i]));\n                        case \"enum\":\n                            return va.every((a, i) => scalarEquals(ScalarType.INT32, a, vb[i]));\n                    }\n                    throw new Error(`repeated cannot contain ${m.kind}`);\n                }\n                switch (m.kind) {\n                    case \"message\":\n                        return m.T.equals(va, vb);\n                    case \"enum\":\n                        return scalarEquals(ScalarType.INT32, va, vb);\n                    case \"scalar\":\n                        return scalarEquals(m.T, va, vb);\n                    case \"oneof\":\n                        if (va.case !== vb.case) {\n                            return false;\n                        }\n                        const s = m.findField(va.case);\n                        if (s === undefined) {\n                            return true;\n                        }\n                        // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- oneof fields are never \"map\"\n                        switch (s.kind) {\n                            case \"message\":\n                                return s.T.equals(va.value, vb.value);\n                            case \"enum\":\n                                return scalarEquals(ScalarType.INT32, va.value, vb.value);\n                            case \"scalar\":\n                                return scalarEquals(s.T, va.value, vb.value);\n                        }\n                        throw new Error(`oneof cannot contain ${s.kind}`);\n                    case \"map\":\n                        const keys = Object.keys(va).concat(Object.keys(vb));\n                        switch (m.V.kind) {\n                            case \"message\":\n                                const messageType = m.V.T;\n                                return keys.every((k) => messageType.equals(va[k], vb[k]));\n                            case \"enum\":\n                                return keys.every((k) => scalarEquals(ScalarType.INT32, va[k], vb[k]));\n                            case \"scalar\":\n                                const scalarType = m.V.T;\n                                return keys.every((k) => scalarEquals(scalarType, va[k], vb[k]));\n                        }\n                        break;\n                }\n            });\n        },\n        // TODO use isFieldSet() here to support future field presence\n        clone(message) {\n            const type = message.getType(), target = new type(), any = target;\n            for (const member of type.fields.byMember()) {\n                const source = message[member.localName];\n                let copy;\n                if (member.repeated) {\n                    copy = source.map(cloneSingularField);\n                }\n                else if (member.kind == \"map\") {\n                    copy = any[member.localName];\n                    for (const [key, v] of Object.entries(source)) {\n                        copy[key] = cloneSingularField(v);\n                    }\n                }\n                else if (member.kind == \"oneof\") {\n                    const f = member.findField(source.case);\n                    copy = f\n                        ? { case: source.case, value: cloneSingularField(source.value) }\n                        : { case: undefined };\n                }\n                else {\n                    copy = cloneSingularField(source);\n                }\n                any[member.localName] = copy;\n            }\n            for (const uf of type.runtime.bin.listUnknownFields(message)) {\n                type.runtime.bin.onUnknownField(any, uf.no, uf.wireType, uf.data);\n            }\n            return target;\n        },\n    };\n}\n// clone a single field value - i.e. the element type of repeated fields, the value type of maps\nfunction cloneSingularField(value) {\n    if (value === undefined) {\n        return value;\n    }\n    if (isMessage(value)) {\n        return value.clone();\n    }\n    if (value instanceof Uint8Array) {\n        const c = new Uint8Array(value.byteLength);\n        c.set(value);\n        return c;\n    }\n    return value;\n}\n// converts any ArrayLike<number> to Uint8Array if necessary.\nfunction toU8Arr(input) {\n    return input instanceof Uint8Array ? input : new Uint8Array(input);\n}\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { getEnumType, makeEnum, makeEnumType } from \"./enum.js\";\nimport { makeMessageType } from \"./message-type.js\";\nimport { makeExtension } from \"./extensions.js\";\nimport { makeJsonFormat } from \"./json-format.js\";\nimport { makeBinaryFormat } from \"./binary-format.js\";\nimport { makeUtilCommon } from \"./util-common.js\";\nexport function makeProtoRuntime(syntax, newFieldList, initFields) {\n    return {\n        syntax,\n        json: makeJsonFormat(),\n        bin: makeBinaryFormat(),\n        util: Object.assign(Object.assign({}, makeUtilCommon()), { newFieldList,\n            initFields }),\n        makeMessageType(typeName, fields, opt) {\n            return makeMessageType(this, typeName, fields, opt);\n        },\n        makeEnum,\n        makeEnumType,\n        getEnumType,\n        makeExtension(typeName, extendee, field) {\n            return makeExtension(this, typeName, extendee, field);\n        },\n    };\n}\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nexport class InternalFieldList {\n    constructor(fields, normalizer) {\n        this._fields = fields;\n        this._normalizer = normalizer;\n    }\n    findJsonName(jsonName) {\n        if (!this.jsonNames) {\n            const t = {};\n            for (const f of this.list()) {\n                t[f.jsonName] = t[f.name] = f;\n            }\n            this.jsonNames = t;\n        }\n        return this.jsonNames[jsonName];\n    }\n    find(fieldNo) {\n        if (!this.numbers) {\n            const t = {};\n            for (const f of this.list()) {\n                t[f.no] = f;\n            }\n            this.numbers = t;\n        }\n        return this.numbers[fieldNo];\n    }\n    list() {\n        if (!this.all) {\n            this.all = this._normalizer(this._fields);\n        }\n        return this.all;\n    }\n    byNumber() {\n        if (!this.numbersAsc) {\n            this.numbersAsc = this.list()\n                .concat()\n                .sort((a, b) => a.no - b.no);\n        }\n        return this.numbersAsc;\n    }\n    byMember() {\n        if (!this.members) {\n            this.members = [];\n            const a = this.members;\n            let o;\n            for (const f of this.list()) {\n                if (f.oneof) {\n                    if (f.oneof !== o) {\n                        o = f.oneof;\n                        a.push(o);\n                    }\n                }\n                else {\n                    a.push(f);\n                }\n            }\n        }\n        return this.members;\n    }\n}\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Returns the name of a protobuf element in generated code.\n *\n * Field names - including oneofs - are converted to lowerCamelCase. For\n * messages, enumerations and services, the package name is stripped from\n * the type name. For nested messages and enumerations, the names are joined\n * with an underscore. For methods, the first character is made lowercase.\n */\nexport function localName(desc) {\n    switch (desc.kind) {\n        case \"field\":\n            return localFieldName(desc.name, desc.oneof !== undefined);\n        case \"oneof\":\n            return localOneofName(desc.name);\n        case \"enum\":\n        case \"message\":\n        case \"service\":\n        case \"extension\": {\n            const pkg = desc.file.proto.package;\n            const offset = pkg === undefined ? 0 : pkg.length + 1;\n            const name = desc.typeName.substring(offset).replace(/\\./g, \"_\");\n            // For services, we only care about safe identifiers, not safe object properties,\n            // but we have shipped v1 with a bug that respected object properties, and we\n            // do not want to introduce a breaking change, so we continue to escape for\n            // safe object properties.\n            // See https://github.com/bufbuild/protobuf-es/pull/391\n            return safeObjectProperty(safeIdentifier(name));\n        }\n        case \"enum_value\": {\n            let name = desc.name;\n            const sharedPrefix = desc.parent.sharedPrefix;\n            if (sharedPrefix !== undefined) {\n                name = name.substring(sharedPrefix.length);\n            }\n            return safeObjectProperty(name);\n        }\n        case \"rpc\": {\n            let name = desc.name;\n            if (name.length == 0) {\n                return name;\n            }\n            name = name[0].toLowerCase() + name.substring(1);\n            return safeObjectProperty(name);\n        }\n    }\n}\n/**\n * Returns the name of a field in generated code.\n */\nexport function localFieldName(protoName, inOneof) {\n    const name = protoCamelCase(protoName);\n    if (inOneof) {\n        // oneof member names are not properties, but values of the `case` property.\n        return name;\n    }\n    return safeObjectProperty(safeMessageProperty(name));\n}\n/**\n * Returns the name of a oneof group in generated code.\n */\nexport function localOneofName(protoName) {\n    return localFieldName(protoName, false);\n}\n/**\n * Returns the JSON name for a protobuf field, exactly like protoc does.\n */\nexport const fieldJsonName = protoCamelCase;\n/**\n * Finds a prefix shared by enum values, for example `MY_ENUM_` for\n * `enum MyEnum {MY_ENUM_A=0; MY_ENUM_B=1;}`.\n */\nexport function findEnumSharedPrefix(enumName, valueNames) {\n    const prefix = camelToSnakeCase(enumName) + \"_\";\n    for (const name of valueNames) {\n        if (!name.toLowerCase().startsWith(prefix)) {\n            return undefined;\n        }\n        const shortName = name.substring(prefix.length);\n        if (shortName.length == 0) {\n            return undefined;\n        }\n        if (/^\\d/.test(shortName)) {\n            // identifiers must not start with numbers\n            return undefined;\n        }\n    }\n    return prefix;\n}\n/**\n * Converts lowerCamelCase or UpperCamelCase into lower_snake_case.\n * This is used to find shared prefixes in an enum.\n */\nfunction camelToSnakeCase(camel) {\n    return (camel.substring(0, 1) + camel.substring(1).replace(/[A-Z]/g, (c) => \"_\" + c)).toLowerCase();\n}\n/**\n * Converts snake_case to protoCamelCase according to the convention\n * used by protoc to convert a field name to a JSON name.\n */\nfunction protoCamelCase(snakeCase) {\n    let capNext = false;\n    const b = [];\n    for (let i = 0; i < snakeCase.length; i++) {\n        let c = snakeCase.charAt(i);\n        switch (c) {\n            case \"_\":\n                capNext = true;\n                break;\n            case \"0\":\n            case \"1\":\n            case \"2\":\n            case \"3\":\n            case \"4\":\n            case \"5\":\n            case \"6\":\n            case \"7\":\n            case \"8\":\n            case \"9\":\n                b.push(c);\n                capNext = false;\n                break;\n            default:\n                if (capNext) {\n                    capNext = false;\n                    c = c.toUpperCase();\n                }\n                b.push(c);\n                break;\n        }\n    }\n    return b.join(\"\");\n}\n/**\n * Names that cannot be used for identifiers, such as class names,\n * but _can_ be used for object properties.\n */\nconst reservedIdentifiers = new Set([\n    // ECMAScript 2015 keywords\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"class\",\n    \"const\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"delete\",\n    \"do\",\n    \"else\",\n    \"export\",\n    \"extends\",\n    \"false\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"import\",\n    \"in\",\n    \"instanceof\",\n    \"new\",\n    \"null\",\n    \"return\",\n    \"super\",\n    \"switch\",\n    \"this\",\n    \"throw\",\n    \"true\",\n    \"try\",\n    \"typeof\",\n    \"var\",\n    \"void\",\n    \"while\",\n    \"with\",\n    \"yield\",\n    // ECMAScript 2015 future reserved keywords\n    \"enum\",\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    // Class name cannot be 'Object' when targeting ES5 with module CommonJS\n    \"Object\",\n    // TypeScript keywords that cannot be used for types (as opposed to variables)\n    \"bigint\",\n    \"number\",\n    \"boolean\",\n    \"string\",\n    \"object\",\n    // Identifiers reserved for the runtime, so we can generate legible code\n    \"globalThis\",\n    \"Uint8Array\",\n    \"Partial\",\n]);\n/**\n * Names that cannot be used for object properties because they are reserved\n * by built-in JavaScript properties.\n */\nconst reservedObjectProperties = new Set([\n    // names reserved by JavaScript\n    \"constructor\",\n    \"toString\",\n    \"toJSON\",\n    \"valueOf\",\n]);\n/**\n * Names that cannot be used for object properties because they are reserved\n * by the runtime.\n */\nconst reservedMessageProperties = new Set([\n    // names reserved by the runtime\n    \"getType\",\n    \"clone\",\n    \"equals\",\n    \"fromBinary\",\n    \"fromJson\",\n    \"fromJsonString\",\n    \"toBinary\",\n    \"toJson\",\n    \"toJsonString\",\n    // names reserved by the runtime for the future\n    \"toObject\",\n]);\nconst fallback = (name) => `${name}$`;\n/**\n * Will wrap names that are Object prototype properties or names reserved\n * for `Message`s.\n */\nconst safeMessageProperty = (name) => {\n    if (reservedMessageProperties.has(name)) {\n        return fallback(name);\n    }\n    return name;\n};\n/**\n * Names that cannot be used for object properties because they are reserved\n * by built-in JavaScript properties.\n */\nexport const safeObjectProperty = (name) => {\n    if (reservedObjectProperties.has(name)) {\n        return fallback(name);\n    }\n    return name;\n};\n/**\n * Names that can be used for identifiers or class properties\n */\nexport const safeIdentifier = (name) => {\n    if (reservedIdentifiers.has(name)) {\n        return fallback(name);\n    }\n    return name;\n};\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { localOneofName } from \"./names.js\";\nimport { assert } from \"./assert.js\";\nexport class InternalOneofInfo {\n    constructor(name) {\n        this.kind = \"oneof\";\n        this.repeated = false;\n        this.packed = false;\n        this.opt = false;\n        this.req = false;\n        this.default = undefined;\n        this.fields = [];\n        this.name = name;\n        this.localName = localOneofName(name);\n    }\n    addField(field) {\n        assert(field.oneof === this, `field ${field.name} not one of ${this.name}`);\n        this.fields.push(field);\n    }\n    findField(localName) {\n        if (!this._lookup) {\n            this._lookup = Object.create(null);\n            for (let i = 0; i < this.fields.length; i++) {\n                this._lookup[this.fields[i].localName] = this.fields[i];\n            }\n        }\n        return this._lookup[localName];\n    }\n}\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { InternalOneofInfo } from \"./field.js\";\nimport { fieldJsonName, localFieldName } from \"./names.js\";\nimport { LongType, ScalarType } from \"../scalar.js\";\n/**\n * Convert a collection of field info to an array of normalized FieldInfo.\n *\n * The argument `packedByDefault` specifies whether fields that do not specify\n * `packed` should be packed (proto3) or unpacked (proto2).\n */\nexport function normalizeFieldInfos(fieldInfos, packedByDefault) {\n    var _a, _b, _c, _d, _e, _f;\n    const r = [];\n    let o;\n    for (const field of typeof fieldInfos == \"function\"\n        ? fieldInfos()\n        : fieldInfos) {\n        const f = field;\n        f.localName = localFieldName(field.name, field.oneof !== undefined);\n        f.jsonName = (_a = field.jsonName) !== null && _a !== void 0 ? _a : fieldJsonName(field.name);\n        f.repeated = (_b = field.repeated) !== null && _b !== void 0 ? _b : false;\n        if (field.kind == \"scalar\") {\n            f.L = (_c = field.L) !== null && _c !== void 0 ? _c : LongType.BIGINT;\n        }\n        f.delimited = (_d = field.delimited) !== null && _d !== void 0 ? _d : false;\n        f.req = (_e = field.req) !== null && _e !== void 0 ? _e : false;\n        f.opt = (_f = field.opt) !== null && _f !== void 0 ? _f : false;\n        if (field.packed === undefined) {\n            if (packedByDefault) {\n                f.packed =\n                    field.kind == \"enum\" ||\n                        (field.kind == \"scalar\" &&\n                            field.T != ScalarType.BYTES &&\n                            field.T != ScalarType.STRING);\n            }\n            else {\n                f.packed = false;\n            }\n        }\n        // We do not surface options at this time\n        // f.options = field.options ?? emptyReadonlyObject;\n        if (field.oneof !== undefined) {\n            const ooname = typeof field.oneof == \"string\" ? field.oneof : field.oneof.name;\n            if (!o || o.name != ooname) {\n                o = new InternalOneofInfo(ooname);\n            }\n            f.oneof = o;\n            o.addField(f);\n        }\n        r.push(f);\n    }\n    return r;\n}\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { makeProtoRuntime } from \"./private/proto-runtime.js\";\nimport { InternalFieldList } from \"./private/field-list.js\";\nimport { scalarZeroValue } from \"./private/scalars.js\";\nimport { normalizeFieldInfos } from \"./private/field-normalize.js\";\n/**\n * Provides functionality for messages defined with the proto3 syntax.\n */\nexport const proto3 = makeProtoRuntime(\"proto3\", (fields) => {\n    return new InternalFieldList(fields, (source) => normalizeFieldInfos(source, true));\n}, \n// TODO merge with proto2 and initExtensionField, also see initPartial, equals, clone\n(target) => {\n    for (const member of target.getType().fields.byMember()) {\n        if (member.opt) {\n            continue;\n        }\n        const name = member.localName, t = target;\n        if (member.repeated) {\n            t[name] = [];\n            continue;\n        }\n        switch (member.kind) {\n            case \"oneof\":\n                t[name] = { case: undefined };\n                break;\n            case \"enum\":\n                t[name] = 0;\n                break;\n            case \"map\":\n                t[name] = {};\n                break;\n            case \"scalar\":\n                t[name] = scalarZeroValue(member.T, member.L);\n                break;\n            case \"message\":\n                // message fields are always optional in proto3\n                break;\n        }\n    }\n});\n","// @generated by protoc-gen-es v1.10.0\n// @generated from file meshtastic/channel.proto (package meshtastic, syntax proto3)\n/* eslint-disable */\n// @ts-nocheck\n\nimport { proto3 } from \"@bufbuild/protobuf\";\n\n/**\n *\n * This information can be encoded as a QRcode/url so that other users can configure\n * their radio to join the same channel.\n * A note about how channel names are shown to users: channelname-X\n * poundsymbol is a prefix used to indicate this is a channel name (idea from @professr).\n * Where X is a letter from A-Z (base 26) representing a hash of the PSK for this\n * channel - so that if the user changes anything about the channel (which does\n * force a new PSK) this letter will also change. Thus preventing user confusion if\n * two friends try to type in a channel name of \"BobsChan\" and then can't talk\n * because their PSKs will be different.\n * The PSK is hashed into this letter by \"0x41 + [xor all bytes of the psk ] modulo 26\"\n * This also allows the option of someday if people have the PSK off (zero), the\n * users COULD type in a channel name and be able to talk.\n * FIXME: Add description of multi-channel support and how primary vs secondary channels are used.\n * FIXME: explain how apps use channels for security.\n * explain how remote settings and remote gpio are managed as an example\n *\n * @generated from message meshtastic.ChannelSettings\n */\nexport const ChannelSettings = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.ChannelSettings\",\n  () => [\n    { no: 1, name: \"channel_num\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 2, name: \"psk\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n    { no: 3, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 4, name: \"id\", kind: \"scalar\", T: 7 /* ScalarType.FIXED32 */ },\n    { no: 5, name: \"uplink_enabled\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 6, name: \"downlink_enabled\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 7, name: \"module_settings\", kind: \"message\", T: ModuleSettings },\n  ],\n);\n\n/**\n *\n * This message is specifically for modules to store per-channel configuration data.\n *\n * @generated from message meshtastic.ModuleSettings\n */\nexport const ModuleSettings = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.ModuleSettings\",\n  () => [\n    { no: 1, name: \"position_precision\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 2, name: \"is_client_muted\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n  ],\n);\n\n/**\n *\n * A pair of a channel number, mode and the (sharable) settings for that channel\n *\n * @generated from message meshtastic.Channel\n */\nexport const Channel = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.Channel\",\n  () => [\n    { no: 1, name: \"index\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 2, name: \"settings\", kind: \"message\", T: ChannelSettings },\n    { no: 3, name: \"role\", kind: \"enum\", T: proto3.getEnumType(Channel_Role) },\n  ],\n);\n\n/**\n *\n * How this channel is being used (or not).\n * Note: this field is an enum to give us options for the future.\n * In particular, someday we might make a 'SCANNING' option.\n * SCANNING channels could have different frequencies and the radio would\n * occasionally check that freq to see if anything is being transmitted.\n * For devices that have multiple physical radios attached, we could keep multiple PRIMARY/SCANNING channels active at once to allow\n * cross band routing as needed.\n * If a device has only a single radio (the common case) only one channel can be PRIMARY at a time\n * (but any number of SECONDARY channels can't be sent received on that common frequency)\n *\n * @generated from enum meshtastic.Channel.Role\n */\nexport const Channel_Role = /*@__PURE__*/ proto3.makeEnum(\n  \"meshtastic.Channel.Role\",\n  [\n    {no: 0, name: \"DISABLED\"},\n    {no: 1, name: \"PRIMARY\"},\n    {no: 2, name: \"SECONDARY\"},\n  ],\n);\n\n","// @generated by protoc-gen-es v1.10.0\n// @generated from file meshtastic/mesh.proto (package meshtastic, syntax proto3)\n/* eslint-disable */\n// @ts-nocheck\n\nimport { proto3 } from \"@bufbuild/protobuf\";\nimport { Config, Config_DeviceConfig_Role } from \"./config_pb.js\";\nimport { PortNum } from \"./portnums_pb.js\";\nimport { DeviceMetrics } from \"./telemetry_pb.js\";\nimport { ModuleConfig, RemoteHardwarePin } from \"./module_config_pb.js\";\nimport { Channel } from \"./channel_pb.js\";\nimport { XModem } from \"./xmodem_pb.js\";\n\n/**\n *\n * Note: these enum names must EXACTLY match the string used in the device\n * bin/build-all.sh script.\n * Because they will be used to find firmware filenames in the android app for OTA updates.\n * To match the old style filenames, _ is converted to -, p is converted to .\n *\n * @generated from enum meshtastic.HardwareModel\n */\nexport const HardwareModel = /*@__PURE__*/ proto3.makeEnum(\n  \"meshtastic.HardwareModel\",\n  [\n    {no: 0, name: \"UNSET\"},\n    {no: 1, name: \"TLORA_V2\"},\n    {no: 2, name: \"TLORA_V1\"},\n    {no: 3, name: \"TLORA_V2_1_1P6\"},\n    {no: 4, name: \"TBEAM\"},\n    {no: 5, name: \"HELTEC_V2_0\"},\n    {no: 6, name: \"TBEAM_V0P7\"},\n    {no: 7, name: \"T_ECHO\"},\n    {no: 8, name: \"TLORA_V1_1P3\"},\n    {no: 9, name: \"RAK4631\"},\n    {no: 10, name: \"HELTEC_V2_1\"},\n    {no: 11, name: \"HELTEC_V1\"},\n    {no: 12, name: \"LILYGO_TBEAM_S3_CORE\"},\n    {no: 13, name: \"RAK11200\"},\n    {no: 14, name: \"NANO_G1\"},\n    {no: 15, name: \"TLORA_V2_1_1P8\"},\n    {no: 16, name: \"TLORA_T3_S3\"},\n    {no: 17, name: \"NANO_G1_EXPLORER\"},\n    {no: 18, name: \"NANO_G2_ULTRA\"},\n    {no: 19, name: \"LORA_TYPE\"},\n    {no: 20, name: \"WIPHONE\"},\n    {no: 21, name: \"WIO_WM1110\"},\n    {no: 22, name: \"RAK2560\"},\n    {no: 23, name: \"HELTEC_HRU_3601\"},\n    {no: 25, name: \"STATION_G1\"},\n    {no: 26, name: \"RAK11310\"},\n    {no: 27, name: \"SENSELORA_RP2040\"},\n    {no: 28, name: \"SENSELORA_S3\"},\n    {no: 29, name: \"CANARYONE\"},\n    {no: 30, name: \"RP2040_LORA\"},\n    {no: 31, name: \"STATION_G2\"},\n    {no: 32, name: \"LORA_RELAY_V1\"},\n    {no: 33, name: \"NRF52840DK\"},\n    {no: 34, name: \"PPR\"},\n    {no: 35, name: \"GENIEBLOCKS\"},\n    {no: 36, name: \"NRF52_UNKNOWN\"},\n    {no: 37, name: \"PORTDUINO\"},\n    {no: 38, name: \"ANDROID_SIM\"},\n    {no: 39, name: \"DIY_V1\"},\n    {no: 40, name: \"NRF52840_PCA10059\"},\n    {no: 41, name: \"DR_DEV\"},\n    {no: 42, name: \"M5STACK\"},\n    {no: 43, name: \"HELTEC_V3\"},\n    {no: 44, name: \"HELTEC_WSL_V3\"},\n    {no: 45, name: \"BETAFPV_2400_TX\"},\n    {no: 46, name: \"BETAFPV_900_NANO_TX\"},\n    {no: 47, name: \"RPI_PICO\"},\n    {no: 48, name: \"HELTEC_WIRELESS_TRACKER\"},\n    {no: 49, name: \"HELTEC_WIRELESS_PAPER\"},\n    {no: 50, name: \"T_DECK\"},\n    {no: 51, name: \"T_WATCH_S3\"},\n    {no: 52, name: \"PICOMPUTER_S3\"},\n    {no: 53, name: \"HELTEC_HT62\"},\n    {no: 54, name: \"EBYTE_ESP32_S3\"},\n    {no: 55, name: \"ESP32_S3_PICO\"},\n    {no: 56, name: \"CHATTER_2\"},\n    {no: 57, name: \"HELTEC_WIRELESS_PAPER_V1_0\"},\n    {no: 58, name: \"HELTEC_WIRELESS_TRACKER_V1_0\"},\n    {no: 59, name: \"UNPHONE\"},\n    {no: 60, name: \"TD_LORAC\"},\n    {no: 61, name: \"CDEBYTE_EORA_S3\"},\n    {no: 62, name: \"TWC_MESH_V4\"},\n    {no: 63, name: \"NRF52_PROMICRO_DIY\"},\n    {no: 64, name: \"RADIOMASTER_900_BANDIT_NANO\"},\n    {no: 65, name: \"HELTEC_CAPSULE_SENSOR_V3\"},\n    {no: 66, name: \"HELTEC_VISION_MASTER_T190\"},\n    {no: 67, name: \"HELTEC_VISION_MASTER_E213\"},\n    {no: 68, name: \"HELTEC_VISION_MASTER_E290\"},\n    {no: 69, name: \"HELTEC_MESH_NODE_T114\"},\n    {no: 70, name: \"SENSECAP_INDICATOR\"},\n    {no: 71, name: \"TRACKER_T1000_E\"},\n    {no: 72, name: \"RAK3172\"},\n    {no: 73, name: \"WIO_E5\"},\n    {no: 74, name: \"RADIOMASTER_900_BANDIT\"},\n    {no: 75, name: \"ME25LS01_4Y10TD\"},\n    {no: 76, name: \"RP2040_FEATHER_RFM95\"},\n    {no: 77, name: \"M5STACK_COREBASIC\"},\n    {no: 78, name: \"M5STACK_CORE2\"},\n    {no: 255, name: \"PRIVATE_HW\"},\n  ],\n);\n\n/**\n *\n * Shared constants between device and phone\n *\n * @generated from enum meshtastic.Constants\n */\nexport const Constants = /*@__PURE__*/ proto3.makeEnum(\n  \"meshtastic.Constants\",\n  [\n    {no: 0, name: \"ZERO\"},\n    {no: 237, name: \"DATA_PAYLOAD_LEN\"},\n  ],\n);\n\n/**\n *\n * Error codes for critical errors\n * The device might report these fault codes on the screen.\n * If you encounter a fault code, please post on the meshtastic.discourse.group\n * and we'll try to help.\n *\n * @generated from enum meshtastic.CriticalErrorCode\n */\nexport const CriticalErrorCode = /*@__PURE__*/ proto3.makeEnum(\n  \"meshtastic.CriticalErrorCode\",\n  [\n    {no: 0, name: \"NONE\"},\n    {no: 1, name: \"TX_WATCHDOG\"},\n    {no: 2, name: \"SLEEP_ENTER_WAIT\"},\n    {no: 3, name: \"NO_RADIO\"},\n    {no: 4, name: \"UNSPECIFIED\"},\n    {no: 5, name: \"UBLOX_UNIT_FAILED\"},\n    {no: 6, name: \"NO_AXP192\"},\n    {no: 7, name: \"INVALID_RADIO_SETTING\"},\n    {no: 8, name: \"TRANSMIT_FAILED\"},\n    {no: 9, name: \"BROWNOUT\"},\n    {no: 10, name: \"SX1262_FAILURE\"},\n    {no: 11, name: \"RADIO_SPI_BUG\"},\n    {no: 12, name: \"FLASH_CORRUPTION_RECOVERABLE\"},\n    {no: 13, name: \"FLASH_CORRUPTION_UNRECOVERABLE\"},\n  ],\n);\n\n/**\n *\n * a gps position\n *\n * @generated from message meshtastic.Position\n */\nexport const Position = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.Position\",\n  () => [\n    { no: 1, name: \"latitude_i\", kind: \"scalar\", T: 15 /* ScalarType.SFIXED32 */, opt: true },\n    { no: 2, name: \"longitude_i\", kind: \"scalar\", T: 15 /* ScalarType.SFIXED32 */, opt: true },\n    { no: 3, name: \"altitude\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, opt: true },\n    { no: 4, name: \"time\", kind: \"scalar\", T: 7 /* ScalarType.FIXED32 */ },\n    { no: 5, name: \"location_source\", kind: \"enum\", T: proto3.getEnumType(Position_LocSource) },\n    { no: 6, name: \"altitude_source\", kind: \"enum\", T: proto3.getEnumType(Position_AltSource) },\n    { no: 7, name: \"timestamp\", kind: \"scalar\", T: 7 /* ScalarType.FIXED32 */ },\n    { no: 8, name: \"timestamp_millis_adjust\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 9, name: \"altitude_hae\", kind: \"scalar\", T: 17 /* ScalarType.SINT32 */, opt: true },\n    { no: 10, name: \"altitude_geoidal_separation\", kind: \"scalar\", T: 17 /* ScalarType.SINT32 */, opt: true },\n    { no: 11, name: \"PDOP\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 12, name: \"HDOP\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 13, name: \"VDOP\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 14, name: \"gps_accuracy\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 15, name: \"ground_speed\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */, opt: true },\n    { no: 16, name: \"ground_track\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */, opt: true },\n    { no: 17, name: \"fix_quality\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 18, name: \"fix_type\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 19, name: \"sats_in_view\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 20, name: \"sensor_id\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 21, name: \"next_update\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 22, name: \"seq_number\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 23, name: \"precision_bits\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n  ],\n);\n\n/**\n *\n * How the location was acquired: manual, onboard GPS, external (EUD) GPS\n *\n * @generated from enum meshtastic.Position.LocSource\n */\nexport const Position_LocSource = /*@__PURE__*/ proto3.makeEnum(\n  \"meshtastic.Position.LocSource\",\n  [\n    {no: 0, name: \"LOC_UNSET\"},\n    {no: 1, name: \"LOC_MANUAL\"},\n    {no: 2, name: \"LOC_INTERNAL\"},\n    {no: 3, name: \"LOC_EXTERNAL\"},\n  ],\n);\n\n/**\n *\n * How the altitude was acquired: manual, GPS int/ext, etc\n * Default: same as location_source if present\n *\n * @generated from enum meshtastic.Position.AltSource\n */\nexport const Position_AltSource = /*@__PURE__*/ proto3.makeEnum(\n  \"meshtastic.Position.AltSource\",\n  [\n    {no: 0, name: \"ALT_UNSET\"},\n    {no: 1, name: \"ALT_MANUAL\"},\n    {no: 2, name: \"ALT_INTERNAL\"},\n    {no: 3, name: \"ALT_EXTERNAL\"},\n    {no: 4, name: \"ALT_BAROMETRIC\"},\n  ],\n);\n\n/**\n *\n * Broadcast when a newly powered mesh node wants to find a node num it can use\n * Sent from the phone over bluetooth to set the user id for the owner of this node.\n * Also sent from nodes to each other when a new node signs on (so all clients can have this info)\n * The algorithm is as follows:\n * when a node starts up, it broadcasts their user and the normal flow is for all\n * other nodes to reply with their User as well (so the new node can build its nodedb)\n * If a node ever receives a User (not just the first broadcast) message where\n * the sender node number equals our node number, that indicates a collision has\n * occurred and the following steps should happen:\n * If the receiving node (that was already in the mesh)'s macaddr is LOWER than the\n * new User who just tried to sign in: it gets to keep its nodenum.\n * We send a broadcast message of OUR User (we use a broadcast so that the other node can\n * receive our message, considering we have the same id - it also serves to let\n * observers correct their nodedb) - this case is rare so it should be okay.\n * If any node receives a User where the macaddr is GTE than their local macaddr,\n * they have been vetoed and should pick a new random nodenum (filtering against\n * whatever it knows about the nodedb) and rebroadcast their User.\n * A few nodenums are reserved and will never be requested:\n * 0xff - broadcast\n * 0 through 3 - for future use\n *\n * @generated from message meshtastic.User\n */\nexport const User = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.User\",\n  () => [\n    { no: 1, name: \"id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"long_name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"short_name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 4, name: \"macaddr\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n    { no: 5, name: \"hw_model\", kind: \"enum\", T: proto3.getEnumType(HardwareModel) },\n    { no: 6, name: \"is_licensed\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 7, name: \"role\", kind: \"enum\", T: proto3.getEnumType(Config_DeviceConfig_Role) },\n    { no: 8, name: \"public_key\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n  ],\n);\n\n/**\n *\n * A message used in a traceroute\n *\n * @generated from message meshtastic.RouteDiscovery\n */\nexport const RouteDiscovery = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.RouteDiscovery\",\n  () => [\n    { no: 1, name: \"route\", kind: \"scalar\", T: 7 /* ScalarType.FIXED32 */, repeated: true },\n    { no: 2, name: \"snr_towards\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, repeated: true },\n    { no: 3, name: \"route_back\", kind: \"scalar\", T: 7 /* ScalarType.FIXED32 */, repeated: true },\n    { no: 4, name: \"snr_back\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, repeated: true },\n  ],\n);\n\n/**\n *\n * A Routing control Data packet handled by the routing module\n *\n * @generated from message meshtastic.Routing\n */\nexport const Routing = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.Routing\",\n  () => [\n    { no: 1, name: \"route_request\", kind: \"message\", T: RouteDiscovery, oneof: \"variant\" },\n    { no: 2, name: \"route_reply\", kind: \"message\", T: RouteDiscovery, oneof: \"variant\" },\n    { no: 3, name: \"error_reason\", kind: \"enum\", T: proto3.getEnumType(Routing_Error), oneof: \"variant\" },\n  ],\n);\n\n/**\n *\n * A failure in delivering a message (usually used for routing control messages, but might be provided in addition to ack.fail_id to provide\n * details on the type of failure).\n *\n * @generated from enum meshtastic.Routing.Error\n */\nexport const Routing_Error = /*@__PURE__*/ proto3.makeEnum(\n  \"meshtastic.Routing.Error\",\n  [\n    {no: 0, name: \"NONE\"},\n    {no: 1, name: \"NO_ROUTE\"},\n    {no: 2, name: \"GOT_NAK\"},\n    {no: 3, name: \"TIMEOUT\"},\n    {no: 4, name: \"NO_INTERFACE\"},\n    {no: 5, name: \"MAX_RETRANSMIT\"},\n    {no: 6, name: \"NO_CHANNEL\"},\n    {no: 7, name: \"TOO_LARGE\"},\n    {no: 8, name: \"NO_RESPONSE\"},\n    {no: 9, name: \"DUTY_CYCLE_LIMIT\"},\n    {no: 32, name: \"BAD_REQUEST\"},\n    {no: 33, name: \"NOT_AUTHORIZED\"},\n    {no: 34, name: \"PKI_FAILED\"},\n    {no: 35, name: \"PKI_UNKNOWN_PUBKEY\"},\n  ],\n);\n\n/**\n *\n * (Formerly called SubPacket)\n * The payload portion fo a packet, this is the actual bytes that are sent\n * inside a radio packet (because from/to are broken out by the comms library)\n *\n * @generated from message meshtastic.Data\n */\nexport const Data = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.Data\",\n  () => [\n    { no: 1, name: \"portnum\", kind: \"enum\", T: proto3.getEnumType(PortNum) },\n    { no: 2, name: \"payload\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n    { no: 3, name: \"want_response\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 4, name: \"dest\", kind: \"scalar\", T: 7 /* ScalarType.FIXED32 */ },\n    { no: 5, name: \"source\", kind: \"scalar\", T: 7 /* ScalarType.FIXED32 */ },\n    { no: 6, name: \"request_id\", kind: \"scalar\", T: 7 /* ScalarType.FIXED32 */ },\n    { no: 7, name: \"reply_id\", kind: \"scalar\", T: 7 /* ScalarType.FIXED32 */ },\n    { no: 8, name: \"emoji\", kind: \"scalar\", T: 7 /* ScalarType.FIXED32 */ },\n    { no: 9, name: \"bitfield\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */, opt: true },\n  ],\n);\n\n/**\n *\n * Waypoint message, used to share arbitrary locations across the mesh\n *\n * @generated from message meshtastic.Waypoint\n */\nexport const Waypoint = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.Waypoint\",\n  () => [\n    { no: 1, name: \"id\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 2, name: \"latitude_i\", kind: \"scalar\", T: 15 /* ScalarType.SFIXED32 */, opt: true },\n    { no: 3, name: \"longitude_i\", kind: \"scalar\", T: 15 /* ScalarType.SFIXED32 */, opt: true },\n    { no: 4, name: \"expire\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 5, name: \"locked_to\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 6, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 7, name: \"description\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 8, name: \"icon\", kind: \"scalar\", T: 7 /* ScalarType.FIXED32 */ },\n  ],\n);\n\n/**\n *\n * This message will be proxied over the PhoneAPI for the client to deliver to the MQTT server\n *\n * @generated from message meshtastic.MqttClientProxyMessage\n */\nexport const MqttClientProxyMessage = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.MqttClientProxyMessage\",\n  () => [\n    { no: 1, name: \"topic\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"data\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */, oneof: \"payload_variant\" },\n    { no: 3, name: \"text\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, oneof: \"payload_variant\" },\n    { no: 4, name: \"retained\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n  ],\n);\n\n/**\n *\n * A packet envelope sent/received over the mesh\n * only payload_variant is sent in the payload portion of the LORA packet.\n * The other fields are either not sent at all, or sent in the special 16 byte LORA header.\n *\n * @generated from message meshtastic.MeshPacket\n */\nexport const MeshPacket = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.MeshPacket\",\n  () => [\n    { no: 1, name: \"from\", kind: \"scalar\", T: 7 /* ScalarType.FIXED32 */ },\n    { no: 2, name: \"to\", kind: \"scalar\", T: 7 /* ScalarType.FIXED32 */ },\n    { no: 3, name: \"channel\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 4, name: \"decoded\", kind: \"message\", T: Data, oneof: \"payload_variant\" },\n    { no: 5, name: \"encrypted\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */, oneof: \"payload_variant\" },\n    { no: 6, name: \"id\", kind: \"scalar\", T: 7 /* ScalarType.FIXED32 */ },\n    { no: 7, name: \"rx_time\", kind: \"scalar\", T: 7 /* ScalarType.FIXED32 */ },\n    { no: 8, name: \"rx_snr\", kind: \"scalar\", T: 2 /* ScalarType.FLOAT */ },\n    { no: 9, name: \"hop_limit\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 10, name: \"want_ack\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 11, name: \"priority\", kind: \"enum\", T: proto3.getEnumType(MeshPacket_Priority) },\n    { no: 12, name: \"rx_rssi\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 13, name: \"delayed\", kind: \"enum\", T: proto3.getEnumType(MeshPacket_Delayed) },\n    { no: 14, name: \"via_mqtt\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 15, name: \"hop_start\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 16, name: \"public_key\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n    { no: 17, name: \"pki_encrypted\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n  ],\n);\n\n/**\n *\n * The priority of this message for sending.\n * Higher priorities are sent first (when managing the transmit queue).\n * This field is never sent over the air, it is only used internally inside of a local device node.\n * API clients (either on the local node or connected directly to the node)\n * can set this parameter if necessary.\n * (values must be <= 127 to keep protobuf field to one byte in size.\n * Detailed background on this field:\n * I noticed a funny side effect of lora being so slow: Usually when making\n * a protocol there isn’t much need to use message priority to change the order\n * of transmission (because interfaces are fairly fast).\n * But for lora where packets can take a few seconds each, it is very important\n * to make sure that critical packets are sent ASAP.\n * In the case of meshtastic that means we want to send protocol acks as soon as possible\n * (to prevent unneeded retransmissions), we want routing messages to be sent next,\n * then messages marked as reliable and finally 'background' packets like periodic position updates.\n * So I bit the bullet and implemented a new (internal - not sent over the air)\n * field in MeshPacket called 'priority'.\n * And the transmission queue in the router object is now a priority queue.\n *\n * @generated from enum meshtastic.MeshPacket.Priority\n */\nexport const MeshPacket_Priority = /*@__PURE__*/ proto3.makeEnum(\n  \"meshtastic.MeshPacket.Priority\",\n  [\n    {no: 0, name: \"UNSET\"},\n    {no: 1, name: \"MIN\"},\n    {no: 10, name: \"BACKGROUND\"},\n    {no: 64, name: \"DEFAULT\"},\n    {no: 70, name: \"RELIABLE\"},\n    {no: 80, name: \"RESPONSE\"},\n    {no: 100, name: \"HIGH\"},\n    {no: 120, name: \"ACK\"},\n    {no: 127, name: \"MAX\"},\n  ],\n);\n\n/**\n *\n * Identify if this is a delayed packet\n *\n * @generated from enum meshtastic.MeshPacket.Delayed\n */\nexport const MeshPacket_Delayed = /*@__PURE__*/ proto3.makeEnum(\n  \"meshtastic.MeshPacket.Delayed\",\n  [\n    {no: 0, name: \"NO_DELAY\"},\n    {no: 1, name: \"DELAYED_BROADCAST\"},\n    {no: 2, name: \"DELAYED_DIRECT\"},\n  ],\n);\n\n/**\n *\n * The bluetooth to device link:\n * Old BTLE protocol docs from TODO, merge in above and make real docs...\n * use protocol buffers, and NanoPB\n * messages from device to phone:\n * POSITION_UPDATE (..., time)\n * TEXT_RECEIVED(from, text, time)\n * OPAQUE_RECEIVED(from, payload, time) (for signal messages or other applications)\n * messages from phone to device:\n * SET_MYID(id, human readable long, human readable short) (send down the unique ID\n * string used for this node, a human readable string shown for that id, and a very\n * short human readable string suitable for oled screen) SEND_OPAQUE(dest, payload)\n * (for signal messages or other applications) SEND_TEXT(dest, text) Get all\n * nodes() (returns list of nodes, with full info, last time seen, loc, battery\n * level etc) SET_CONFIG (switches device to a new set of radio params and\n * preshared key, drops all existing nodes, force our node to rejoin this new group)\n * Full information about a node on the mesh\n *\n * @generated from message meshtastic.NodeInfo\n */\nexport const NodeInfo = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.NodeInfo\",\n  () => [\n    { no: 1, name: \"num\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 2, name: \"user\", kind: \"message\", T: User },\n    { no: 3, name: \"position\", kind: \"message\", T: Position },\n    { no: 4, name: \"snr\", kind: \"scalar\", T: 2 /* ScalarType.FLOAT */ },\n    { no: 5, name: \"last_heard\", kind: \"scalar\", T: 7 /* ScalarType.FIXED32 */ },\n    { no: 6, name: \"device_metrics\", kind: \"message\", T: DeviceMetrics },\n    { no: 7, name: \"channel\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 8, name: \"via_mqtt\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 9, name: \"hops_away\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 10, name: \"is_favorite\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n  ],\n);\n\n/**\n *\n * Unique local debugging info for this node\n * Note: we don't include position or the user info, because that will come in the\n * Sent to the phone in response to WantNodes.\n *\n * @generated from message meshtastic.MyNodeInfo\n */\nexport const MyNodeInfo = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.MyNodeInfo\",\n  () => [\n    { no: 1, name: \"my_node_num\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 8, name: \"reboot_count\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 11, name: \"min_app_version\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n  ],\n);\n\n/**\n *\n * Debug output from the device.\n * To minimize the size of records inside the device code, if a time/source/level is not set\n * on the message it is assumed to be a continuation of the previously sent message.\n * This allows the device code to use fixed maxlen 64 byte strings for messages,\n * and then extend as needed by emitting multiple records.\n *\n * @generated from message meshtastic.LogRecord\n */\nexport const LogRecord = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.LogRecord\",\n  () => [\n    { no: 1, name: \"message\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"time\", kind: \"scalar\", T: 7 /* ScalarType.FIXED32 */ },\n    { no: 3, name: \"source\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 4, name: \"level\", kind: \"enum\", T: proto3.getEnumType(LogRecord_Level) },\n  ],\n);\n\n/**\n *\n * Log levels, chosen to match python logging conventions.\n *\n * @generated from enum meshtastic.LogRecord.Level\n */\nexport const LogRecord_Level = /*@__PURE__*/ proto3.makeEnum(\n  \"meshtastic.LogRecord.Level\",\n  [\n    {no: 0, name: \"UNSET\"},\n    {no: 50, name: \"CRITICAL\"},\n    {no: 40, name: \"ERROR\"},\n    {no: 30, name: \"WARNING\"},\n    {no: 20, name: \"INFO\"},\n    {no: 10, name: \"DEBUG\"},\n    {no: 5, name: \"TRACE\"},\n  ],\n);\n\n/**\n * @generated from message meshtastic.QueueStatus\n */\nexport const QueueStatus = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.QueueStatus\",\n  () => [\n    { no: 1, name: \"res\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 2, name: \"free\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 3, name: \"maxlen\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 4, name: \"mesh_packet_id\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n  ],\n);\n\n/**\n *\n * Packets from the radio to the phone will appear on the fromRadio characteristic.\n * It will support READ and NOTIFY. When a new packet arrives the device will BLE notify?\n * It will sit in that descriptor until consumed by the phone,\n * at which point the next item in the FIFO will be populated.\n *\n * @generated from message meshtastic.FromRadio\n */\nexport const FromRadio = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.FromRadio\",\n  () => [\n    { no: 1, name: \"id\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 2, name: \"packet\", kind: \"message\", T: MeshPacket, oneof: \"payload_variant\" },\n    { no: 3, name: \"my_info\", kind: \"message\", T: MyNodeInfo, oneof: \"payload_variant\" },\n    { no: 4, name: \"node_info\", kind: \"message\", T: NodeInfo, oneof: \"payload_variant\" },\n    { no: 5, name: \"config\", kind: \"message\", T: Config, oneof: \"payload_variant\" },\n    { no: 6, name: \"log_record\", kind: \"message\", T: LogRecord, oneof: \"payload_variant\" },\n    { no: 7, name: \"config_complete_id\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */, oneof: \"payload_variant\" },\n    { no: 8, name: \"rebooted\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, oneof: \"payload_variant\" },\n    { no: 9, name: \"moduleConfig\", kind: \"message\", T: ModuleConfig, oneof: \"payload_variant\" },\n    { no: 10, name: \"channel\", kind: \"message\", T: Channel, oneof: \"payload_variant\" },\n    { no: 11, name: \"queueStatus\", kind: \"message\", T: QueueStatus, oneof: \"payload_variant\" },\n    { no: 12, name: \"xmodemPacket\", kind: \"message\", T: XModem, oneof: \"payload_variant\" },\n    { no: 13, name: \"metadata\", kind: \"message\", T: DeviceMetadata, oneof: \"payload_variant\" },\n    { no: 14, name: \"mqttClientProxyMessage\", kind: \"message\", T: MqttClientProxyMessage, oneof: \"payload_variant\" },\n    { no: 15, name: \"fileInfo\", kind: \"message\", T: FileInfo, oneof: \"payload_variant\" },\n    { no: 16, name: \"clientNotification\", kind: \"message\", T: ClientNotification, oneof: \"payload_variant\" },\n  ],\n);\n\n/**\n *\n * A notification message from the device to the client\n * To be used for important messages that should to be displayed to the user\n * in the form of push notifications or validation messages when saving\n * invalid configuration.\n *\n * @generated from message meshtastic.ClientNotification\n */\nexport const ClientNotification = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.ClientNotification\",\n  () => [\n    { no: 1, name: \"reply_id\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */, opt: true },\n    { no: 2, name: \"time\", kind: \"scalar\", T: 7 /* ScalarType.FIXED32 */ },\n    { no: 3, name: \"level\", kind: \"enum\", T: proto3.getEnumType(LogRecord_Level) },\n    { no: 4, name: \"message\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ],\n);\n\n/**\n *\n * Individual File info for the device\n *\n * @generated from message meshtastic.FileInfo\n */\nexport const FileInfo = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.FileInfo\",\n  () => [\n    { no: 1, name: \"file_name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"size_bytes\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n  ],\n);\n\n/**\n *\n * Packets/commands to the radio will be written (reliably) to the toRadio characteristic.\n * Once the write completes the phone can assume it is handled.\n *\n * @generated from message meshtastic.ToRadio\n */\nexport const ToRadio = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.ToRadio\",\n  () => [\n    { no: 1, name: \"packet\", kind: \"message\", T: MeshPacket, oneof: \"payload_variant\" },\n    { no: 3, name: \"want_config_id\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */, oneof: \"payload_variant\" },\n    { no: 4, name: \"disconnect\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, oneof: \"payload_variant\" },\n    { no: 5, name: \"xmodemPacket\", kind: \"message\", T: XModem, oneof: \"payload_variant\" },\n    { no: 6, name: \"mqttClientProxyMessage\", kind: \"message\", T: MqttClientProxyMessage, oneof: \"payload_variant\" },\n    { no: 7, name: \"heartbeat\", kind: \"message\", T: Heartbeat, oneof: \"payload_variant\" },\n  ],\n);\n\n/**\n *\n * Compressed message payload\n *\n * @generated from message meshtastic.Compressed\n */\nexport const Compressed = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.Compressed\",\n  () => [\n    { no: 1, name: \"portnum\", kind: \"enum\", T: proto3.getEnumType(PortNum) },\n    { no: 2, name: \"data\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n  ],\n);\n\n/**\n *\n * Full info on edges for a single node\n *\n * @generated from message meshtastic.NeighborInfo\n */\nexport const NeighborInfo = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.NeighborInfo\",\n  () => [\n    { no: 1, name: \"node_id\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 2, name: \"last_sent_by_id\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 3, name: \"node_broadcast_interval_secs\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 4, name: \"neighbors\", kind: \"message\", T: Neighbor, repeated: true },\n  ],\n);\n\n/**\n *\n * A single edge in the mesh\n *\n * @generated from message meshtastic.Neighbor\n */\nexport const Neighbor = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.Neighbor\",\n  () => [\n    { no: 1, name: \"node_id\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 2, name: \"snr\", kind: \"scalar\", T: 2 /* ScalarType.FLOAT */ },\n    { no: 3, name: \"last_rx_time\", kind: \"scalar\", T: 7 /* ScalarType.FIXED32 */ },\n    { no: 4, name: \"node_broadcast_interval_secs\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n  ],\n);\n\n/**\n *\n * Device metadata response\n *\n * @generated from message meshtastic.DeviceMetadata\n */\nexport const DeviceMetadata = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.DeviceMetadata\",\n  () => [\n    { no: 1, name: \"firmware_version\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"device_state_version\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 3, name: \"canShutdown\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 4, name: \"hasWifi\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 5, name: \"hasBluetooth\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 6, name: \"hasEthernet\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 7, name: \"role\", kind: \"enum\", T: proto3.getEnumType(Config_DeviceConfig_Role) },\n    { no: 8, name: \"position_flags\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 9, name: \"hw_model\", kind: \"enum\", T: proto3.getEnumType(HardwareModel) },\n    { no: 10, name: \"hasRemoteHardware\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n  ],\n);\n\n/**\n *\n * A heartbeat message is sent to the node from the client to keep the connection alive.\n * This is currently only needed to keep serial connections alive, but can be used by any PhoneAPI.\n *\n * @generated from message meshtastic.Heartbeat\n */\nexport const Heartbeat = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.Heartbeat\",\n  [],\n);\n\n/**\n *\n * RemoteHardwarePins associated with a node\n *\n * @generated from message meshtastic.NodeRemoteHardwarePin\n */\nexport const NodeRemoteHardwarePin = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.NodeRemoteHardwarePin\",\n  () => [\n    { no: 1, name: \"node_num\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 2, name: \"pin\", kind: \"message\", T: RemoteHardwarePin },\n  ],\n);\n\n/**\n * @generated from message meshtastic.ChunkedPayload\n */\nexport const ChunkedPayload = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.ChunkedPayload\",\n  () => [\n    { no: 1, name: \"payload_id\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 2, name: \"chunk_count\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 3, name: \"chunk_index\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 4, name: \"payload_chunk\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n  ],\n);\n\n/**\n *\n * Wrapper message for broken repeated oneof support\n *\n * @generated from message meshtastic.resend_chunks\n */\nexport const resend_chunks = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.resend_chunks\",\n  () => [\n    { no: 1, name: \"chunks\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */, repeated: true },\n  ],\n);\n\n/**\n *\n * Responses to a ChunkedPayload request\n *\n * @generated from message meshtastic.ChunkedPayloadResponse\n */\nexport const ChunkedPayloadResponse = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.ChunkedPayloadResponse\",\n  () => [\n    { no: 1, name: \"payload_id\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 2, name: \"request_transfer\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, oneof: \"payload_variant\" },\n    { no: 3, name: \"accept_transfer\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, oneof: \"payload_variant\" },\n    { no: 4, name: \"resend_chunks\", kind: \"message\", T: resend_chunks, oneof: \"payload_variant\" },\n  ],\n);\n\n","// @generated by protoc-gen-es v1.10.0\n// @generated from file meshtastic/config.proto (package meshtastic, syntax proto3)\n/* eslint-disable */\n// @ts-nocheck\n\nimport { proto3 } from \"@bufbuild/protobuf\";\n\n/**\n * @generated from message meshtastic.Config\n */\nexport const Config = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.Config\",\n  () => [\n    { no: 1, name: \"device\", kind: \"message\", T: Config_DeviceConfig, oneof: \"payload_variant\" },\n    { no: 2, name: \"position\", kind: \"message\", T: Config_PositionConfig, oneof: \"payload_variant\" },\n    { no: 3, name: \"power\", kind: \"message\", T: Config_PowerConfig, oneof: \"payload_variant\" },\n    { no: 4, name: \"network\", kind: \"message\", T: Config_NetworkConfig, oneof: \"payload_variant\" },\n    { no: 5, name: \"display\", kind: \"message\", T: Config_DisplayConfig, oneof: \"payload_variant\" },\n    { no: 6, name: \"lora\", kind: \"message\", T: Config_LoRaConfig, oneof: \"payload_variant\" },\n    { no: 7, name: \"bluetooth\", kind: \"message\", T: Config_BluetoothConfig, oneof: \"payload_variant\" },\n    { no: 8, name: \"security\", kind: \"message\", T: Config_SecurityConfig, oneof: \"payload_variant\" },\n    { no: 9, name: \"sessionkey\", kind: \"message\", T: Config_SessionkeyConfig, oneof: \"payload_variant\" },\n  ],\n);\n\n/**\n *\n * Configuration\n *\n * @generated from message meshtastic.Config.DeviceConfig\n */\nexport const Config_DeviceConfig = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.Config.DeviceConfig\",\n  () => [\n    { no: 1, name: \"role\", kind: \"enum\", T: proto3.getEnumType(Config_DeviceConfig_Role) },\n    { no: 2, name: \"serial_enabled\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 4, name: \"button_gpio\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 5, name: \"buzzer_gpio\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 6, name: \"rebroadcast_mode\", kind: \"enum\", T: proto3.getEnumType(Config_DeviceConfig_RebroadcastMode) },\n    { no: 7, name: \"node_info_broadcast_secs\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 8, name: \"double_tap_as_button_press\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 9, name: \"is_managed\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 10, name: \"disable_triple_click\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 11, name: \"tzdef\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 12, name: \"led_heartbeat_disabled\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n  ],\n  {localName: \"Config_DeviceConfig\"},\n);\n\n/**\n *\n * Defines the device's role on the Mesh network\n *\n * @generated from enum meshtastic.Config.DeviceConfig.Role\n */\nexport const Config_DeviceConfig_Role = /*@__PURE__*/ proto3.makeEnum(\n  \"meshtastic.Config.DeviceConfig.Role\",\n  [\n    {no: 0, name: \"CLIENT\"},\n    {no: 1, name: \"CLIENT_MUTE\"},\n    {no: 2, name: \"ROUTER\"},\n    {no: 3, name: \"ROUTER_CLIENT\"},\n    {no: 4, name: \"REPEATER\"},\n    {no: 5, name: \"TRACKER\"},\n    {no: 6, name: \"SENSOR\"},\n    {no: 7, name: \"TAK\"},\n    {no: 8, name: \"CLIENT_HIDDEN\"},\n    {no: 9, name: \"LOST_AND_FOUND\"},\n    {no: 10, name: \"TAK_TRACKER\"},\n  ],\n);\n\n/**\n *\n * Defines the device's behavior for how messages are rebroadcast\n *\n * @generated from enum meshtastic.Config.DeviceConfig.RebroadcastMode\n */\nexport const Config_DeviceConfig_RebroadcastMode = /*@__PURE__*/ proto3.makeEnum(\n  \"meshtastic.Config.DeviceConfig.RebroadcastMode\",\n  [\n    {no: 0, name: \"ALL\"},\n    {no: 1, name: \"ALL_SKIP_DECODING\"},\n    {no: 2, name: \"LOCAL_ONLY\"},\n    {no: 3, name: \"KNOWN_ONLY\"},\n  ],\n);\n\n/**\n *\n * Position Config\n *\n * @generated from message meshtastic.Config.PositionConfig\n */\nexport const Config_PositionConfig = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.Config.PositionConfig\",\n  () => [\n    { no: 1, name: \"position_broadcast_secs\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 2, name: \"position_broadcast_smart_enabled\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 3, name: \"fixed_position\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 4, name: \"gps_enabled\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 5, name: \"gps_update_interval\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 6, name: \"gps_attempt_time\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 7, name: \"position_flags\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 8, name: \"rx_gpio\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 9, name: \"tx_gpio\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 10, name: \"broadcast_smart_minimum_distance\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 11, name: \"broadcast_smart_minimum_interval_secs\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 12, name: \"gps_en_gpio\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 13, name: \"gps_mode\", kind: \"enum\", T: proto3.getEnumType(Config_PositionConfig_GpsMode) },\n  ],\n  {localName: \"Config_PositionConfig\"},\n);\n\n/**\n *\n * Bit field of boolean configuration options, indicating which optional\n * fields to include when assembling POSITION messages.\n * Longitude, latitude, altitude, speed, heading, and DOP\n * are always included (also time if GPS-synced)\n * NOTE: the more fields are included, the larger the message will be -\n *   leading to longer airtime and a higher risk of packet loss\n *\n * @generated from enum meshtastic.Config.PositionConfig.PositionFlags\n */\nexport const Config_PositionConfig_PositionFlags = /*@__PURE__*/ proto3.makeEnum(\n  \"meshtastic.Config.PositionConfig.PositionFlags\",\n  [\n    {no: 0, name: \"UNSET\"},\n    {no: 1, name: \"ALTITUDE\"},\n    {no: 2, name: \"ALTITUDE_MSL\"},\n    {no: 4, name: \"GEOIDAL_SEPARATION\"},\n    {no: 8, name: \"DOP\"},\n    {no: 16, name: \"HVDOP\"},\n    {no: 32, name: \"SATINVIEW\"},\n    {no: 64, name: \"SEQ_NO\"},\n    {no: 128, name: \"TIMESTAMP\"},\n    {no: 256, name: \"HEADING\"},\n    {no: 512, name: \"SPEED\"},\n  ],\n);\n\n/**\n * @generated from enum meshtastic.Config.PositionConfig.GpsMode\n */\nexport const Config_PositionConfig_GpsMode = /*@__PURE__*/ proto3.makeEnum(\n  \"meshtastic.Config.PositionConfig.GpsMode\",\n  [\n    {no: 0, name: \"DISABLED\"},\n    {no: 1, name: \"ENABLED\"},\n    {no: 2, name: \"NOT_PRESENT\"},\n  ],\n);\n\n/**\n *\n * Power Config\\\n * See [Power Config](/docs/settings/config/power) for additional power config details.\n *\n * @generated from message meshtastic.Config.PowerConfig\n */\nexport const Config_PowerConfig = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.Config.PowerConfig\",\n  () => [\n    { no: 1, name: \"is_power_saving\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 2, name: \"on_battery_shutdown_after_secs\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 3, name: \"adc_multiplier_override\", kind: \"scalar\", T: 2 /* ScalarType.FLOAT */ },\n    { no: 4, name: \"wait_bluetooth_secs\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 6, name: \"sds_secs\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 7, name: \"ls_secs\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 8, name: \"min_wake_secs\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 9, name: \"device_battery_ina_address\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 32, name: \"powermon_enables\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n  ],\n  {localName: \"Config_PowerConfig\"},\n);\n\n/**\n *\n * Network Config\n *\n * @generated from message meshtastic.Config.NetworkConfig\n */\nexport const Config_NetworkConfig = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.Config.NetworkConfig\",\n  () => [\n    { no: 1, name: \"wifi_enabled\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 3, name: \"wifi_ssid\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 4, name: \"wifi_psk\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 5, name: \"ntp_server\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 6, name: \"eth_enabled\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 7, name: \"address_mode\", kind: \"enum\", T: proto3.getEnumType(Config_NetworkConfig_AddressMode) },\n    { no: 8, name: \"ipv4_config\", kind: \"message\", T: Config_NetworkConfig_IpV4Config },\n    { no: 9, name: \"rsyslog_server\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ],\n  {localName: \"Config_NetworkConfig\"},\n);\n\n/**\n * @generated from enum meshtastic.Config.NetworkConfig.AddressMode\n */\nexport const Config_NetworkConfig_AddressMode = /*@__PURE__*/ proto3.makeEnum(\n  \"meshtastic.Config.NetworkConfig.AddressMode\",\n  [\n    {no: 0, name: \"DHCP\"},\n    {no: 1, name: \"STATIC\"},\n  ],\n);\n\n/**\n * @generated from message meshtastic.Config.NetworkConfig.IpV4Config\n */\nexport const Config_NetworkConfig_IpV4Config = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.Config.NetworkConfig.IpV4Config\",\n  () => [\n    { no: 1, name: \"ip\", kind: \"scalar\", T: 7 /* ScalarType.FIXED32 */ },\n    { no: 2, name: \"gateway\", kind: \"scalar\", T: 7 /* ScalarType.FIXED32 */ },\n    { no: 3, name: \"subnet\", kind: \"scalar\", T: 7 /* ScalarType.FIXED32 */ },\n    { no: 4, name: \"dns\", kind: \"scalar\", T: 7 /* ScalarType.FIXED32 */ },\n  ],\n  {localName: \"Config_NetworkConfig_IpV4Config\"},\n);\n\n/**\n *\n * Display Config\n *\n * @generated from message meshtastic.Config.DisplayConfig\n */\nexport const Config_DisplayConfig = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.Config.DisplayConfig\",\n  () => [\n    { no: 1, name: \"screen_on_secs\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 2, name: \"gps_format\", kind: \"enum\", T: proto3.getEnumType(Config_DisplayConfig_GpsCoordinateFormat) },\n    { no: 3, name: \"auto_screen_carousel_secs\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 4, name: \"compass_north_top\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 5, name: \"flip_screen\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 6, name: \"units\", kind: \"enum\", T: proto3.getEnumType(Config_DisplayConfig_DisplayUnits) },\n    { no: 7, name: \"oled\", kind: \"enum\", T: proto3.getEnumType(Config_DisplayConfig_OledType) },\n    { no: 8, name: \"displaymode\", kind: \"enum\", T: proto3.getEnumType(Config_DisplayConfig_DisplayMode) },\n    { no: 9, name: \"heading_bold\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 10, name: \"wake_on_tap_or_motion\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 11, name: \"compass_orientation\", kind: \"enum\", T: proto3.getEnumType(Config_DisplayConfig_CompassOrientation) },\n  ],\n  {localName: \"Config_DisplayConfig\"},\n);\n\n/**\n *\n * How the GPS coordinates are displayed on the OLED screen.\n *\n * @generated from enum meshtastic.Config.DisplayConfig.GpsCoordinateFormat\n */\nexport const Config_DisplayConfig_GpsCoordinateFormat = /*@__PURE__*/ proto3.makeEnum(\n  \"meshtastic.Config.DisplayConfig.GpsCoordinateFormat\",\n  [\n    {no: 0, name: \"DEC\"},\n    {no: 1, name: \"DMS\"},\n    {no: 2, name: \"UTM\"},\n    {no: 3, name: \"MGRS\"},\n    {no: 4, name: \"OLC\"},\n    {no: 5, name: \"OSGR\"},\n  ],\n);\n\n/**\n *\n * Unit display preference\n *\n * @generated from enum meshtastic.Config.DisplayConfig.DisplayUnits\n */\nexport const Config_DisplayConfig_DisplayUnits = /*@__PURE__*/ proto3.makeEnum(\n  \"meshtastic.Config.DisplayConfig.DisplayUnits\",\n  [\n    {no: 0, name: \"METRIC\"},\n    {no: 1, name: \"IMPERIAL\"},\n  ],\n);\n\n/**\n *\n * Override OLED outo detect with this if it fails.\n *\n * @generated from enum meshtastic.Config.DisplayConfig.OledType\n */\nexport const Config_DisplayConfig_OledType = /*@__PURE__*/ proto3.makeEnum(\n  \"meshtastic.Config.DisplayConfig.OledType\",\n  [\n    {no: 0, name: \"OLED_AUTO\"},\n    {no: 1, name: \"OLED_SSD1306\"},\n    {no: 2, name: \"OLED_SH1106\"},\n    {no: 3, name: \"OLED_SH1107\"},\n  ],\n);\n\n/**\n * @generated from enum meshtastic.Config.DisplayConfig.DisplayMode\n */\nexport const Config_DisplayConfig_DisplayMode = /*@__PURE__*/ proto3.makeEnum(\n  \"meshtastic.Config.DisplayConfig.DisplayMode\",\n  [\n    {no: 0, name: \"DEFAULT\"},\n    {no: 1, name: \"TWOCOLOR\"},\n    {no: 2, name: \"INVERTED\"},\n    {no: 3, name: \"COLOR\"},\n  ],\n);\n\n/**\n * @generated from enum meshtastic.Config.DisplayConfig.CompassOrientation\n */\nexport const Config_DisplayConfig_CompassOrientation = /*@__PURE__*/ proto3.makeEnum(\n  \"meshtastic.Config.DisplayConfig.CompassOrientation\",\n  [\n    {no: 0, name: \"DEGREES_0\"},\n    {no: 1, name: \"DEGREES_90\"},\n    {no: 2, name: \"DEGREES_180\"},\n    {no: 3, name: \"DEGREES_270\"},\n    {no: 4, name: \"DEGREES_0_INVERTED\"},\n    {no: 5, name: \"DEGREES_90_INVERTED\"},\n    {no: 6, name: \"DEGREES_180_INVERTED\"},\n    {no: 7, name: \"DEGREES_270_INVERTED\"},\n  ],\n);\n\n/**\n *\n * Lora Config\n *\n * @generated from message meshtastic.Config.LoRaConfig\n */\nexport const Config_LoRaConfig = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.Config.LoRaConfig\",\n  () => [\n    { no: 1, name: \"use_preset\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 2, name: \"modem_preset\", kind: \"enum\", T: proto3.getEnumType(Config_LoRaConfig_ModemPreset) },\n    { no: 3, name: \"bandwidth\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 4, name: \"spread_factor\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 5, name: \"coding_rate\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 6, name: \"frequency_offset\", kind: \"scalar\", T: 2 /* ScalarType.FLOAT */ },\n    { no: 7, name: \"region\", kind: \"enum\", T: proto3.getEnumType(Config_LoRaConfig_RegionCode) },\n    { no: 8, name: \"hop_limit\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 9, name: \"tx_enabled\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 10, name: \"tx_power\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 11, name: \"channel_num\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 12, name: \"override_duty_cycle\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 13, name: \"sx126x_rx_boosted_gain\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 14, name: \"override_frequency\", kind: \"scalar\", T: 2 /* ScalarType.FLOAT */ },\n    { no: 15, name: \"pa_fan_disabled\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 103, name: \"ignore_incoming\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */, repeated: true },\n    { no: 104, name: \"ignore_mqtt\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 105, name: \"config_ok_to_mqtt\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n  ],\n  {localName: \"Config_LoRaConfig\"},\n);\n\n/**\n * @generated from enum meshtastic.Config.LoRaConfig.RegionCode\n */\nexport const Config_LoRaConfig_RegionCode = /*@__PURE__*/ proto3.makeEnum(\n  \"meshtastic.Config.LoRaConfig.RegionCode\",\n  [\n    {no: 0, name: \"UNSET\"},\n    {no: 1, name: \"US\"},\n    {no: 2, name: \"EU_433\"},\n    {no: 3, name: \"EU_868\"},\n    {no: 4, name: \"CN\"},\n    {no: 5, name: \"JP\"},\n    {no: 6, name: \"ANZ\"},\n    {no: 7, name: \"KR\"},\n    {no: 8, name: \"TW\"},\n    {no: 9, name: \"RU\"},\n    {no: 10, name: \"IN\"},\n    {no: 11, name: \"NZ_865\"},\n    {no: 12, name: \"TH\"},\n    {no: 13, name: \"LORA_24\"},\n    {no: 14, name: \"UA_433\"},\n    {no: 15, name: \"UA_868\"},\n    {no: 16, name: \"MY_433\"},\n    {no: 17, name: \"MY_919\"},\n    {no: 18, name: \"SG_923\"},\n  ],\n);\n\n/**\n *\n * Standard predefined channel settings\n * Note: these mappings must match ModemPreset Choice in the device code.\n *\n * @generated from enum meshtastic.Config.LoRaConfig.ModemPreset\n */\nexport const Config_LoRaConfig_ModemPreset = /*@__PURE__*/ proto3.makeEnum(\n  \"meshtastic.Config.LoRaConfig.ModemPreset\",\n  [\n    {no: 0, name: \"LONG_FAST\"},\n    {no: 1, name: \"LONG_SLOW\"},\n    {no: 2, name: \"VERY_LONG_SLOW\"},\n    {no: 3, name: \"MEDIUM_SLOW\"},\n    {no: 4, name: \"MEDIUM_FAST\"},\n    {no: 5, name: \"SHORT_SLOW\"},\n    {no: 6, name: \"SHORT_FAST\"},\n    {no: 7, name: \"LONG_MODERATE\"},\n    {no: 8, name: \"SHORT_TURBO\"},\n  ],\n);\n\n/**\n * @generated from message meshtastic.Config.BluetoothConfig\n */\nexport const Config_BluetoothConfig = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.Config.BluetoothConfig\",\n  () => [\n    { no: 1, name: \"enabled\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 2, name: \"mode\", kind: \"enum\", T: proto3.getEnumType(Config_BluetoothConfig_PairingMode) },\n    { no: 3, name: \"fixed_pin\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n  ],\n  {localName: \"Config_BluetoothConfig\"},\n);\n\n/**\n * @generated from enum meshtastic.Config.BluetoothConfig.PairingMode\n */\nexport const Config_BluetoothConfig_PairingMode = /*@__PURE__*/ proto3.makeEnum(\n  \"meshtastic.Config.BluetoothConfig.PairingMode\",\n  [\n    {no: 0, name: \"RANDOM_PIN\"},\n    {no: 1, name: \"FIXED_PIN\"},\n    {no: 2, name: \"NO_PIN\"},\n  ],\n);\n\n/**\n * @generated from message meshtastic.Config.SecurityConfig\n */\nexport const Config_SecurityConfig = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.Config.SecurityConfig\",\n  () => [\n    { no: 1, name: \"public_key\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n    { no: 2, name: \"private_key\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n    { no: 3, name: \"admin_key\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */, repeated: true },\n    { no: 4, name: \"is_managed\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 5, name: \"serial_enabled\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 6, name: \"debug_log_api_enabled\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 8, name: \"admin_channel_enabled\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n  ],\n  {localName: \"Config_SecurityConfig\"},\n);\n\n/**\n *\n * Blank config request, strictly for getting the session key\n *\n * @generated from message meshtastic.Config.SessionkeyConfig\n */\nexport const Config_SessionkeyConfig = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.Config.SessionkeyConfig\",\n  [],\n  {localName: \"Config_SessionkeyConfig\"},\n);\n\n","// @generated by protoc-gen-es v1.10.0\n// @generated from file meshtastic/portnums.proto (package meshtastic, syntax proto3)\n/* eslint-disable */\n// @ts-nocheck\n\nimport { proto3 } from \"@bufbuild/protobuf\";\n\n/**\n *\n * For any new 'apps' that run on the device or via sister apps on phones/PCs they should pick and use a\n * unique 'portnum' for their application.\n * If you are making a new app using meshtastic, please send in a pull request to add your 'portnum' to this\n * master table.\n * PortNums should be assigned in the following range:\n * 0-63   Core Meshtastic use, do not use for third party apps\n * 64-127 Registered 3rd party apps, send in a pull request that adds a new entry to portnums.proto to  register your application\n * 256-511 Use one of these portnums for your private applications that you don't want to register publically\n * All other values are reserved.\n * Note: This was formerly a Type enum named 'typ' with the same id #\n * We have change to this 'portnum' based scheme for specifying app handlers for particular payloads.\n * This change is backwards compatible by treating the legacy OPAQUE/CLEAR_TEXT values identically.\n *\n * @generated from enum meshtastic.PortNum\n */\nexport const PortNum = /*@__PURE__*/ proto3.makeEnum(\n  \"meshtastic.PortNum\",\n  [\n    {no: 0, name: \"UNKNOWN_APP\"},\n    {no: 1, name: \"TEXT_MESSAGE_APP\"},\n    {no: 2, name: \"REMOTE_HARDWARE_APP\"},\n    {no: 3, name: \"POSITION_APP\"},\n    {no: 4, name: \"NODEINFO_APP\"},\n    {no: 5, name: \"ROUTING_APP\"},\n    {no: 6, name: \"ADMIN_APP\"},\n    {no: 7, name: \"TEXT_MESSAGE_COMPRESSED_APP\"},\n    {no: 8, name: \"WAYPOINT_APP\"},\n    {no: 9, name: \"AUDIO_APP\"},\n    {no: 10, name: \"DETECTION_SENSOR_APP\"},\n    {no: 32, name: \"REPLY_APP\"},\n    {no: 33, name: \"IP_TUNNEL_APP\"},\n    {no: 34, name: \"PAXCOUNTER_APP\"},\n    {no: 64, name: \"SERIAL_APP\"},\n    {no: 65, name: \"STORE_FORWARD_APP\"},\n    {no: 66, name: \"RANGE_TEST_APP\"},\n    {no: 67, name: \"TELEMETRY_APP\"},\n    {no: 68, name: \"ZPS_APP\"},\n    {no: 69, name: \"SIMULATOR_APP\"},\n    {no: 70, name: \"TRACEROUTE_APP\"},\n    {no: 71, name: \"NEIGHBORINFO_APP\"},\n    {no: 72, name: \"ATAK_PLUGIN\"},\n    {no: 73, name: \"MAP_REPORT_APP\"},\n    {no: 74, name: \"POWERSTRESS_APP\"},\n    {no: 256, name: \"PRIVATE_APP\"},\n    {no: 257, name: \"ATAK_FORWARDER\"},\n    {no: 511, name: \"MAX\"},\n  ],\n);\n\n","// @generated by protoc-gen-es v1.10.0\n// @generated from file meshtastic/telemetry.proto (package meshtastic, syntax proto3)\n/* eslint-disable */\n// @ts-nocheck\n\nimport { proto3 } from \"@bufbuild/protobuf\";\n\n/**\n *\n * Supported I2C Sensors for telemetry in Meshtastic\n *\n * @generated from enum meshtastic.TelemetrySensorType\n */\nexport const TelemetrySensorType = /*@__PURE__*/ proto3.makeEnum(\n  \"meshtastic.TelemetrySensorType\",\n  [\n    {no: 0, name: \"SENSOR_UNSET\"},\n    {no: 1, name: \"BME280\"},\n    {no: 2, name: \"BME680\"},\n    {no: 3, name: \"MCP9808\"},\n    {no: 4, name: \"INA260\"},\n    {no: 5, name: \"INA219\"},\n    {no: 6, name: \"BMP280\"},\n    {no: 7, name: \"SHTC3\"},\n    {no: 8, name: \"LPS22\"},\n    {no: 9, name: \"QMC6310\"},\n    {no: 10, name: \"QMI8658\"},\n    {no: 11, name: \"QMC5883L\"},\n    {no: 12, name: \"SHT31\"},\n    {no: 13, name: \"PMSA003I\"},\n    {no: 14, name: \"INA3221\"},\n    {no: 15, name: \"BMP085\"},\n    {no: 16, name: \"RCWL9620\"},\n    {no: 17, name: \"SHT4X\"},\n    {no: 18, name: \"VEML7700\"},\n    {no: 19, name: \"MLX90632\"},\n    {no: 20, name: \"OPT3001\"},\n    {no: 21, name: \"LTR390UV\"},\n    {no: 22, name: \"TSL25911FN\"},\n    {no: 23, name: \"AHT10\"},\n    {no: 24, name: \"DFROBOT_LARK\"},\n    {no: 25, name: \"NAU7802\"},\n    {no: 26, name: \"BMP3XX\"},\n    {no: 27, name: \"ICM20948\"},\n    {no: 28, name: \"MAX17048\"},\n    {no: 29, name: \"CUSTOM_SENSOR\"},\n  ],\n);\n\n/**\n *\n * Key native device metrics such as battery level\n *\n * @generated from message meshtastic.DeviceMetrics\n */\nexport const DeviceMetrics = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.DeviceMetrics\",\n  () => [\n    { no: 1, name: \"battery_level\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */, opt: true },\n    { no: 2, name: \"voltage\", kind: \"scalar\", T: 2 /* ScalarType.FLOAT */, opt: true },\n    { no: 3, name: \"channel_utilization\", kind: \"scalar\", T: 2 /* ScalarType.FLOAT */, opt: true },\n    { no: 4, name: \"air_util_tx\", kind: \"scalar\", T: 2 /* ScalarType.FLOAT */, opt: true },\n    { no: 5, name: \"uptime_seconds\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */, opt: true },\n  ],\n);\n\n/**\n *\n * Weather station or other environmental metrics\n *\n * @generated from message meshtastic.EnvironmentMetrics\n */\nexport const EnvironmentMetrics = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.EnvironmentMetrics\",\n  () => [\n    { no: 1, name: \"temperature\", kind: \"scalar\", T: 2 /* ScalarType.FLOAT */, opt: true },\n    { no: 2, name: \"relative_humidity\", kind: \"scalar\", T: 2 /* ScalarType.FLOAT */, opt: true },\n    { no: 3, name: \"barometric_pressure\", kind: \"scalar\", T: 2 /* ScalarType.FLOAT */, opt: true },\n    { no: 4, name: \"gas_resistance\", kind: \"scalar\", T: 2 /* ScalarType.FLOAT */, opt: true },\n    { no: 5, name: \"voltage\", kind: \"scalar\", T: 2 /* ScalarType.FLOAT */, opt: true },\n    { no: 6, name: \"current\", kind: \"scalar\", T: 2 /* ScalarType.FLOAT */, opt: true },\n    { no: 7, name: \"iaq\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */, opt: true },\n    { no: 8, name: \"distance\", kind: \"scalar\", T: 2 /* ScalarType.FLOAT */, opt: true },\n    { no: 9, name: \"lux\", kind: \"scalar\", T: 2 /* ScalarType.FLOAT */, opt: true },\n    { no: 10, name: \"white_lux\", kind: \"scalar\", T: 2 /* ScalarType.FLOAT */, opt: true },\n    { no: 11, name: \"ir_lux\", kind: \"scalar\", T: 2 /* ScalarType.FLOAT */, opt: true },\n    { no: 12, name: \"uv_lux\", kind: \"scalar\", T: 2 /* ScalarType.FLOAT */, opt: true },\n    { no: 13, name: \"wind_direction\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */, opt: true },\n    { no: 14, name: \"wind_speed\", kind: \"scalar\", T: 2 /* ScalarType.FLOAT */, opt: true },\n    { no: 15, name: \"weight\", kind: \"scalar\", T: 2 /* ScalarType.FLOAT */, opt: true },\n    { no: 16, name: \"wind_gust\", kind: \"scalar\", T: 2 /* ScalarType.FLOAT */, opt: true },\n    { no: 17, name: \"wind_lull\", kind: \"scalar\", T: 2 /* ScalarType.FLOAT */, opt: true },\n  ],\n);\n\n/**\n *\n * Power Metrics (voltage / current / etc)\n *\n * @generated from message meshtastic.PowerMetrics\n */\nexport const PowerMetrics = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.PowerMetrics\",\n  () => [\n    { no: 1, name: \"ch1_voltage\", kind: \"scalar\", T: 2 /* ScalarType.FLOAT */, opt: true },\n    { no: 2, name: \"ch1_current\", kind: \"scalar\", T: 2 /* ScalarType.FLOAT */, opt: true },\n    { no: 3, name: \"ch2_voltage\", kind: \"scalar\", T: 2 /* ScalarType.FLOAT */, opt: true },\n    { no: 4, name: \"ch2_current\", kind: \"scalar\", T: 2 /* ScalarType.FLOAT */, opt: true },\n    { no: 5, name: \"ch3_voltage\", kind: \"scalar\", T: 2 /* ScalarType.FLOAT */, opt: true },\n    { no: 6, name: \"ch3_current\", kind: \"scalar\", T: 2 /* ScalarType.FLOAT */, opt: true },\n  ],\n);\n\n/**\n *\n * Air quality metrics\n *\n * @generated from message meshtastic.AirQualityMetrics\n */\nexport const AirQualityMetrics = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.AirQualityMetrics\",\n  () => [\n    { no: 1, name: \"pm10_standard\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */, opt: true },\n    { no: 2, name: \"pm25_standard\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */, opt: true },\n    { no: 3, name: \"pm100_standard\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */, opt: true },\n    { no: 4, name: \"pm10_environmental\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */, opt: true },\n    { no: 5, name: \"pm25_environmental\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */, opt: true },\n    { no: 6, name: \"pm100_environmental\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */, opt: true },\n    { no: 7, name: \"particles_03um\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */, opt: true },\n    { no: 8, name: \"particles_05um\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */, opt: true },\n    { no: 9, name: \"particles_10um\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */, opt: true },\n    { no: 10, name: \"particles_25um\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */, opt: true },\n    { no: 11, name: \"particles_50um\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */, opt: true },\n    { no: 12, name: \"particles_100um\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */, opt: true },\n  ],\n);\n\n/**\n *\n * Local device mesh statistics\n *\n * @generated from message meshtastic.LocalStats\n */\nexport const LocalStats = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.LocalStats\",\n  () => [\n    { no: 1, name: \"uptime_seconds\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 2, name: \"channel_utilization\", kind: \"scalar\", T: 2 /* ScalarType.FLOAT */ },\n    { no: 3, name: \"air_util_tx\", kind: \"scalar\", T: 2 /* ScalarType.FLOAT */ },\n    { no: 4, name: \"num_packets_tx\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 5, name: \"num_packets_rx\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 6, name: \"num_packets_rx_bad\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 7, name: \"num_online_nodes\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 8, name: \"num_total_nodes\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n  ],\n);\n\n/**\n *\n * Types of Measurements the telemetry module is equipped to handle\n *\n * @generated from message meshtastic.Telemetry\n */\nexport const Telemetry = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.Telemetry\",\n  () => [\n    { no: 1, name: \"time\", kind: \"scalar\", T: 7 /* ScalarType.FIXED32 */ },\n    { no: 2, name: \"device_metrics\", kind: \"message\", T: DeviceMetrics, oneof: \"variant\" },\n    { no: 3, name: \"environment_metrics\", kind: \"message\", T: EnvironmentMetrics, oneof: \"variant\" },\n    { no: 4, name: \"air_quality_metrics\", kind: \"message\", T: AirQualityMetrics, oneof: \"variant\" },\n    { no: 5, name: \"power_metrics\", kind: \"message\", T: PowerMetrics, oneof: \"variant\" },\n    { no: 6, name: \"local_stats\", kind: \"message\", T: LocalStats, oneof: \"variant\" },\n  ],\n);\n\n/**\n *\n * NAU7802 Telemetry configuration, for saving to flash\n *\n * @generated from message meshtastic.Nau7802Config\n */\nexport const Nau7802Config = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.Nau7802Config\",\n  () => [\n    { no: 1, name: \"zeroOffset\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 2, name: \"calibrationFactor\", kind: \"scalar\", T: 2 /* ScalarType.FLOAT */ },\n  ],\n);\n\n","// @generated by protoc-gen-es v1.10.0\n// @generated from file meshtastic/module_config.proto (package meshtastic, syntax proto3)\n/* eslint-disable */\n// @ts-nocheck\n\nimport { proto3 } from \"@bufbuild/protobuf\";\n\n/**\n * @generated from enum meshtastic.RemoteHardwarePinType\n */\nexport const RemoteHardwarePinType = /*@__PURE__*/ proto3.makeEnum(\n  \"meshtastic.RemoteHardwarePinType\",\n  [\n    {no: 0, name: \"UNKNOWN\"},\n    {no: 1, name: \"DIGITAL_READ\"},\n    {no: 2, name: \"DIGITAL_WRITE\"},\n  ],\n);\n\n/**\n *\n * Module Config\n *\n * @generated from message meshtastic.ModuleConfig\n */\nexport const ModuleConfig = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.ModuleConfig\",\n  () => [\n    { no: 1, name: \"mqtt\", kind: \"message\", T: ModuleConfig_MQTTConfig, oneof: \"payload_variant\" },\n    { no: 2, name: \"serial\", kind: \"message\", T: ModuleConfig_SerialConfig, oneof: \"payload_variant\" },\n    { no: 3, name: \"external_notification\", kind: \"message\", T: ModuleConfig_ExternalNotificationConfig, oneof: \"payload_variant\" },\n    { no: 4, name: \"store_forward\", kind: \"message\", T: ModuleConfig_StoreForwardConfig, oneof: \"payload_variant\" },\n    { no: 5, name: \"range_test\", kind: \"message\", T: ModuleConfig_RangeTestConfig, oneof: \"payload_variant\" },\n    { no: 6, name: \"telemetry\", kind: \"message\", T: ModuleConfig_TelemetryConfig, oneof: \"payload_variant\" },\n    { no: 7, name: \"canned_message\", kind: \"message\", T: ModuleConfig_CannedMessageConfig, oneof: \"payload_variant\" },\n    { no: 8, name: \"audio\", kind: \"message\", T: ModuleConfig_AudioConfig, oneof: \"payload_variant\" },\n    { no: 9, name: \"remote_hardware\", kind: \"message\", T: ModuleConfig_RemoteHardwareConfig, oneof: \"payload_variant\" },\n    { no: 10, name: \"neighbor_info\", kind: \"message\", T: ModuleConfig_NeighborInfoConfig, oneof: \"payload_variant\" },\n    { no: 11, name: \"ambient_lighting\", kind: \"message\", T: ModuleConfig_AmbientLightingConfig, oneof: \"payload_variant\" },\n    { no: 12, name: \"detection_sensor\", kind: \"message\", T: ModuleConfig_DetectionSensorConfig, oneof: \"payload_variant\" },\n    { no: 13, name: \"paxcounter\", kind: \"message\", T: ModuleConfig_PaxcounterConfig, oneof: \"payload_variant\" },\n  ],\n);\n\n/**\n *\n * MQTT Client Config\n *\n * @generated from message meshtastic.ModuleConfig.MQTTConfig\n */\nexport const ModuleConfig_MQTTConfig = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.ModuleConfig.MQTTConfig\",\n  () => [\n    { no: 1, name: \"enabled\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 2, name: \"address\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"username\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 4, name: \"password\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 5, name: \"encryption_enabled\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 6, name: \"json_enabled\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 7, name: \"tls_enabled\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 8, name: \"root\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 9, name: \"proxy_to_client_enabled\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 10, name: \"map_reporting_enabled\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 11, name: \"map_report_settings\", kind: \"message\", T: ModuleConfig_MapReportSettings },\n  ],\n  {localName: \"ModuleConfig_MQTTConfig\"},\n);\n\n/**\n *\n * Settings for reporting unencrypted information about our node to a map via MQTT\n *\n * @generated from message meshtastic.ModuleConfig.MapReportSettings\n */\nexport const ModuleConfig_MapReportSettings = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.ModuleConfig.MapReportSettings\",\n  () => [\n    { no: 1, name: \"publish_interval_secs\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 2, name: \"position_precision\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n  ],\n  {localName: \"ModuleConfig_MapReportSettings\"},\n);\n\n/**\n *\n * RemoteHardwareModule Config\n *\n * @generated from message meshtastic.ModuleConfig.RemoteHardwareConfig\n */\nexport const ModuleConfig_RemoteHardwareConfig = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.ModuleConfig.RemoteHardwareConfig\",\n  () => [\n    { no: 1, name: \"enabled\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 2, name: \"allow_undefined_pin_access\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 3, name: \"available_pins\", kind: \"message\", T: RemoteHardwarePin, repeated: true },\n  ],\n  {localName: \"ModuleConfig_RemoteHardwareConfig\"},\n);\n\n/**\n *\n * NeighborInfoModule Config\n *\n * @generated from message meshtastic.ModuleConfig.NeighborInfoConfig\n */\nexport const ModuleConfig_NeighborInfoConfig = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.ModuleConfig.NeighborInfoConfig\",\n  () => [\n    { no: 1, name: \"enabled\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 2, name: \"update_interval\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n  ],\n  {localName: \"ModuleConfig_NeighborInfoConfig\"},\n);\n\n/**\n *\n * Detection Sensor Module Config\n *\n * @generated from message meshtastic.ModuleConfig.DetectionSensorConfig\n */\nexport const ModuleConfig_DetectionSensorConfig = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.ModuleConfig.DetectionSensorConfig\",\n  () => [\n    { no: 1, name: \"enabled\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 2, name: \"minimum_broadcast_secs\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 3, name: \"state_broadcast_secs\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 4, name: \"send_bell\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 5, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 6, name: \"monitor_pin\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 7, name: \"detection_triggered_high\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 8, name: \"use_pullup\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n  ],\n  {localName: \"ModuleConfig_DetectionSensorConfig\"},\n);\n\n/**\n *\n * Audio Config for codec2 voice\n *\n * @generated from message meshtastic.ModuleConfig.AudioConfig\n */\nexport const ModuleConfig_AudioConfig = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.ModuleConfig.AudioConfig\",\n  () => [\n    { no: 1, name: \"codec2_enabled\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 2, name: \"ptt_pin\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 3, name: \"bitrate\", kind: \"enum\", T: proto3.getEnumType(ModuleConfig_AudioConfig_Audio_Baud) },\n    { no: 4, name: \"i2s_ws\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 5, name: \"i2s_sd\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 6, name: \"i2s_din\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 7, name: \"i2s_sck\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n  ],\n  {localName: \"ModuleConfig_AudioConfig\"},\n);\n\n/**\n *\n * Baudrate for codec2 voice\n *\n * @generated from enum meshtastic.ModuleConfig.AudioConfig.Audio_Baud\n */\nexport const ModuleConfig_AudioConfig_Audio_Baud = /*@__PURE__*/ proto3.makeEnum(\n  \"meshtastic.ModuleConfig.AudioConfig.Audio_Baud\",\n  [\n    {no: 0, name: \"CODEC2_DEFAULT\"},\n    {no: 1, name: \"CODEC2_3200\"},\n    {no: 2, name: \"CODEC2_2400\"},\n    {no: 3, name: \"CODEC2_1600\"},\n    {no: 4, name: \"CODEC2_1400\"},\n    {no: 5, name: \"CODEC2_1300\"},\n    {no: 6, name: \"CODEC2_1200\"},\n    {no: 7, name: \"CODEC2_700\"},\n    {no: 8, name: \"CODEC2_700B\"},\n  ],\n);\n\n/**\n *\n * Config for the Paxcounter Module\n *\n * @generated from message meshtastic.ModuleConfig.PaxcounterConfig\n */\nexport const ModuleConfig_PaxcounterConfig = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.ModuleConfig.PaxcounterConfig\",\n  () => [\n    { no: 1, name: \"enabled\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 2, name: \"paxcounter_update_interval\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 3, name: \"wifi_threshold\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 4, name: \"ble_threshold\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n  ],\n  {localName: \"ModuleConfig_PaxcounterConfig\"},\n);\n\n/**\n *\n * Serial Config\n *\n * @generated from message meshtastic.ModuleConfig.SerialConfig\n */\nexport const ModuleConfig_SerialConfig = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.ModuleConfig.SerialConfig\",\n  () => [\n    { no: 1, name: \"enabled\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 2, name: \"echo\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 3, name: \"rxd\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 4, name: \"txd\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 5, name: \"baud\", kind: \"enum\", T: proto3.getEnumType(ModuleConfig_SerialConfig_Serial_Baud) },\n    { no: 6, name: \"timeout\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 7, name: \"mode\", kind: \"enum\", T: proto3.getEnumType(ModuleConfig_SerialConfig_Serial_Mode) },\n    { no: 8, name: \"override_console_serial_port\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n  ],\n  {localName: \"ModuleConfig_SerialConfig\"},\n);\n\n/**\n *\n * TODO: REPLACE\n *\n * @generated from enum meshtastic.ModuleConfig.SerialConfig.Serial_Baud\n */\nexport const ModuleConfig_SerialConfig_Serial_Baud = /*@__PURE__*/ proto3.makeEnum(\n  \"meshtastic.ModuleConfig.SerialConfig.Serial_Baud\",\n  [\n    {no: 0, name: \"BAUD_DEFAULT\"},\n    {no: 1, name: \"BAUD_110\"},\n    {no: 2, name: \"BAUD_300\"},\n    {no: 3, name: \"BAUD_600\"},\n    {no: 4, name: \"BAUD_1200\"},\n    {no: 5, name: \"BAUD_2400\"},\n    {no: 6, name: \"BAUD_4800\"},\n    {no: 7, name: \"BAUD_9600\"},\n    {no: 8, name: \"BAUD_19200\"},\n    {no: 9, name: \"BAUD_38400\"},\n    {no: 10, name: \"BAUD_57600\"},\n    {no: 11, name: \"BAUD_115200\"},\n    {no: 12, name: \"BAUD_230400\"},\n    {no: 13, name: \"BAUD_460800\"},\n    {no: 14, name: \"BAUD_576000\"},\n    {no: 15, name: \"BAUD_921600\"},\n  ],\n);\n\n/**\n *\n * TODO: REPLACE\n *\n * @generated from enum meshtastic.ModuleConfig.SerialConfig.Serial_Mode\n */\nexport const ModuleConfig_SerialConfig_Serial_Mode = /*@__PURE__*/ proto3.makeEnum(\n  \"meshtastic.ModuleConfig.SerialConfig.Serial_Mode\",\n  [\n    {no: 0, name: \"DEFAULT\"},\n    {no: 1, name: \"SIMPLE\"},\n    {no: 2, name: \"PROTO\"},\n    {no: 3, name: \"TEXTMSG\"},\n    {no: 4, name: \"NMEA\"},\n    {no: 5, name: \"CALTOPO\"},\n    {no: 6, name: \"WS85\"},\n  ],\n);\n\n/**\n *\n * External Notifications Config\n *\n * @generated from message meshtastic.ModuleConfig.ExternalNotificationConfig\n */\nexport const ModuleConfig_ExternalNotificationConfig = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.ModuleConfig.ExternalNotificationConfig\",\n  () => [\n    { no: 1, name: \"enabled\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 2, name: \"output_ms\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 3, name: \"output\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 8, name: \"output_vibra\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 9, name: \"output_buzzer\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 4, name: \"active\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 5, name: \"alert_message\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 10, name: \"alert_message_vibra\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 11, name: \"alert_message_buzzer\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 6, name: \"alert_bell\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 12, name: \"alert_bell_vibra\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 13, name: \"alert_bell_buzzer\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 7, name: \"use_pwm\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 14, name: \"nag_timeout\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 15, name: \"use_i2s_as_buzzer\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n  ],\n  {localName: \"ModuleConfig_ExternalNotificationConfig\"},\n);\n\n/**\n *\n * Store and Forward Module Config\n *\n * @generated from message meshtastic.ModuleConfig.StoreForwardConfig\n */\nexport const ModuleConfig_StoreForwardConfig = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.ModuleConfig.StoreForwardConfig\",\n  () => [\n    { no: 1, name: \"enabled\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 2, name: \"heartbeat\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 3, name: \"records\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 4, name: \"history_return_max\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 5, name: \"history_return_window\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 6, name: \"is_server\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n  ],\n  {localName: \"ModuleConfig_StoreForwardConfig\"},\n);\n\n/**\n *\n * Preferences for the RangeTestModule\n *\n * @generated from message meshtastic.ModuleConfig.RangeTestConfig\n */\nexport const ModuleConfig_RangeTestConfig = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.ModuleConfig.RangeTestConfig\",\n  () => [\n    { no: 1, name: \"enabled\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 2, name: \"sender\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 3, name: \"save\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n  ],\n  {localName: \"ModuleConfig_RangeTestConfig\"},\n);\n\n/**\n *\n * Configuration for both device and environment metrics\n *\n * @generated from message meshtastic.ModuleConfig.TelemetryConfig\n */\nexport const ModuleConfig_TelemetryConfig = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.ModuleConfig.TelemetryConfig\",\n  () => [\n    { no: 1, name: \"device_update_interval\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 2, name: \"environment_update_interval\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 3, name: \"environment_measurement_enabled\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 4, name: \"environment_screen_enabled\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 5, name: \"environment_display_fahrenheit\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 6, name: \"air_quality_enabled\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 7, name: \"air_quality_interval\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 8, name: \"power_measurement_enabled\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 9, name: \"power_update_interval\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 10, name: \"power_screen_enabled\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n  ],\n  {localName: \"ModuleConfig_TelemetryConfig\"},\n);\n\n/**\n *\n * TODO: REPLACE\n *\n * @generated from message meshtastic.ModuleConfig.CannedMessageConfig\n */\nexport const ModuleConfig_CannedMessageConfig = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.ModuleConfig.CannedMessageConfig\",\n  () => [\n    { no: 1, name: \"rotary1_enabled\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 2, name: \"inputbroker_pin_a\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 3, name: \"inputbroker_pin_b\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 4, name: \"inputbroker_pin_press\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 5, name: \"inputbroker_event_cw\", kind: \"enum\", T: proto3.getEnumType(ModuleConfig_CannedMessageConfig_InputEventChar) },\n    { no: 6, name: \"inputbroker_event_ccw\", kind: \"enum\", T: proto3.getEnumType(ModuleConfig_CannedMessageConfig_InputEventChar) },\n    { no: 7, name: \"inputbroker_event_press\", kind: \"enum\", T: proto3.getEnumType(ModuleConfig_CannedMessageConfig_InputEventChar) },\n    { no: 8, name: \"updown1_enabled\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 9, name: \"enabled\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 10, name: \"allow_input_source\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 11, name: \"send_bell\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n  ],\n  {localName: \"ModuleConfig_CannedMessageConfig\"},\n);\n\n/**\n *\n * TODO: REPLACE\n *\n * @generated from enum meshtastic.ModuleConfig.CannedMessageConfig.InputEventChar\n */\nexport const ModuleConfig_CannedMessageConfig_InputEventChar = /*@__PURE__*/ proto3.makeEnum(\n  \"meshtastic.ModuleConfig.CannedMessageConfig.InputEventChar\",\n  [\n    {no: 0, name: \"NONE\"},\n    {no: 17, name: \"UP\"},\n    {no: 18, name: \"DOWN\"},\n    {no: 19, name: \"LEFT\"},\n    {no: 20, name: \"RIGHT\"},\n    {no: 10, name: \"SELECT\"},\n    {no: 27, name: \"BACK\"},\n    {no: 24, name: \"CANCEL\"},\n  ],\n);\n\n/**\n *\n * Ambient Lighting Module - Settings for control of onboard LEDs to allow users to adjust the brightness levels and respective color levels.\n * Initially created for the RAK14001 RGB LED module.\n *\n * @generated from message meshtastic.ModuleConfig.AmbientLightingConfig\n */\nexport const ModuleConfig_AmbientLightingConfig = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.ModuleConfig.AmbientLightingConfig\",\n  () => [\n    { no: 1, name: \"led_state\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 2, name: \"current\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 3, name: \"red\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 4, name: \"green\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 5, name: \"blue\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n  ],\n  {localName: \"ModuleConfig_AmbientLightingConfig\"},\n);\n\n/**\n *\n * A GPIO pin definition for remote hardware module\n *\n * @generated from message meshtastic.RemoteHardwarePin\n */\nexport const RemoteHardwarePin = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.RemoteHardwarePin\",\n  () => [\n    { no: 1, name: \"gpio_pin\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 2, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"type\", kind: \"enum\", T: proto3.getEnumType(RemoteHardwarePinType) },\n  ],\n);\n\n","// @generated by protoc-gen-es v1.10.0\n// @generated from file meshtastic/xmodem.proto (package meshtastic, syntax proto3)\n/* eslint-disable */\n// @ts-nocheck\n\nimport { proto3 } from \"@bufbuild/protobuf\";\n\n/**\n * @generated from message meshtastic.XModem\n */\nexport const XModem = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.XModem\",\n  () => [\n    { no: 1, name: \"control\", kind: \"enum\", T: proto3.getEnumType(XModem_Control) },\n    { no: 2, name: \"seq\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 3, name: \"crc16\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 4, name: \"buffer\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n  ],\n);\n\n/**\n * @generated from enum meshtastic.XModem.Control\n */\nexport const XModem_Control = /*@__PURE__*/ proto3.makeEnum(\n  \"meshtastic.XModem.Control\",\n  [\n    {no: 0, name: \"NUL\"},\n    {no: 1, name: \"SOH\"},\n    {no: 2, name: \"STX\"},\n    {no: 4, name: \"EOT\"},\n    {no: 6, name: \"ACK\"},\n    {no: 21, name: \"NAK\"},\n    {no: 24, name: \"CAN\"},\n    {no: 26, name: \"CTRLZ\"},\n  ],\n);\n\n","// @generated by protoc-gen-es v1.10.0\n// @generated from file meshtastic/connection_status.proto (package meshtastic, syntax proto3)\n/* eslint-disable */\n// @ts-nocheck\n\nimport { proto3 } from \"@bufbuild/protobuf\";\n\n/**\n * @generated from message meshtastic.DeviceConnectionStatus\n */\nexport const DeviceConnectionStatus = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.DeviceConnectionStatus\",\n  () => [\n    { no: 1, name: \"wifi\", kind: \"message\", T: WifiConnectionStatus, opt: true },\n    { no: 2, name: \"ethernet\", kind: \"message\", T: EthernetConnectionStatus, opt: true },\n    { no: 3, name: \"bluetooth\", kind: \"message\", T: BluetoothConnectionStatus, opt: true },\n    { no: 4, name: \"serial\", kind: \"message\", T: SerialConnectionStatus, opt: true },\n  ],\n);\n\n/**\n *\n * WiFi connection status\n *\n * @generated from message meshtastic.WifiConnectionStatus\n */\nexport const WifiConnectionStatus = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.WifiConnectionStatus\",\n  () => [\n    { no: 1, name: \"status\", kind: \"message\", T: NetworkConnectionStatus },\n    { no: 2, name: \"ssid\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"rssi\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n  ],\n);\n\n/**\n *\n * Ethernet connection status\n *\n * @generated from message meshtastic.EthernetConnectionStatus\n */\nexport const EthernetConnectionStatus = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.EthernetConnectionStatus\",\n  () => [\n    { no: 1, name: \"status\", kind: \"message\", T: NetworkConnectionStatus },\n  ],\n);\n\n/**\n *\n * Ethernet or WiFi connection status\n *\n * @generated from message meshtastic.NetworkConnectionStatus\n */\nexport const NetworkConnectionStatus = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.NetworkConnectionStatus\",\n  () => [\n    { no: 1, name: \"ip_address\", kind: \"scalar\", T: 7 /* ScalarType.FIXED32 */ },\n    { no: 2, name: \"is_connected\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 3, name: \"is_mqtt_connected\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 4, name: \"is_syslog_connected\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n  ],\n);\n\n/**\n *\n * Bluetooth connection status\n *\n * @generated from message meshtastic.BluetoothConnectionStatus\n */\nexport const BluetoothConnectionStatus = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.BluetoothConnectionStatus\",\n  () => [\n    { no: 1, name: \"pin\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 2, name: \"rssi\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 3, name: \"is_connected\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n  ],\n);\n\n/**\n *\n * Serial connection status\n *\n * @generated from message meshtastic.SerialConnectionStatus\n */\nexport const SerialConnectionStatus = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.SerialConnectionStatus\",\n  () => [\n    { no: 1, name: \"baud\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 2, name: \"is_connected\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n  ],\n);\n\n","// @generated by protoc-gen-es v1.10.0\n// @generated from file meshtastic/apponly.proto (package meshtastic, syntax proto3)\n/* eslint-disable */\n// @ts-nocheck\n\nimport { proto3 } from \"@bufbuild/protobuf\";\nimport { ChannelSettings } from \"./channel_pb.js\";\nimport { Config_LoRaConfig } from \"./config_pb.js\";\n\n/**\n *\n * This is the most compact possible representation for a set of channels.\n * It includes only one PRIMARY channel (which must be first) and\n * any SECONDARY channels.\n * No DISABLED channels are included.\n * This abstraction is used only on the the 'app side' of the world (ie python, javascript and android etc) to show a group of Channels as a (long) URL\n *\n * @generated from message meshtastic.ChannelSet\n */\nexport const ChannelSet = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.ChannelSet\",\n  () => [\n    { no: 1, name: \"settings\", kind: \"message\", T: ChannelSettings, repeated: true },\n    { no: 2, name: \"lora_config\", kind: \"message\", T: Config_LoRaConfig },\n  ],\n);\n\n","// @generated by protoc-gen-es v1.10.0\n// @generated from file meshtastic/cannedmessages.proto (package meshtastic, syntax proto3)\n/* eslint-disable */\n// @ts-nocheck\n\nimport { proto3 } from \"@bufbuild/protobuf\";\n\n/**\n *\n * Canned message module configuration.\n *\n * @generated from message meshtastic.CannedMessageModuleConfig\n */\nexport const CannedMessageModuleConfig = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.CannedMessageModuleConfig\",\n  () => [\n    { no: 1, name: \"messages\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ],\n);\n\n","// @generated by protoc-gen-es v1.10.0\n// @generated from file meshtastic/clientonly.proto (package meshtastic, syntax proto3)\n/* eslint-disable */\n// @ts-nocheck\n\nimport { proto3 } from \"@bufbuild/protobuf\";\nimport { LocalConfig, LocalModuleConfig } from \"./localonly_pb.js\";\n\n/**\n *\n * This abstraction is used to contain any configuration for provisioning a node on any client.\n * It is useful for importing and exporting configurations.\n *\n * @generated from message meshtastic.DeviceProfile\n */\nexport const DeviceProfile = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.DeviceProfile\",\n  () => [\n    { no: 1, name: \"long_name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 2, name: \"short_name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 3, name: \"channel_url\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 4, name: \"config\", kind: \"message\", T: LocalConfig, opt: true },\n    { no: 5, name: \"module_config\", kind: \"message\", T: LocalModuleConfig, opt: true },\n  ],\n);\n\n","// @generated by protoc-gen-es v1.10.0\n// @generated from file meshtastic/localonly.proto (package meshtastic, syntax proto3)\n/* eslint-disable */\n// @ts-nocheck\n\nimport { proto3 } from \"@bufbuild/protobuf\";\nimport { Config_BluetoothConfig, Config_DeviceConfig, Config_DisplayConfig, Config_LoRaConfig, Config_NetworkConfig, Config_PositionConfig, Config_PowerConfig, Config_SecurityConfig } from \"./config_pb.js\";\nimport { ModuleConfig_AmbientLightingConfig, ModuleConfig_AudioConfig, ModuleConfig_CannedMessageConfig, ModuleConfig_DetectionSensorConfig, ModuleConfig_ExternalNotificationConfig, ModuleConfig_MQTTConfig, ModuleConfig_NeighborInfoConfig, ModuleConfig_PaxcounterConfig, ModuleConfig_RangeTestConfig, ModuleConfig_RemoteHardwareConfig, ModuleConfig_SerialConfig, ModuleConfig_StoreForwardConfig, ModuleConfig_TelemetryConfig } from \"./module_config_pb.js\";\n\n/**\n * @generated from message meshtastic.LocalConfig\n */\nexport const LocalConfig = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.LocalConfig\",\n  () => [\n    { no: 1, name: \"device\", kind: \"message\", T: Config_DeviceConfig },\n    { no: 2, name: \"position\", kind: \"message\", T: Config_PositionConfig },\n    { no: 3, name: \"power\", kind: \"message\", T: Config_PowerConfig },\n    { no: 4, name: \"network\", kind: \"message\", T: Config_NetworkConfig },\n    { no: 5, name: \"display\", kind: \"message\", T: Config_DisplayConfig },\n    { no: 6, name: \"lora\", kind: \"message\", T: Config_LoRaConfig },\n    { no: 7, name: \"bluetooth\", kind: \"message\", T: Config_BluetoothConfig },\n    { no: 8, name: \"version\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 9, name: \"security\", kind: \"message\", T: Config_SecurityConfig },\n  ],\n);\n\n/**\n * @generated from message meshtastic.LocalModuleConfig\n */\nexport const LocalModuleConfig = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.LocalModuleConfig\",\n  () => [\n    { no: 1, name: \"mqtt\", kind: \"message\", T: ModuleConfig_MQTTConfig },\n    { no: 2, name: \"serial\", kind: \"message\", T: ModuleConfig_SerialConfig },\n    { no: 3, name: \"external_notification\", kind: \"message\", T: ModuleConfig_ExternalNotificationConfig },\n    { no: 4, name: \"store_forward\", kind: \"message\", T: ModuleConfig_StoreForwardConfig },\n    { no: 5, name: \"range_test\", kind: \"message\", T: ModuleConfig_RangeTestConfig },\n    { no: 6, name: \"telemetry\", kind: \"message\", T: ModuleConfig_TelemetryConfig },\n    { no: 7, name: \"canned_message\", kind: \"message\", T: ModuleConfig_CannedMessageConfig },\n    { no: 9, name: \"audio\", kind: \"message\", T: ModuleConfig_AudioConfig },\n    { no: 10, name: \"remote_hardware\", kind: \"message\", T: ModuleConfig_RemoteHardwareConfig },\n    { no: 11, name: \"neighbor_info\", kind: \"message\", T: ModuleConfig_NeighborInfoConfig },\n    { no: 12, name: \"ambient_lighting\", kind: \"message\", T: ModuleConfig_AmbientLightingConfig },\n    { no: 13, name: \"detection_sensor\", kind: \"message\", T: ModuleConfig_DetectionSensorConfig },\n    { no: 14, name: \"paxcounter\", kind: \"message\", T: ModuleConfig_PaxcounterConfig },\n    { no: 8, name: \"version\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n  ],\n);\n\n","// @generated by protoc-gen-es v1.10.0\n// @generated from file meshtastic/deviceonly.proto (package meshtastic, syntax proto3)\n/* eslint-disable */\n// @ts-nocheck\n\nimport { proto3 } from \"@bufbuild/protobuf\";\nimport { HardwareModel, MeshPacket, MyNodeInfo, NodeRemoteHardwarePin, Position_LocSource, User } from \"./mesh_pb.js\";\nimport { Config_DeviceConfig_Role } from \"./config_pb.js\";\nimport { DeviceMetrics } from \"./telemetry_pb.js\";\nimport { Channel } from \"./channel_pb.js\";\nimport { LocalConfig, LocalModuleConfig } from \"./localonly_pb.js\";\n\n/**\n *\n * Font sizes for the device screen\n *\n * @generated from enum meshtastic.ScreenFonts\n */\nexport const ScreenFonts = /*@__PURE__*/ proto3.makeEnum(\n  \"meshtastic.ScreenFonts\",\n  [\n    {no: 0, name: \"FONT_SMALL\"},\n    {no: 1, name: \"FONT_MEDIUM\"},\n    {no: 2, name: \"FONT_LARGE\"},\n  ],\n);\n\n/**\n *\n * Position with static location information only for NodeDBLite\n *\n * @generated from message meshtastic.PositionLite\n */\nexport const PositionLite = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.PositionLite\",\n  () => [\n    { no: 1, name: \"latitude_i\", kind: \"scalar\", T: 15 /* ScalarType.SFIXED32 */ },\n    { no: 2, name: \"longitude_i\", kind: \"scalar\", T: 15 /* ScalarType.SFIXED32 */ },\n    { no: 3, name: \"altitude\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 4, name: \"time\", kind: \"scalar\", T: 7 /* ScalarType.FIXED32 */ },\n    { no: 5, name: \"location_source\", kind: \"enum\", T: proto3.getEnumType(Position_LocSource) },\n  ],\n);\n\n/**\n * @generated from message meshtastic.UserLite\n */\nexport const UserLite = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.UserLite\",\n  () => [\n    { no: 1, name: \"macaddr\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n    { no: 2, name: \"long_name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"short_name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 4, name: \"hw_model\", kind: \"enum\", T: proto3.getEnumType(HardwareModel) },\n    { no: 5, name: \"is_licensed\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 6, name: \"role\", kind: \"enum\", T: proto3.getEnumType(Config_DeviceConfig_Role) },\n    { no: 7, name: \"public_key\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n  ],\n);\n\n/**\n * @generated from message meshtastic.NodeInfoLite\n */\nexport const NodeInfoLite = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.NodeInfoLite\",\n  () => [\n    { no: 1, name: \"num\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 2, name: \"user\", kind: \"message\", T: UserLite },\n    { no: 3, name: \"position\", kind: \"message\", T: PositionLite },\n    { no: 4, name: \"snr\", kind: \"scalar\", T: 2 /* ScalarType.FLOAT */ },\n    { no: 5, name: \"last_heard\", kind: \"scalar\", T: 7 /* ScalarType.FIXED32 */ },\n    { no: 6, name: \"device_metrics\", kind: \"message\", T: DeviceMetrics },\n    { no: 7, name: \"channel\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 8, name: \"via_mqtt\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 9, name: \"hops_away\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 10, name: \"is_favorite\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n  ],\n);\n\n/**\n *\n * This message is never sent over the wire, but it is used for serializing DB\n * state to flash in the device code\n * FIXME, since we write this each time we enter deep sleep (and have infinite\n * flash) it would be better to use some sort of append only data structure for\n * the receive queue and use the preferences store for the other stuff\n *\n * @generated from message meshtastic.DeviceState\n */\nexport const DeviceState = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.DeviceState\",\n  () => [\n    { no: 2, name: \"my_node\", kind: \"message\", T: MyNodeInfo },\n    { no: 3, name: \"owner\", kind: \"message\", T: User },\n    { no: 5, name: \"receive_queue\", kind: \"message\", T: MeshPacket, repeated: true },\n    { no: 8, name: \"version\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 7, name: \"rx_text_message\", kind: \"message\", T: MeshPacket },\n    { no: 9, name: \"no_save\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 11, name: \"did_gps_reset\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 12, name: \"rx_waypoint\", kind: \"message\", T: MeshPacket },\n    { no: 13, name: \"node_remote_hardware_pins\", kind: \"message\", T: NodeRemoteHardwarePin, repeated: true },\n    { no: 14, name: \"node_db_lite\", kind: \"message\", T: NodeInfoLite, repeated: true },\n  ],\n);\n\n/**\n *\n * The on-disk saved channels\n *\n * @generated from message meshtastic.ChannelFile\n */\nexport const ChannelFile = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.ChannelFile\",\n  () => [\n    { no: 1, name: \"channels\", kind: \"message\", T: Channel, repeated: true },\n    { no: 2, name: \"version\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n  ],\n);\n\n/**\n *\n * This can be used for customizing the firmware distribution. If populated,\n * show a secondary bootup screen with custom logo and text for 2.5 seconds.\n *\n * @generated from message meshtastic.OEMStore\n */\nexport const OEMStore = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.OEMStore\",\n  () => [\n    { no: 1, name: \"oem_icon_width\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 2, name: \"oem_icon_height\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 3, name: \"oem_icon_bits\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n    { no: 4, name: \"oem_font\", kind: \"enum\", T: proto3.getEnumType(ScreenFonts) },\n    { no: 5, name: \"oem_text\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 6, name: \"oem_aes_key\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n    { no: 7, name: \"oem_local_config\", kind: \"message\", T: LocalConfig },\n    { no: 8, name: \"oem_local_module_config\", kind: \"message\", T: LocalModuleConfig },\n  ],\n);\n\n","// @generated by protoc-gen-es v1.10.0\n// @generated from file meshtastic/mqtt.proto (package meshtastic, syntax proto3)\n/* eslint-disable */\n// @ts-nocheck\n\nimport { proto3 } from \"@bufbuild/protobuf\";\nimport { HardwareModel, MeshPacket } from \"./mesh_pb.js\";\nimport { Config_DeviceConfig_Role, Config_LoRaConfig_ModemPreset, Config_LoRaConfig_RegionCode } from \"./config_pb.js\";\n\n/**\n *\n * This message wraps a MeshPacket with extra metadata about the sender and how it arrived.\n *\n * @generated from message meshtastic.ServiceEnvelope\n */\nexport const ServiceEnvelope = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.ServiceEnvelope\",\n  () => [\n    { no: 1, name: \"packet\", kind: \"message\", T: MeshPacket },\n    { no: 2, name: \"channel_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"gateway_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ],\n);\n\n/**\n *\n * Information about a node intended to be reported unencrypted to a map using MQTT.\n *\n * @generated from message meshtastic.MapReport\n */\nexport const MapReport = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.MapReport\",\n  () => [\n    { no: 1, name: \"long_name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"short_name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"role\", kind: \"enum\", T: proto3.getEnumType(Config_DeviceConfig_Role) },\n    { no: 4, name: \"hw_model\", kind: \"enum\", T: proto3.getEnumType(HardwareModel) },\n    { no: 5, name: \"firmware_version\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 6, name: \"region\", kind: \"enum\", T: proto3.getEnumType(Config_LoRaConfig_RegionCode) },\n    { no: 7, name: \"modem_preset\", kind: \"enum\", T: proto3.getEnumType(Config_LoRaConfig_ModemPreset) },\n    { no: 8, name: \"has_default_channel\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 9, name: \"latitude_i\", kind: \"scalar\", T: 15 /* ScalarType.SFIXED32 */ },\n    { no: 10, name: \"longitude_i\", kind: \"scalar\", T: 15 /* ScalarType.SFIXED32 */ },\n    { no: 11, name: \"altitude\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 12, name: \"position_precision\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 13, name: \"num_online_local_nodes\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n  ],\n);\n\n","// @generated by protoc-gen-es v1.10.0\n// @generated from file meshtastic/paxcount.proto (package meshtastic, syntax proto3)\n/* eslint-disable */\n// @ts-nocheck\n\nimport { proto3 } from \"@bufbuild/protobuf\";\n\n/**\n *\n * TODO: REPLACE\n *\n * @generated from message meshtastic.Paxcount\n */\nexport const Paxcount = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.Paxcount\",\n  () => [\n    { no: 1, name: \"wifi\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 2, name: \"ble\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 3, name: \"uptime\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n  ],\n);\n\n","// @generated by protoc-gen-es v1.10.0\n// @generated from file meshtastic/remote_hardware.proto (package meshtastic, syntax proto3)\n/* eslint-disable */\n// @ts-nocheck\n\nimport { proto3 } from \"@bufbuild/protobuf\";\n\n/**\n *\n * An example app to show off the module system. This message is used for\n * REMOTE_HARDWARE_APP PortNums.\n * Also provides easy remote access to any GPIO.\n * In the future other remote hardware operations can be added based on user interest\n * (i.e. serial output, spi/i2c input/output).\n * FIXME - currently this feature is turned on by default which is dangerous\n * because no security yet (beyond the channel mechanism).\n * It should be off by default and then protected based on some TBD mechanism\n * (a special channel once multichannel support is included?)\n *\n * @generated from message meshtastic.HardwareMessage\n */\nexport const HardwareMessage = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.HardwareMessage\",\n  () => [\n    { no: 1, name: \"type\", kind: \"enum\", T: proto3.getEnumType(HardwareMessage_Type) },\n    { no: 2, name: \"gpio_mask\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n    { no: 3, name: \"gpio_value\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n  ],\n);\n\n/**\n *\n * TODO: REPLACE\n *\n * @generated from enum meshtastic.HardwareMessage.Type\n */\nexport const HardwareMessage_Type = /*@__PURE__*/ proto3.makeEnum(\n  \"meshtastic.HardwareMessage.Type\",\n  [\n    {no: 0, name: \"UNSET\"},\n    {no: 1, name: \"WRITE_GPIOS\"},\n    {no: 2, name: \"WATCH_GPIOS\"},\n    {no: 3, name: \"GPIOS_CHANGED\"},\n    {no: 4, name: \"READ_GPIOS\"},\n    {no: 5, name: \"READ_GPIOS_REPLY\"},\n  ],\n);\n\n","// @generated by protoc-gen-es v1.10.0\n// @generated from file meshtastic/rtttl.proto (package meshtastic, syntax proto3)\n/* eslint-disable */\n// @ts-nocheck\n\nimport { proto3 } from \"@bufbuild/protobuf\";\n\n/**\n *\n * Canned message module configuration.\n *\n * @generated from message meshtastic.RTTTLConfig\n */\nexport const RTTTLConfig = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.RTTTLConfig\",\n  () => [\n    { no: 1, name: \"ringtone\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ],\n);\n\n","// @generated by protoc-gen-es v1.10.0\n// @generated from file meshtastic/storeforward.proto (package meshtastic, syntax proto3)\n/* eslint-disable */\n// @ts-nocheck\n\nimport { proto3 } from \"@bufbuild/protobuf\";\n\n/**\n *\n * TODO: REPLACE\n *\n * @generated from message meshtastic.StoreAndForward\n */\nexport const StoreAndForward = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.StoreAndForward\",\n  () => [\n    { no: 1, name: \"rr\", kind: \"enum\", T: proto3.getEnumType(StoreAndForward_RequestResponse) },\n    { no: 2, name: \"stats\", kind: \"message\", T: StoreAndForward_Statistics, oneof: \"variant\" },\n    { no: 3, name: \"history\", kind: \"message\", T: StoreAndForward_History, oneof: \"variant\" },\n    { no: 4, name: \"heartbeat\", kind: \"message\", T: StoreAndForward_Heartbeat, oneof: \"variant\" },\n    { no: 5, name: \"text\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */, oneof: \"variant\" },\n  ],\n);\n\n/**\n *\n * 001 - 063 = From Router\n * 064 - 127 = From Client\n *\n * @generated from enum meshtastic.StoreAndForward.RequestResponse\n */\nexport const StoreAndForward_RequestResponse = /*@__PURE__*/ proto3.makeEnum(\n  \"meshtastic.StoreAndForward.RequestResponse\",\n  [\n    {no: 0, name: \"UNSET\"},\n    {no: 1, name: \"ROUTER_ERROR\"},\n    {no: 2, name: \"ROUTER_HEARTBEAT\"},\n    {no: 3, name: \"ROUTER_PING\"},\n    {no: 4, name: \"ROUTER_PONG\"},\n    {no: 5, name: \"ROUTER_BUSY\"},\n    {no: 6, name: \"ROUTER_HISTORY\"},\n    {no: 7, name: \"ROUTER_STATS\"},\n    {no: 8, name: \"ROUTER_TEXT_DIRECT\"},\n    {no: 9, name: \"ROUTER_TEXT_BROADCAST\"},\n    {no: 64, name: \"CLIENT_ERROR\"},\n    {no: 65, name: \"CLIENT_HISTORY\"},\n    {no: 66, name: \"CLIENT_STATS\"},\n    {no: 67, name: \"CLIENT_PING\"},\n    {no: 68, name: \"CLIENT_PONG\"},\n    {no: 106, name: \"CLIENT_ABORT\"},\n  ],\n);\n\n/**\n *\n * TODO: REPLACE\n *\n * @generated from message meshtastic.StoreAndForward.Statistics\n */\nexport const StoreAndForward_Statistics = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.StoreAndForward.Statistics\",\n  () => [\n    { no: 1, name: \"messages_total\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 2, name: \"messages_saved\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 3, name: \"messages_max\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 4, name: \"up_time\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 5, name: \"requests\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 6, name: \"requests_history\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 7, name: \"heartbeat\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 8, name: \"return_max\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 9, name: \"return_window\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n  ],\n  {localName: \"StoreAndForward_Statistics\"},\n);\n\n/**\n *\n * TODO: REPLACE\n *\n * @generated from message meshtastic.StoreAndForward.History\n */\nexport const StoreAndForward_History = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.StoreAndForward.History\",\n  () => [\n    { no: 1, name: \"history_messages\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 2, name: \"window\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 3, name: \"last_request\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n  ],\n  {localName: \"StoreAndForward_History\"},\n);\n\n/**\n *\n * TODO: REPLACE\n *\n * @generated from message meshtastic.StoreAndForward.Heartbeat\n */\nexport const StoreAndForward_Heartbeat = /*@__PURE__*/ proto3.makeMessageType(\n  \"meshtastic.StoreAndForward.Heartbeat\",\n  () => [\n    { no: 1, name: \"period\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 2, name: \"secondary\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n  ],\n  {localName: \"StoreAndForward_Heartbeat\"},\n);\n\n","import type {\n  BleConnection,\n  HttpConnection,\n  NodeSerialConnection,\n  SerialConnection,\n} from \"./adapters/index.js\";\nimport type * as Protobuf from \"./protobufs.js\";\n\nexport interface QueueItem {\n  id: number;\n  data: Uint8Array;\n  sent: boolean;\n  added: Date;\n  promise: Promise<number>;\n}\n\nexport enum DeviceStatusEnum {\n  DeviceRestarting = 1,\n  DeviceDisconnected = 2,\n  DeviceConnecting = 3,\n  DeviceReconnecting = 4,\n  DeviceConnected = 5,\n  DeviceConfiguring = 6,\n  DeviceConfigured = 7,\n}\n\nexport type ConnectionParameters =\n  | HttpConnectionParameters\n  | BleConnectionParameters\n  | SerialConnectionParameters\n  | NodeSerialConnectionParameters;\n\nexport interface HttpConnectionParameters {\n  /** Address The IP Address/Domain to connect to, without protocol */\n  address: string;\n  /**\n   * Enables transport layer security. Notes: Slower, devices' certificate must\n   * be trusted by the browser\n   */\n  tls?: boolean;\n  /** Enables receiving messages all at once, versus one per request */\n  receiveBatchRequests?: boolean;\n  /**\n   * (ms) Sets a fixed interval in that the device is fetched for new messages,\n   * defaults to 5 seconds\n   */\n  fetchInterval: number;\n}\n\nexport interface BleConnectionParameters {\n  /** Optional filter options for the web bluetooth api requestDevice() method */\n  deviceFilter?: RequestDeviceOptions;\n  /** Connect directly to a Bluetooth deivce, obtained from `getDevices()` */\n  device?: BluetoothDevice;\n}\n\nexport interface SerialConnectionParameters {\n  baudRate?: number;\n  /** Connect directly to a Serial port, obtained from `getPorts()` */\n  port?: SerialPort;\n  concurrentLogOutput: boolean;\n}\n\nexport interface NodeSerialConnectionParameters {\n  baudRate?: number;\n  portPath: string;\n  concurrentLogOutput: boolean;\n}\n\nexport type LogEventPacket = LogEvent & { date: Date };\n\nexport type PacketDestination = \"broadcast\" | \"direct\";\n\nexport interface PacketMetadata<T> {\n  id: number;\n  rxTime: Date;\n  type: PacketDestination;\n  from: number;\n  to: number;\n  channel: ChannelNumber;\n  data: T;\n}\n\nexport enum EmitterScope {\n  MeshDevice = 1,\n  SerialConnection = 2,\n  NodeSerialConnection = 3,\n  BleConnection = 4,\n  HttpConnection = 5,\n}\n\nexport enum Emitter {\n  Constructor = 0,\n  SendText = 1,\n  SendWaypoint = 2,\n  SendPacket = 3,\n  SendRaw = 4,\n  SetConfig = 5,\n  SetModuleConfig = 6,\n  ConfirmSetConfig = 7,\n  SetOwner = 8,\n  SetChannel = 9,\n  ConfirmSetChannel = 10,\n  ClearChannel = 11,\n  GetChannel = 12,\n  GetAllChannels = 13,\n  GetConfig = 14,\n  GetModuleConfig = 15,\n  GetOwner = 16,\n  Configure = 17,\n  HandleFromRadio = 18,\n  HandleMeshPacket = 19,\n  Connect = 20,\n  Ping = 21,\n  ReadFromRadio = 22,\n  WriteToRadio = 23,\n  SetDebugMode = 24,\n  GetMetadata = 25,\n  ResetNodes = 26,\n  Shutdown = 27,\n  Reboot = 28,\n  RebootOta = 29,\n  FactoryReset = 30,\n  EnterDfuMode = 31,\n  RemoveNodeByNum = 32,\n}\n\nexport interface LogEvent {\n  scope: EmitterScope;\n  emitter: Emitter;\n  message: string;\n  level: Protobuf.Mesh.LogRecord_Level;\n  packet?: Uint8Array;\n}\n\nexport enum ChannelNumber {\n  Primary = 0,\n  Channel1 = 1,\n  Channel2 = 2,\n  Channel3 = 3,\n  Channel4 = 4,\n  Channel5 = 5,\n  Channel6 = 6,\n  Admin = 7,\n}\n\nexport type ConnectionType =\n  | BleConnection\n  | HttpConnection\n  | SerialConnection\n  | NodeSerialConnection;\n\nexport type ConnectionTypeName = \"ble\" | \"http\" | \"serial\";\n\nexport type Destination = number | \"self\" | \"broadcast\";\n\nexport interface PacketError {\n  id: number;\n  error: Protobuf.Mesh.Routing_Error;\n}\n","export * from \"./eventSystem.js\";\nexport * from \"./general.js\";\nexport * from \"./queue.js\";\nexport * from \"./transformHandler.js\";\nexport * from \"./xmodem.js\";\nexport * from \"./nodeTransformHandler.js\";\n","import { SimpleEventDispatcher } from \"ste-simple-events\";\nimport type * as Protobuf from \"../protobufs.js\";\nimport type { PacketMetadata } from \"../types.js\";\nimport type * as Types from \"../types.js\";\n\nexport class EventSystem {\n  /**\n   * Fires when a new FromRadio message has been received from the device\n   *\n   * @event onLogEvent\n   */\n  public readonly onLogEvent =\n    new SimpleEventDispatcher<Types.LogEventPacket>();\n\n  /**\n   * Fires when a new FromRadio message has been received from the device\n   *\n   * @event onFromRadio\n   */\n  public readonly onFromRadio =\n    new SimpleEventDispatcher<Protobuf.Mesh.FromRadio>();\n\n  /**\n   * Fires when a new FromRadio message containing a Data packet has been\n   * received from the device\n   *\n   * @event onMeshPacket\n   */\n  public readonly onMeshPacket =\n    new SimpleEventDispatcher<Protobuf.Mesh.MeshPacket>();\n\n  /**\n   * Fires when a new MyNodeInfo message has been received from the device\n   *\n   * @event onMyNodeInfo\n   */\n  public readonly onMyNodeInfo =\n    new SimpleEventDispatcher<Protobuf.Mesh.MyNodeInfo>();\n\n  /**\n   * Fires when a new MeshPacket message containing a NodeInfo packet has been\n   * received from device\n   *\n   * @event onNodeInfoPacket\n   */\n  public readonly onNodeInfoPacket =\n    new SimpleEventDispatcher<Protobuf.Mesh.NodeInfo>();\n\n  /**\n   * Fires when a new Channel message is received\n   *\n   * @event onChannelPacket\n   */\n  public readonly onChannelPacket =\n    new SimpleEventDispatcher<Protobuf.Channel.Channel>();\n\n  /**\n   * Fires when a new Config message is received\n   *\n   * @event onConfigPacket\n   */\n  public readonly onConfigPacket =\n    new SimpleEventDispatcher<Protobuf.Config.Config>();\n\n  /**\n   * Fires when a new ModuleConfig message is received\n   *\n   * @event onModuleConfigPacket\n   */\n  public readonly onModuleConfigPacket =\n    new SimpleEventDispatcher<Protobuf.ModuleConfig.ModuleConfig>();\n\n  /**\n   * Fires when a new MeshPacket message containing a ATAK packet has been\n   * received from device\n   *\n   * @event onAtakPacket\n   */\n  public readonly onAtakPacket = new SimpleEventDispatcher<\n    PacketMetadata<Uint8Array>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing a Text packet has been\n   * received from device\n   *\n   * @event onMessagePacket\n   */\n  public readonly onMessagePacket = new SimpleEventDispatcher<\n    PacketMetadata<string>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing a Remote Hardware packet has\n   * been received from device\n   *\n   * @event onRemoteHardwarePacket\n   */\n  public readonly onRemoteHardwarePacket = new SimpleEventDispatcher<\n    PacketMetadata<Protobuf.RemoteHardware.HardwareMessage>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing a Position packet has been\n   * received from device\n   *\n   * @event onPositionPacket\n   */\n  public readonly onPositionPacket = new SimpleEventDispatcher<\n    PacketMetadata<Protobuf.Mesh.Position>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing a User packet has been\n   * received from device\n   *\n   * @event onUserPacket\n   */\n  public readonly onUserPacket = new SimpleEventDispatcher<\n    PacketMetadata<Protobuf.Mesh.User>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing a Routing packet has been\n   * received from device\n   *\n   * @event onRoutingPacket\n   */\n  public readonly onRoutingPacket = new SimpleEventDispatcher<\n    PacketMetadata<Protobuf.Mesh.Routing>\n  >();\n\n  /**\n   * Fires when the device receives a Metadata packet\n   *\n   * @event onDeviceMetadataPacket\n   */\n  public readonly onDeviceMetadataPacket = new SimpleEventDispatcher<\n    PacketMetadata<Protobuf.Mesh.DeviceMetadata>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing a Waypoint packet has been\n   * received from device\n   *\n   * @event onWaypointPacket\n   */\n  public readonly onWaypointPacket = new SimpleEventDispatcher<\n    PacketMetadata<Protobuf.Mesh.Waypoint>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing an Audio packet has been\n   * received from device\n   *\n   * @event onAudioPacket\n   */\n  public readonly onAudioPacket = new SimpleEventDispatcher<\n    PacketMetadata<Uint8Array>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing a Detection Sensor packet has been\n   * received from device\n   *\n   * @event onDetectionSensorPacket\n   */\n  public readonly onDetectionSensorPacket = new SimpleEventDispatcher<\n    PacketMetadata<Uint8Array>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing a Ping packet has been\n   * received from device\n   *\n   * @event onPingPacket\n   */\n  public readonly onPingPacket = new SimpleEventDispatcher<\n    PacketMetadata<Uint8Array>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing a IP Tunnel packet has been\n   * received from device\n   *\n   * @event onIpTunnelPacket\n   */\n  public readonly onIpTunnelPacket = new SimpleEventDispatcher<\n    PacketMetadata<Uint8Array>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing a Paxcounter packet has been\n   * received from device\n   *\n   * @event onPaxcounterPacket\n   */\n  public readonly onPaxcounterPacket = new SimpleEventDispatcher<\n    PacketMetadata<Protobuf.PaxCount.Paxcount>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing a Serial packet has been\n   * received from device\n   *\n   * @event onSerialPacket\n   */\n  public readonly onSerialPacket = new SimpleEventDispatcher<\n    PacketMetadata<Uint8Array>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing a Store and Forward packet\n   * has been received from device\n   *\n   * @event onStoreForwardPacket\n   */\n  public readonly onStoreForwardPacket = new SimpleEventDispatcher<\n    PacketMetadata<Uint8Array>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing a Store and Forward packet\n   * has been received from device\n   *\n   * @event onRangeTestPacket\n   */\n  public readonly onRangeTestPacket = new SimpleEventDispatcher<\n    PacketMetadata<Uint8Array>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing a Telemetry packet has been\n   * received from device\n   *\n   * @event onTelemetryPacket\n   */\n  public readonly onTelemetryPacket = new SimpleEventDispatcher<\n    PacketMetadata<Protobuf.Telemetry.Telemetry>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing a ZPS packet has been\n   * received from device\n   *\n   * @event onZPSPacket\n   */\n  public readonly onZpsPacket = new SimpleEventDispatcher<\n    PacketMetadata<Uint8Array>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing a Simulator packet has been\n   * received from device\n   *\n   * @event onSimulatorPacket\n   */\n  public readonly onSimulatorPacket = new SimpleEventDispatcher<\n    PacketMetadata<Uint8Array>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing a Trace Route packet has been\n   * received from device\n   *\n   * @event onTraceRoutePacket\n   */\n  public readonly onTraceRoutePacket = new SimpleEventDispatcher<\n    PacketMetadata<Protobuf.Mesh.RouteDiscovery>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing a Neighbor Info packet has been\n   * received from device\n   *\n   * @event onNeighborInfoPacket\n   */\n  public readonly onNeighborInfoPacket = new SimpleEventDispatcher<\n    PacketMetadata<Protobuf.Mesh.NeighborInfo>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing an ATAK packet has been\n   * received from device\n   *\n   * @event onAtakPluginPacket\n   */\n  public readonly onAtakPluginPacket = new SimpleEventDispatcher<\n    PacketMetadata<Uint8Array>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing a Map Report packet has been\n   * received from device\n   *\n   * @event onMapReportPacket\n   */\n  public readonly onMapReportPacket = new SimpleEventDispatcher<\n    PacketMetadata<Uint8Array>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing a Private packet has been\n   * received from device\n   *\n   * @event onPrivatePacket\n   */\n  public readonly onPrivatePacket = new SimpleEventDispatcher<\n    PacketMetadata<Uint8Array>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing an ATAK Forwarder packet has been\n   * received from device\n   *\n   * @event onAtakForwarderPacket\n   */\n  public readonly onAtakForwarderPacket = new SimpleEventDispatcher<\n    PacketMetadata<Uint8Array>\n  >();\n\n  /**\n   * Fires when the devices connection or configuration status changes\n   *\n   * @event onDeviceStatus\n   */\n  public readonly onDeviceStatus =\n    new SimpleEventDispatcher<Types.DeviceStatusEnum>();\n\n  /**\n   * Fires when a new FromRadio message containing a LogRecord packet has been\n   * received from device\n   *\n   * @event onLogRecord\n   */\n  public readonly onLogRecord =\n    new SimpleEventDispatcher<Protobuf.Mesh.LogRecord>();\n\n  /**\n   * Fires when the device receives a meshPacket, returns a timestamp\n   *\n   * @event onMeshHeartbeat\n   */\n  public readonly onMeshHeartbeat = new SimpleEventDispatcher<Date>();\n\n  /**\n   * Outputs any debug log data (currently serial connections only)\n   *\n   * @event onDeviceDebugLog\n   */\n  public readonly onDeviceDebugLog = new SimpleEventDispatcher<Uint8Array>();\n\n  /**\n   * Outputs status of pending settings changes\n   *\n   * @event onpendingSettingsChange\n   */\n  public readonly onPendingSettingsChange =\n    new SimpleEventDispatcher<boolean>();\n\n  /**\n   * Fires when a QueueStatus message is generated\n   *\n   * @event onQueueStatus\n   */\n  public readonly onQueueStatus =\n    new SimpleEventDispatcher<Protobuf.Mesh.QueueStatus>();\n}\n","/**\n * Converts a `Uint8Array` to an `ArrayBuffer`\n */\nexport const typedArrayToBuffer = (array: Uint8Array): ArrayBuffer => {\n  return array.buffer.slice(\n    array.byteOffset,\n    array.byteLength + array.byteOffset,\n  );\n};\n","import { SimpleEventDispatcher } from \"ste-simple-events\";\nimport * as Protobuf from \"../protobufs.js\";\nimport type { PacketError, QueueItem } from \"../types.js\";\n\nexport class Queue {\n  private queue: QueueItem[] = [];\n  private lock = false;\n  private ackNotifier = new SimpleEventDispatcher<number>();\n  private errorNotifier = new SimpleEventDispatcher<PacketError>();\n  private timeout: number;\n\n  constructor() {\n    this.timeout = 60000;\n  }\n\n  public getState(): QueueItem[] {\n    return this.queue;\n  }\n\n  public clear(): void {\n    this.queue = [];\n  }\n\n  public push(item: Omit<QueueItem, \"promise\" | \"sent\" | \"added\">): void {\n    const queueItem: QueueItem = {\n      ...item,\n      sent: false,\n      added: new Date(),\n      promise: new Promise<number>((resolve, reject) => {\n        this.ackNotifier.subscribe((id) => {\n          if (item.id === id) {\n            this.remove(item.id);\n            resolve(id);\n          }\n        });\n        this.errorNotifier.subscribe((e) => {\n          if (item.id === e.id) {\n            this.remove(item.id);\n            reject(e);\n          }\n        });\n        setTimeout(() => {\n          if (this.queue.findIndex((qi) => qi.id === item.id) !== -1) {\n            this.remove(item.id);\n            const decoded = Protobuf.Mesh.ToRadio.fromBinary(item.data);\n            console.warn(\n              `Packet ${item.id} of type ${decoded.payloadVariant.case} timed out`,\n            );\n\n            reject({\n              id: item.id,\n              error: Protobuf.Mesh.Routing_Error.TIMEOUT,\n            });\n          }\n        }, this.timeout);\n      }),\n    };\n    this.queue.push(queueItem);\n  }\n\n  public remove(id: number): void {\n    if (this.lock) {\n      setTimeout(() => this.remove(id), 100);\n      return;\n    }\n    this.queue = this.queue.filter((item) => item.id !== id);\n  }\n\n  public processAck(id: number): void {\n    this.ackNotifier.dispatch(id);\n  }\n\n  public processError(e: PacketError): void {\n    console.error(\n      `Error received for packet ${e.id}: ${\n        Protobuf.Mesh.Routing_Error[e.error]\n      }`,\n    );\n    this.errorNotifier.dispatch(e);\n  }\n\n  public async wait(id: number): Promise<number> {\n    const queueItem = this.queue.find((qi) => qi.id === id);\n    if (!queueItem) {\n      throw new Error(\"Packet does not exist\");\n    }\n    return queueItem.promise;\n  }\n\n  public async processQueue(\n    writeToRadio: (data: Uint8Array) => Promise<void>,\n  ): Promise<void> {\n    if (this.lock) {\n      return;\n    }\n    this.lock = true;\n    while (this.queue.filter((p) => !p.sent).length > 0) {\n      const item = this.queue.filter((p) => !p.sent)[0];\n      if (item) {\n        await new Promise((resolve) => setTimeout(resolve, 200));\n        try {\n          await writeToRadio(item.data);\n          item.sent = true;\n        } catch (error) {\n          console.error(`Error sending packet ${item.id}`, error);\n        }\n      }\n    }\n    this.lock = false;\n  }\n}\n","import type { SimpleEventDispatcher } from \"ste-simple-events\";\nimport type { Logger } from \"tslog\";\nimport * as Protobuf from \"../protobufs.js\";\nimport * as Types from \"../types.js\";\n\nexport const transformHandler = (\n  logger: Logger<unknown>,\n  onReleaseEvent: SimpleEventDispatcher<boolean>,\n  onDeviceDebugLog: SimpleEventDispatcher<Uint8Array>,\n  concurrentLogOutput: boolean,\n) => {\n  let byteBuffer = new Uint8Array([]);\n  return new TransformStream<Uint8Array, Uint8Array>({\n    transform(chunk: Uint8Array, controller): void {\n      const log = logger.getSubLogger({ name: \"streamTransformer\" });\n      onReleaseEvent.subscribe(() => {\n        controller.terminate();\n      });\n      byteBuffer = new Uint8Array([...byteBuffer, ...chunk]);\n      let processingExhausted = false;\n      while (byteBuffer.length !== 0 && !processingExhausted) {\n        const framingIndex = byteBuffer.findIndex((byte) => byte === 0x94);\n        const framingByte2 = byteBuffer[framingIndex + 1];\n        if (framingByte2 === 0xc3) {\n          if (byteBuffer.subarray(0, framingIndex).length) {\n            if (concurrentLogOutput) {\n              onDeviceDebugLog.dispatch(byteBuffer.subarray(0, framingIndex));\n            } else {\n              log.warn(\n                Types.EmitterScope.SerialConnection,\n                Types.Emitter.Connect,\n                `⚠️ Found unneccesary message padding, removing: ${byteBuffer\n                  .subarray(0, framingIndex)\n                  .toString()}`,\n              );\n            }\n\n            byteBuffer = byteBuffer.subarray(framingIndex);\n          }\n\n          const msb = byteBuffer[2];\n          const lsb = byteBuffer[3];\n\n          if (\n            msb !== undefined &&\n            lsb !== undefined &&\n            byteBuffer.length >= 4 + (msb << 8) + lsb\n          ) {\n            const packet = byteBuffer.subarray(4, 4 + (msb << 8) + lsb);\n\n            const malformedDetectorIndex = packet.findIndex(\n              (byte) => byte === 0x94,\n            );\n            if (\n              malformedDetectorIndex !== -1 &&\n              packet[malformedDetectorIndex + 1] === 0xc3\n            ) {\n              log.warn(\n                Types.EmitterScope.SerialConnection,\n                Types.Emitter.Connect,\n                `⚠️ Malformed packet found, discarding: ${byteBuffer\n                  .subarray(0, malformedDetectorIndex - 1)\n                  .toString()}`,\n                Protobuf.Mesh.LogRecord_Level.WARNING,\n              );\n\n              byteBuffer = byteBuffer.subarray(malformedDetectorIndex);\n            } else {\n              byteBuffer = byteBuffer.subarray(3 + (msb << 8) + lsb + 1);\n              controller.enqueue(packet);\n            }\n          } else {\n            /** Only partioal message in buffer, wait for the rest */\n            processingExhausted = true;\n          }\n        } else {\n          /** Message not complete, only 1 byte in buffer */\n          processingExhausted = true;\n        }\n      }\n    },\n  });\n};\n","import crc16ccitt from \"crc/calculators/crc16ccitt\";\nimport * as Protobuf from \"../protobufs.js\";\n\n//if counter > 35 then reset counter/clear/error/reject promise\ntype XmodemProps = (toRadio: Uint8Array, id?: number) => Promise<number>;\n\nexport class Xmodem {\n  private sendRaw: XmodemProps;\n  private rxBuffer: Uint8Array[];\n  private txBuffer: Uint8Array[];\n  private textEncoder: TextEncoder;\n  private counter: number;\n\n  constructor(sendRaw: XmodemProps) {\n    this.sendRaw = sendRaw;\n    this.rxBuffer = [];\n    this.txBuffer = [];\n    this.textEncoder = new TextEncoder();\n    this.counter = 0;\n  }\n\n  async downloadFile(filename: string): Promise<number> {\n    return await this.sendCommand(\n      Protobuf.Xmodem.XModem_Control.STX,\n      this.textEncoder.encode(filename),\n      0,\n    );\n  }\n\n  async uploadFile(filename: string, data: Uint8Array): Promise<number> {\n    for (let i = 0; i < data.length; i += 128) {\n      this.txBuffer.push(data.slice(i, i + 128));\n    }\n\n    return await this.sendCommand(\n      Protobuf.Xmodem.XModem_Control.SOH,\n      this.textEncoder.encode(filename),\n      0,\n    );\n  }\n\n  async sendCommand(\n    command: Protobuf.Xmodem.XModem_Control,\n    buffer?: Uint8Array,\n    sequence?: number,\n    crc16?: number,\n  ): Promise<number> {\n    const toRadio = new Protobuf.Mesh.ToRadio({\n      payloadVariant: {\n        case: \"xmodemPacket\",\n        value: {\n          buffer,\n          control: command,\n          seq: sequence,\n          crc16: crc16,\n        },\n      },\n    });\n    return await this.sendRaw(toRadio.toBinary());\n  }\n\n  async handlePacket(packet: Protobuf.Xmodem.XModem): Promise<number> {\n    await new Promise((resolve) => setTimeout(resolve, 100));\n\n    switch (packet.control) {\n      case Protobuf.Xmodem.XModem_Control.NUL: {\n        // nothing\n        break;\n      }\n      case Protobuf.Xmodem.XModem_Control.SOH: {\n        this.counter = packet.seq;\n        if (this.validateCrc16(packet)) {\n          this.rxBuffer[this.counter] = packet.buffer;\n          return this.sendCommand(Protobuf.Xmodem.XModem_Control.ACK);\n        }\n        return await this.sendCommand(\n          Protobuf.Xmodem.XModem_Control.NAK,\n          undefined,\n          packet.seq,\n        );\n      }\n      case Protobuf.Xmodem.XModem_Control.STX: {\n        break;\n      }\n      case Protobuf.Xmodem.XModem_Control.EOT: {\n        // end of transmission\n        break;\n      }\n      case Protobuf.Xmodem.XModem_Control.ACK: {\n        this.counter++;\n        if (this.txBuffer[this.counter - 1]) {\n          return this.sendCommand(\n            Protobuf.Xmodem.XModem_Control.SOH,\n            this.txBuffer[this.counter - 1],\n            this.counter,\n            crc16ccitt(this.txBuffer[this.counter - 1] ?? new Uint8Array()),\n          );\n        }\n        if (this.counter === this.txBuffer.length + 1) {\n          return this.sendCommand(Protobuf.Xmodem.XModem_Control.EOT);\n        }\n        this.clear();\n        break;\n      }\n      case Protobuf.Xmodem.XModem_Control.NAK: {\n        return this.sendCommand(\n          Protobuf.Xmodem.XModem_Control.SOH,\n          this.txBuffer[this.counter],\n          this.counter,\n          crc16ccitt(this.txBuffer[this.counter - 1] ?? new Uint8Array()),\n        );\n      }\n      case Protobuf.Xmodem.XModem_Control.CAN: {\n        this.clear();\n        break;\n      }\n      case Protobuf.Xmodem.XModem_Control.CTRLZ: {\n        break;\n      }\n    }\n\n    return Promise.resolve(0);\n  }\n\n  validateCrc16(packet: Protobuf.Xmodem.XModem): boolean {\n    return crc16ccitt(packet.buffer) === packet.crc16;\n  }\n\n  clear() {\n    this.counter = 0;\n    this.rxBuffer = [];\n    this.txBuffer = [];\n  }\n}\n","import { Transform } from \"node:stream\";\nimport type { SimpleEventDispatcher } from \"ste-simple-events\";\nimport type { Logger } from \"tslog\";\nimport * as Protobuf from \"../protobufs.js\";\nimport * as Types from \"../types.js\";\n\nexport const nodeTransformHandler = (\n  logger: Logger<unknown>,\n  onReleaseEvent: SimpleEventDispatcher<boolean>,\n  onDeviceDebugLog: SimpleEventDispatcher<Uint8Array>,\n  concurrentLogOutput: boolean,\n) => {\n  let byteBuffer = new Uint8Array([]);\n  const log = logger.getSubLogger({ name: \"streamTransfer\" });\n  return new Transform({\n    transform(chunk: Buffer | Uint8Array, _encoding, controller) {\n      onReleaseEvent.subscribe(() => {\n        controller();\n      });\n      byteBuffer = new Uint8Array([...byteBuffer, ...chunk]);\n      let processingExhausted = false;\n      while (byteBuffer.length !== 0 && !processingExhausted) {\n        const framingIndex = byteBuffer.findIndex((byte) => byte === 0x94);\n        const framingByte2 = byteBuffer[framingIndex + 1];\n        if (framingByte2 === 0xc3) {\n          if (byteBuffer.subarray(0, framingIndex).length) {\n            if (concurrentLogOutput) {\n              onDeviceDebugLog.dispatch(byteBuffer.subarray(0, framingIndex));\n            } else {\n              log.warn(\n                Types.EmitterScope.SerialConnection,\n                Types.Emitter.Connect,\n                `⚠️ Found unneccesary message padding, removing: ${byteBuffer\n                  .subarray(0, framingIndex)\n                  .toString()}`,\n              );\n            }\n            byteBuffer = byteBuffer.subarray(framingIndex);\n          }\n          const msb = byteBuffer[2];\n          const lsb = byteBuffer[3];\n\n          if (\n            msb !== undefined &&\n            lsb !== undefined &&\n            byteBuffer.length >= 4 + (msb << 8) + lsb\n          ) {\n            const packet = byteBuffer.subarray(4, 4 + (msb << 8) + lsb);\n\n            const malformedDetectorIndex = packet.findIndex(\n              (byte) => byte === 0x94,\n            );\n            if (\n              malformedDetectorIndex !== -1 &&\n              packet[malformedDetectorIndex + 1] === 0xc3\n            ) {\n              log.warn(\n                Types.EmitterScope.SerialConnection,\n                Types.Emitter.Connect,\n                `⚠️ Malformed packet found, discarding: ${byteBuffer\n                  .subarray(0, malformedDetectorIndex - 1)\n                  .toString()}`,\n                Protobuf.Mesh.LogRecord_Level.WARNING,\n              );\n\n              byteBuffer = byteBuffer.subarray(malformedDetectorIndex);\n            } else {\n              byteBuffer = byteBuffer.subarray(3 + (msb << 8) + lsb + 1);\n              this.push(packet);\n            }\n          } else {\n            processingExhausted = true;\n          }\n        } else {\n          processingExhausted = true;\n        }\n      }\n      controller();\n    },\n  });\n};\n","import {\n  FromNumUuid,\n  FromRadioUuid,\n  ServiceUuid,\n  ToRadioUuid,\n} from \"../constants.js\";\nimport { MeshDevice } from \"../meshDevice.js\";\nimport * as Types from \"../types.js\";\nimport { typedArrayToBuffer } from \"../utils/index.js\";\n\n/** Allows to connect to a Meshtastic device via bluetooth */\nexport class BleConnection extends MeshDevice {\n  /** Defines the connection type as ble */\n  public connType: Types.ConnectionTypeName;\n\n  public portId: string;\n\n  /** Currently connected BLE device */\n  public device: BluetoothDevice | undefined;\n\n  private gattServer: BluetoothRemoteGATTServer | undefined;\n\n  /** Short Description */\n  private service: BluetoothRemoteGATTService | undefined;\n\n  /** Short Description */\n  private toRadioCharacteristic: BluetoothRemoteGATTCharacteristic | undefined;\n\n  /** Short Description */\n  private fromRadioCharacteristic:\n    | BluetoothRemoteGATTCharacteristic\n    | undefined;\n\n  /** Short Description */\n  private fromNumCharacteristic: BluetoothRemoteGATTCharacteristic | undefined;\n\n  private timerUpdateFromRadio: NodeJS.Timeout | null = null;\n\n  constructor(configId?: number) {\n    super(configId);\n\n    this.log = this.log.getSubLogger({ name: \"HttpConnection\" });\n\n    this.connType = \"ble\";\n    this.portId = \"\";\n    this.device = undefined;\n    this.service = undefined;\n    this.gattServer = undefined;\n    this.toRadioCharacteristic = undefined;\n    this.fromRadioCharacteristic = undefined;\n    this.fromNumCharacteristic = undefined;\n    // this.pendingRead = false;\n\n    this.log.debug(\n      Types.Emitter[Types.Emitter.Constructor],\n      \"🔷 BleConnection instantiated\",\n    );\n  }\n\n  /**\n   * Gets web bluetooth support avaliability for the device\n   *\n   * @returns {Promise<void>}\n   */\n  public supported(): Promise<boolean> {\n    return navigator.bluetooth.getAvailability();\n  }\n\n  /**\n   * Gets list of bluetooth devices that can be passed to `connect`\n   *\n   * @returns {Promise<BluetoothDevice[]>} Array of avaliable BLE devices\n   */\n  public getDevices(): Promise<BluetoothDevice[]> {\n    return navigator.bluetooth.getDevices();\n  }\n\n  /**\n   * Opens browser dialog to select a device\n   */\n  public getDevice(filter?: RequestDeviceOptions): Promise<BluetoothDevice> {\n    return navigator.bluetooth.requestDevice(\n      filter ?? {\n        filters: [{ services: [ServiceUuid] }],\n      },\n    );\n  }\n\n  /**\n   * Initiates the connect process to a Meshtastic device via Bluetooth\n   */\n  public async connect({\n    device,\n    deviceFilter,\n  }: Types.BleConnectionParameters): Promise<void> {\n    /** Set device state to connecting */\n    this.updateDeviceStatus(Types.DeviceStatusEnum.DeviceConnecting);\n\n    /** Set device if specified, else request. */\n    this.device = device ?? (await this.getDevice(deviceFilter));\n\n    this.portId = this.device.id;\n\n    /** Setup event listners */\n    this.device.addEventListener(\"gattserverdisconnected\", () => {\n      this.log.info(\n        Types.Emitter[Types.Emitter.Connect],\n        \"Device disconnected\",\n      );\n      this.updateDeviceStatus(Types.DeviceStatusEnum.DeviceDisconnected);\n      this.complete();\n    });\n\n    let error = \"\";\n    /** Connect to device */\n    await this.device.gatt\n      ?.connect()\n      .then((server) => {\n        this.log.info(\n          Types.Emitter[Types.Emitter.Connect],\n          `✅ Got GATT Server for device: ${server.device.id}`,\n        );\n        this.gattServer = server;\n      })\n      .catch((e: Error) => {\n        this.log.error(\n          Types.Emitter[Types.Emitter.Connect],\n          `❌ Failed to connect: ${e.message}`,\n        );\n        if (e.message == \"Connect failed\") {\n          error = e.message;\n        }\n      });\n\n    if (error) {\n      console.log(\"Error Message!  Abort Abort!\");\n      this.disconnect();\n      return;\n    }\n\n    await this.gattServer\n      ?.getPrimaryService(ServiceUuid)\n      .then((service) => {\n        this.log.info(\n          Types.Emitter[Types.Emitter.Connect],\n          `✅ Got GATT Service for device: ${service.device.id}`,\n        );\n        this.service = service;\n      })\n      .catch((e: Error) => {\n        this.log.error(\n          Types.Emitter[Types.Emitter.Connect],\n          `❌ Failed to get primary service: q${e.message}`,\n        );\n      });\n\n    [ToRadioUuid, FromRadioUuid, FromNumUuid].map(async (uuid) => {\n      await this.service\n        ?.getCharacteristic(uuid)\n        .then((characteristic) => {\n          this.log.info(\n            Types.Emitter[Types.Emitter.Connect],\n            `✅ Got Characteristic ${characteristic.uuid} for device: ${characteristic.uuid}`,\n          );\n          switch (uuid) {\n            case ToRadioUuid: {\n              this.toRadioCharacteristic = characteristic;\n              break;\n            }\n            case FromRadioUuid: {\n              this.fromRadioCharacteristic = characteristic;\n              break;\n            }\n            case FromNumUuid: {\n              this.fromNumCharacteristic = characteristic;\n              break;\n            }\n          }\n        })\n        .catch((e: Error) => {\n          this.log.error(\n            Types.Emitter[Types.Emitter.Connect],\n            `❌ Failed to get toRadio characteristic: q${e.message}`,\n          );\n        });\n    });\n\n    await this.fromNumCharacteristic?.startNotifications(); // TODO: catch\n\n    this.fromNumCharacteristic?.addEventListener(\n      \"characteristicvaluechanged\",\n      () => {\n        this.readFromRadio();\n      },\n    );\n\n    this.updateDeviceStatus(Types.DeviceStatusEnum.DeviceConnected);\n\n    this.configure().catch(() => {\n      // TODO: FIX, workaround for `wantConfigId` not getting acks.\n    });\n\n    this.timerUpdateFromRadio = setInterval(() => this.readFromRadio(), 1000);\n  }\n\n  /** Disconnects from the Meshtastic device */\n  public disconnect(): void {\n    this.device?.gatt?.disconnect();\n    this.updateDeviceStatus(Types.DeviceStatusEnum.DeviceDisconnected);\n    this.complete();\n    if (this.timerUpdateFromRadio) {\n      clearInterval(this.timerUpdateFromRadio);\n    }\n    this.timerUpdateFromRadio = null;\n  }\n\n  /**\n   * Pings device to check if it is avaliable\n   *\n   * @todo Implement\n   */\n  public async ping(): Promise<boolean> {\n    return await Promise.resolve(true);\n  }\n\n  /** Short description */\n  protected async readFromRadio(): Promise<void> {\n    // if (this.pendingRead) {\n    //   return Promise.resolve();\n    // }\n    // this.pendingRead = true;\n    let readBuffer = new ArrayBuffer(1);\n\n    while (readBuffer.byteLength > 0 && this.fromRadioCharacteristic) {\n      await this.fromRadioCharacteristic\n        .readValue()\n        .then((value) => {\n          readBuffer = value.buffer;\n\n          if (value.byteLength > 0) {\n            this.handleFromRadio(new Uint8Array(readBuffer));\n          }\n          this.updateDeviceStatus(Types.DeviceStatusEnum.DeviceConnected);\n        })\n        .catch((e: Error) => {\n          readBuffer = new ArrayBuffer(0);\n          this.log.error(\n            Types.Emitter[Types.Emitter.ReadFromRadio],\n            `❌ ${e.message}`,\n          );\n        });\n    }\n    // this.pendingRead = false;\n  }\n\n  /**\n   * Sends supplied protobuf message to the radio\n   */\n  protected async writeToRadio(data: Uint8Array): Promise<void> {\n    await this.toRadioCharacteristic?.writeValue(typedArrayToBuffer(data));\n    // This should be automatic (onCharacteristicValueChanged)\n    await this.readFromRadio();\n  }\n}\n","import { MeshDevice } from \"../meshDevice.js\";\nimport * as Types from \"../types.js\";\nimport { typedArrayToBuffer } from \"../utils/index.js\";\n\n/** Allows to connect to a Meshtastic device over HTTP(S) */\nexport class HttpConnection extends MeshDevice {\n  /** Defines the connection type as http */\n  public connType: Types.ConnectionTypeName;\n\n  /** URL of the device that is to be connected to. */\n  protected portId: string;\n\n  /** Enables receiving messages all at once, versus one per request */\n  private receiveBatchRequests: boolean;\n\n  private readLoop: ReturnType<typeof setInterval> | null;\n\n  private pendingRequest: boolean;\n\n  private abortController: AbortController;\n\n  constructor(configId?: number) {\n    super(configId);\n\n    this.log = this.log.getSubLogger({ name: \"HttpConnection\" });\n\n    this.connType = \"http\";\n    this.portId = \"\";\n    this.receiveBatchRequests = false;\n    this.readLoop = null;\n    this.pendingRequest = false;\n    this.abortController = new AbortController();\n\n    this.log.debug(\n      Types.Emitter[Types.Emitter.Constructor],\n      \"🔷 HttpConnection instantiated\",\n    );\n  }\n\n  /**\n   * Initiates the connect process to a Meshtastic device via HTTP(S)\n   */\n  public async connect({\n    address,\n    fetchInterval = 3000,\n    receiveBatchRequests = false,\n    tls = false,\n  }: Types.HttpConnectionParameters): Promise<void> {\n    this.updateDeviceStatus(Types.DeviceStatusEnum.DeviceConnecting);\n\n    this.receiveBatchRequests = receiveBatchRequests;\n\n    this.portId = `${tls ? \"https://\" : \"http://\"}${address}`;\n\n    if (\n      this.deviceStatus === Types.DeviceStatusEnum.DeviceConnecting &&\n      (await this.ping())\n    ) {\n      this.log.debug(\n        Types.Emitter[Types.Emitter.Connect],\n        \"Ping succeeded, starting configuration and request timer.\",\n      );\n      this.configure().catch(() => {\n        // TODO: FIX, workaround for `wantConfigId` not getting acks.\n      });\n      this.readLoop = setInterval(() => {\n        this.readFromRadio().catch((e: Error) => {\n          this.log.error(\n            Types.Emitter[Types.Emitter.Connect],\n            `❌ ${e.message}`,\n          );\n        });\n      }, fetchInterval);\n    } else if (\n      this.deviceStatus !== Types.DeviceStatusEnum.DeviceDisconnected\n    ) {\n      setTimeout(() => {\n        this.connect({\n          address: address,\n          fetchInterval: fetchInterval,\n          receiveBatchRequests: receiveBatchRequests,\n          tls: tls,\n        });\n      }, 10000);\n    }\n  }\n\n  /** Disconnects from the Meshtastic device */\n  public disconnect(): void {\n    this.abortController.abort();\n    this.updateDeviceStatus(Types.DeviceStatusEnum.DeviceDisconnected);\n    if (this.readLoop) {\n      clearInterval(this.readLoop);\n      this.complete();\n    }\n  }\n\n  /** Pings device to check if it is avaliable */\n  public async ping(): Promise<boolean> {\n    this.log.debug(\n      Types.Emitter[Types.Emitter.Ping],\n      \"Attempting device ping.\",\n    );\n\n    const { signal } = this.abortController;\n\n    let pingSuccessful = false;\n\n    await fetch(`${this.portId}/hotspot-detect.html`, {\n      signal,\n      mode: \"no-cors\",\n    })\n      .then(() => {\n        pingSuccessful = true;\n        this.updateDeviceStatus(Types.DeviceStatusEnum.DeviceConnected);\n      })\n      .catch((e: Error) => {\n        pingSuccessful = false;\n        this.log.error(Types.Emitter[Types.Emitter.Ping], `❌ ${e.message}`);\n        this.updateDeviceStatus(Types.DeviceStatusEnum.DeviceReconnecting);\n      });\n    return pingSuccessful;\n  }\n\n  /** Reads any avaliable protobuf messages from the radio */\n  protected async readFromRadio(): Promise<void> {\n    if (this.pendingRequest) {\n      return;\n    }\n    let readBuffer = new ArrayBuffer(1);\n    const { signal } = this.abortController;\n\n    let error = false;\n    while (readBuffer.byteLength > 0 && !error) {\n      this.pendingRequest = true;\n      await fetch(\n        `${this.portId}/api/v1/fromradio?all=${\n          this.receiveBatchRequests ? \"true\" : \"false\"\n        }`,\n        {\n          signal,\n          method: \"GET\",\n          headers: {\n            Accept: \"application/x-protobuf\",\n          },\n        },\n      )\n        .then(async (response) => {\n          this.pendingRequest = false;\n          this.updateDeviceStatus(Types.DeviceStatusEnum.DeviceConnected);\n\n          readBuffer = await response.arrayBuffer();\n\n          if (readBuffer.byteLength > 0) {\n            this.handleFromRadio(new Uint8Array(readBuffer));\n          }\n        })\n        .catch((e: Error) => {\n          this.pendingRequest = false;\n          this.log.error(\n            Types.Emitter[Types.Emitter.ReadFromRadio],\n            `❌ ${e.message}`,\n          );\n          error = true;\n          this.updateDeviceStatus(Types.DeviceStatusEnum.DeviceReconnecting);\n        });\n    }\n  }\n\n  /**\n   * Sends supplied protobuf message to the radio\n   */\n  protected async writeToRadio(data: Uint8Array): Promise<void> {\n    const { signal } = this.abortController;\n\n    await fetch(`${this.portId}/api/v1/toradio`, {\n      signal,\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/x-protobuf\",\n      },\n      body: typedArrayToBuffer(data),\n    })\n      .then(async () => {\n        this.updateDeviceStatus(Types.DeviceStatusEnum.DeviceConnected);\n\n        await this.readFromRadio().catch((e: Error) => {\n          this.log.error(\n            Types.Emitter[Types.Emitter.WriteToRadio],\n            `❌ ${e.message}`,\n          );\n        });\n      })\n      .catch((e: Error) => {\n        this.log.error(\n          Types.Emitter[Types.Emitter.WriteToRadio],\n          `❌ ${e.message}`,\n        );\n        this.updateDeviceStatus(Types.DeviceStatusEnum.DeviceReconnecting);\n      });\n  }\n}\n","import { SimpleEventDispatcher } from \"ste-simple-events\";\nimport { MeshDevice } from \"../meshDevice.js\";\nimport * as Types from \"../types.js\";\nimport { transformHandler } from \"../utils/index.js\";\n\n/** Allows to connect to a Meshtastic device over WebSerial */\nexport class SerialConnection extends MeshDevice {\n  /** Defines the connection type as serial */\n  public connType: Types.ConnectionTypeName;\n\n  protected portId: string;\n\n  /** Serial port used to communicate with device. */\n  public port: SerialPort | undefined;\n\n  private readerHack: ReadableStreamDefaultReader<Uint8Array> | undefined;\n\n  /** Transform stream for parsing raw serial data */\n  private transformer?: TransformStream<Uint8Array, Uint8Array>;\n\n  /** Should locks be prevented */\n  private preventLock?: boolean;\n\n  /** Unfortunately, this is currently the only way to release the lock on a stream after piping it\n   *  through a transform stream (https://stackoverflow.com/questions/71262432) */\n  private pipePromise?: Promise<void>;\n\n  /**\n   * Fires when `disconnect()` is called, used to instruct serial port and\n   * readers to release there locks\n   *\n   * @event onReleaseEvent\n   */\n  private readonly onReleaseEvent: SimpleEventDispatcher<boolean>;\n\n  constructor(configId?: number) {\n    super(configId);\n\n    this.log = this.log.getSubLogger({ name: \"SerialConnection\" });\n\n    this.connType = \"serial\";\n    this.portId = \"\";\n    this.port = undefined;\n    this.transformer = undefined;\n    this.onReleaseEvent = new SimpleEventDispatcher<boolean>();\n    this.preventLock = false;\n\n    this.log.debug(\n      Types.Emitter[Types.Emitter.Constructor],\n      \"🔷 SerialConnection instantiated\",\n    );\n  }\n\n  /**\n   * Reads packets from transformed serial port steam and processes them.\n   */\n  private async readFromRadio(\n    reader: ReadableStreamDefaultReader<Uint8Array>,\n  ): Promise<void> {\n    this.onReleaseEvent.subscribe(async () => {\n      this.preventLock = true;\n      await reader.cancel();\n      await this.pipePromise?.catch(() => {});\n      reader.releaseLock();\n      await this.port?.close();\n    });\n\n    while (this.port?.readable && !this.preventLock) {\n      await reader\n        .read()\n        .then(({ value }) => {\n          if (value) {\n            this.handleFromRadio(value);\n          }\n        })\n        .catch(() => {\n          this.log.debug(\n            Types.Emitter[Types.Emitter.ReadFromRadio],\n            \"Releasing reader\",\n          );\n        });\n    }\n  }\n\n  /** Gets list of serial ports that can be passed to `connect` */\n  public async getPorts(): Promise<SerialPort[]> {\n    return await navigator.serial.getPorts();\n  }\n\n  /**\n   * Opens browsers connection dialogue to select a serial port\n   */\n  public async getPort(filter?: SerialPortRequestOptions): Promise<SerialPort> {\n    return await navigator.serial.requestPort(filter);\n  }\n\n  public getCurrentPort() {\n    return this.port;\n  }\n\n  /**\n   * Initiates the connect process to a Meshtastic device via Web Serial\n   */\n  public async connect({\n    port,\n    baudRate = 115200,\n    concurrentLogOutput = false,\n  }: Types.SerialConnectionParameters): Promise<void> {\n    /** Set device state to connecting */\n    this.updateDeviceStatus(Types.DeviceStatusEnum.DeviceConnecting);\n\n    /** Set device if specified, else request. */\n    this.port = port ?? (await this.getPort());\n\n    // this.portId = this.port. TODO: add once WebSerial adds unique/port identifiers\n\n    /** Setup event listners */\n    this.port.addEventListener(\"disconnect\", () => {\n      this.log.info(\n        Types.Emitter[Types.Emitter.Connect],\n        \"Device disconnected\",\n      );\n      this.updateDeviceStatus(Types.DeviceStatusEnum.DeviceDisconnected);\n      this.complete();\n    });\n\n    this.preventLock = false;\n    /** Connect to device */\n    await this.port\n      .open({\n        baudRate,\n      })\n      .then(() => {\n        if (this.port?.readable && this.port.writable) {\n          this.transformer = transformHandler(\n            this.log,\n            this.onReleaseEvent,\n            this.events.onDeviceDebugLog,\n            concurrentLogOutput,\n          );\n\n          this.pipePromise = this.port.readable.pipeTo(\n            this.transformer.writable,\n          );\n          this.readerHack = this.transformer.readable.getReader();\n          const reader = this.readerHack;\n          this.readFromRadio(reader);\n\n          this.updateDeviceStatus(Types.DeviceStatusEnum.DeviceConnected);\n\n          this.configure().catch(() => {\n            // TODO: FIX, workaround for `wantConfigId` not getting acks.\n          });\n        } else {\n          console.log(\"not readable or writable\");\n        }\n      })\n      .catch((e: Error) => {\n        this.log.error(Types.Emitter[Types.Emitter.Connect], `❌ ${e.message}`);\n      });\n  }\n\n  /** Disconnects from the serial port */\n  public async reconnect(): Promise<void> {\n    await this.connect({\n      port: this.port,\n      concurrentLogOutput: false,\n    });\n  }\n\n  /** Disconnects from the serial port */\n  public async disconnect(): Promise<SerialPort | undefined> {\n    // this.onReleaseEvent.dispatch(true);\n    // HACK: Inline onReleaseEvent\n    // -- This should be used as an event, like intened\n    this.preventLock = true;\n    await this.readerHack?.cancel();\n    await this.pipePromise?.catch(() => {});\n    this.readerHack?.releaseLock();\n    if (this.port?.readable) {\n      await this.port?.close();\n    }\n    // -------\n    this.updateDeviceStatus(Types.DeviceStatusEnum.DeviceDisconnected);\n    this.complete();\n    // await this.onReleaseEvent.toPromise();\n    return this.port;\n  }\n\n  /** Pings device to check if it is avaliable */\n  public async ping(): Promise<boolean> {\n    return await Promise.resolve(true);\n  }\n\n  /**\n   * Sends supplied protobuf message to the radio\n   */\n  protected async writeToRadio(data: Uint8Array): Promise<void> {\n    while (this.port?.writable?.locked) {\n      await new Promise((resolve) => setTimeout(resolve, 100));\n    }\n    const writer = this.port?.writable?.getWriter();\n\n    await writer?.write(\n      new Uint8Array([0x94, 0xc3, 0x00, data.length, ...data]),\n    );\n    writer?.releaseLock();\n  }\n}\n","import * as SerialPort from \"serialport\";\nimport { SimpleEventDispatcher } from \"ste-simple-events\";\nimport { MeshDevice } from \"../meshDevice.js\";\nimport * as Types from \"../types.js\";\nimport { nodeTransformHandler } from \"../utils/index.js\";\n\nexport class NodeSerialConnection extends MeshDevice {\n  /** Defines the connection type as serial */\n  public connType: Types.ConnectionTypeName;\n\n  protected portId: string;\n\n  /** Serial port used to communicate with device. */\n  public port: SerialPort.SerialPort | undefined;\n\n  /**Path to the serial port being opened. */\n  private portPath: string | undefined;\n\n  /**\n   * Fires when `disconnect()` is called, used to instruct serial port and\n   * readers to release their locks\n   *\n   * @event onReleaseEvent\n   */\n  private readonly onReleaseEvent: SimpleEventDispatcher<boolean>;\n\n  constructor(configId?: number) {\n    super(configId);\n    this.log = this.log.getSubLogger({ name: \"SerialConnection\" });\n\n    this.connType = \"serial\";\n    this.portId = \"\";\n    this.port = undefined;\n    this.portPath = undefined;\n    this.onReleaseEvent = new SimpleEventDispatcher<boolean>();\n\n    this.log.debug(\n      Types.Emitter[Types.Emitter.Constructor],\n      \"🔷 SerialConnection instantiated\",\n    );\n  }\n\n  /**\n   * Reads packets from transformed serial port stream and processes them.\n   */\n  private async readFromRadio(concurrentLogOutput: boolean): Promise<void> {\n    // Put the data received from the serial connection through the transformer\n    const transformedStream = this.port?.pipe(\n      nodeTransformHandler(\n        this.log,\n        this.onReleaseEvent,\n        this.events.onDeviceDebugLog,\n        concurrentLogOutput,\n      ),\n    );\n\n    // Consume the transformed data\n    transformedStream?.on(\"data\", (data: Buffer) => {\n      this.handleFromRadio(data);\n    });\n\n    transformedStream?.on(\"error\", (err: Error) => {\n      console.log(err);\n    });\n  }\n\n  /** Gets list of serial ports that can be passed to `connect` as `portPath` */\n  // biome-ignore lint/suspicious/noExplicitAny: serialport/binding-interface\n  public async getPorts(): Promise<any[]> {\n    return SerialPort.SerialPort.list();\n  }\n\n  /**\n   * Initiates the connect process to a Meshtastic device via NodeJS Serial\n   */\n  public async connect({\n    portPath,\n    baudRate = 115200,\n    concurrentLogOutput = false,\n  }: Types.NodeSerialConnectionParameters) {\n    this.updateDeviceStatus(Types.DeviceStatusEnum.DeviceConnecting);\n\n    this.portPath = portPath;\n    this.port = new SerialPort.SerialPort(\n      {\n        path: portPath,\n        baudRate,\n      },\n      () => {\n        if (this.port?.readable && this.port?.writable) {\n          this.readFromRadio(concurrentLogOutput);\n\n          this.updateDeviceStatus(Types.DeviceStatusEnum.DeviceConnected);\n        } else {\n          console.log(\"not readable or writable\");\n        }\n      },\n    );\n\n    this.port.on(\"close\", () => {\n      this.log.info(Types.Emitter[20 /* Connect */], \"Device disconnected\");\n      this.updateDeviceStatus(Types.DeviceStatusEnum.DeviceDisconnected);\n      this.complete();\n    });\n\n    this.port.on(\"error\", (err: Error) => {\n      console.log(err);\n    });\n  }\n  /** Disconnects from the serial port */\n  public async reconnect(): Promise<void> {\n    await this.connect({\n      portPath: this.portPath ?? \"\",\n      concurrentLogOutput: false,\n    });\n  }\n\n  /** Disconnects from the serial port */\n  public async disconnect(): Promise<SerialPort.SerialPort | undefined> {\n    // this.onReleaseEvent.dispatch(true);\n    // HACK: Inline onReleaseEvent\n    // -- This should be used as an event, like intened\n    if (this.port?.readable) {\n      await this.port?.close();\n    }\n    // -------\n    this.updateDeviceStatus(Types.DeviceStatusEnum.DeviceDisconnected);\n    this.complete();\n    return this.port;\n  }\n\n  /** Pings device to check if it is avaliable */\n  public async ping(): Promise<boolean> {\n    return await Promise.resolve(true);\n  }\n\n  /**\n   * Sends supplied protobuf message to the radio\n   */\n  protected async writeToRadio(data: Uint8Array): Promise<void> {\n    const write = (data: Uint8Array): Promise<void> => {\n      return new Promise((resolve, reject) => {\n        this.port?.write(data, (err: Error | null | undefined): void => {\n          if (err) {\n            reject(err);\n          }\n          resolve();\n        });\n      });\n    };\n\n    await write(new Uint8Array([0x94, 0xc3, 0x00, data.length, ...data])).catch(\n      (err) => {\n        console.log(err);\n      },\n    );\n  }\n}\n","import {\n  BleConnection,\n  HttpConnection,\n  SerialConnection,\n} from \"./adapters/index.js\";\nimport type * as Types from \"./types.js\";\n\n/**\n * Allows to create new connections to devices and manages them. Alternatively,\n * new connections can be created directly by instantiating their respective the\n * interface classes.\n */\nexport class Client {\n  /** Array containing all created connection interfaces */\n  deviceInterfaces: Types.ConnectionType[];\n\n  constructor() {\n    this.deviceInterfaces = [];\n  }\n\n  /**\n   * Creates a new Bluetooth Low Enery connection interface\n   */\n  public createBleConnection(configId?: number): BleConnection {\n    const bleConnection = new BleConnection(configId);\n    this.deviceInterfaces.push(bleConnection);\n    return bleConnection;\n  }\n\n  /**\n   * Creates a new HTTP(S) connection interface\n   */\n  public createHttpConnection(configId?: number): HttpConnection {\n    const httpConnection = new HttpConnection(configId);\n    this.deviceInterfaces.push(httpConnection);\n    return httpConnection;\n  }\n\n  /**\n   * Creates a new Serial connection interface\n   */\n  public createSerialConnection(configId?: number): SerialConnection {\n    const serialConnection = new SerialConnection(configId);\n    this.deviceInterfaces.push(serialConnection);\n    return serialConnection;\n  }\n\n  /**\n   * Adds an already created connection interface to the client\n   */\n  public addConnection(connectionObj: Types.ConnectionType): void {\n    this.deviceInterfaces.push(connectionObj);\n  }\n\n  /**\n   * Removes a connection interface from the client\n   */\n  public removeConnection(connectionObj: Types.ConnectionType): void {\n    const index = this.deviceInterfaces.indexOf(connectionObj);\n    if (index !== -1) {\n      this.deviceInterfaces.splice(index, 1);\n    }\n  }\n}\n"],"mappings":"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","names":["ScalarType","LongType","WireType","makeReadOptions","makeWriteOptions","readField","writeField","readScalar","writeScalar","val","a","Constants","Constants","DeviceStatusEnum","EmitterScope","Emitter","ChannelNumber","SimpleEventDispatcher","SimpleEventDispatcher","SimpleEventDispatcher","SimpleEventDispatcher","SimpleEventDispatcher","SimpleEventDispatcher","data"]}