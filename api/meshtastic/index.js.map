{"version":3,"sources":["../src/constants.ts","../src/meshDevice.ts","../node_modules/@bufbuild/protobuf/dist/esm/is-message.js","../node_modules/@bufbuild/protobuf/dist/esm/descriptors.js","../node_modules/@bufbuild/protobuf/dist/esm/wire/varint.js","../node_modules/@bufbuild/protobuf/dist/esm/proto-int64.js","../node_modules/@bufbuild/protobuf/dist/esm/reflect/scalar.js","../node_modules/@bufbuild/protobuf/dist/esm/reflect/error.js","../node_modules/@bufbuild/protobuf/dist/esm/reflect/unsafe.js","../node_modules/@bufbuild/protobuf/dist/esm/reflect/guard.js","../node_modules/@bufbuild/protobuf/dist/esm/wkt/wrappers.js","../node_modules/@bufbuild/protobuf/dist/esm/create.js","../node_modules/@bufbuild/protobuf/dist/esm/wire/text-encoding.js","../node_modules/@bufbuild/protobuf/dist/esm/wire/binary-encoding.js","../node_modules/@bufbuild/protobuf/dist/esm/reflect/reflect-check.js","../node_modules/@bufbuild/protobuf/dist/esm/reflect/reflect.js","../node_modules/@bufbuild/protobuf/dist/esm/wire/base64-encoding.js","../node_modules/@bufbuild/protobuf/dist/esm/reflect/names.js","../node_modules/@bufbuild/protobuf/dist/esm/codegenv1/restore-json-names.js","../node_modules/@bufbuild/protobuf/dist/esm/wire/text-format.js","../node_modules/@bufbuild/protobuf/dist/esm/reflect/nested-types.js","../node_modules/@bufbuild/protobuf/dist/esm/registry.js","../node_modules/@bufbuild/protobuf/dist/esm/codegenv1/boot.js","../node_modules/@bufbuild/protobuf/dist/esm/codegenv1/message.js","../node_modules/@bufbuild/protobuf/dist/esm/codegenv1/enum.js","../node_modules/@bufbuild/protobuf/dist/esm/wkt/gen/google/protobuf/descriptor_pb.js","../node_modules/@bufbuild/protobuf/dist/esm/from-binary.js","../node_modules/@bufbuild/protobuf/dist/esm/codegenv1/file.js","../node_modules/@bufbuild/protobuf/dist/esm/to-binary.js","../node_modules/@meshtastic/protobufs/mod.ts","../node_modules/@meshtastic/protobufs/lib/admin_pb.ts","../node_modules/@meshtastic/protobufs/lib/channel_pb.ts","../node_modules/@meshtastic/protobufs/lib/config_pb.ts","../node_modules/@meshtastic/protobufs/lib/device_ui_pb.ts","../node_modules/@meshtastic/protobufs/lib/connection_status_pb.ts","../node_modules/@meshtastic/protobufs/lib/mesh_pb.ts","../node_modules/@meshtastic/protobufs/lib/module_config_pb.ts","../node_modules/@meshtastic/protobufs/lib/portnums_pb.ts","../node_modules/@meshtastic/protobufs/lib/telemetry_pb.ts","../node_modules/@meshtastic/protobufs/lib/xmodem_pb.ts","../node_modules/@meshtastic/protobufs/lib/apponly_pb.ts","../node_modules/@meshtastic/protobufs/lib/atak_pb.ts","../node_modules/@meshtastic/protobufs/lib/cannedmessages_pb.ts","../node_modules/@meshtastic/protobufs/lib/clientonly_pb.ts","../node_modules/@meshtastic/protobufs/lib/localonly_pb.ts","../node_modules/@meshtastic/protobufs/lib/mqtt_pb.ts","../node_modules/@meshtastic/protobufs/lib/paxcount_pb.ts","../node_modules/@meshtastic/protobufs/lib/powermon_pb.ts","../node_modules/@meshtastic/protobufs/lib/remote_hardware_pb.ts","../node_modules/@meshtastic/protobufs/lib/rtttl_pb.ts","../node_modules/@meshtastic/protobufs/lib/storeforward_pb.ts","../src/types.ts","../src/utils/index.ts","../src/utils/eventSystem.ts","../src/utils/general.ts","../src/utils/queue.ts","../src/utils/transformHandler.ts","../src/utils/xmodem.ts","../src/adapters/bleConnection.ts","../src/adapters/httpConnection.ts","../src/adapters/serialConnection.ts","../src/client.ts"],"sourcesContent":["/** Bluetooth Low Energy ToRadio characteristic */\nexport const ToRadioUuid = \"f75c76d2-129e-4dad-a1dd-7866124401e7\";\n\n/** Bluetooth Low Energy FromRadio characteristic */\nexport const FromRadioUuid = \"2c55e69e-4993-11ed-b878-0242ac120002\";\n\n/**\n * Bluetooth Low Energy FromNum characteristic, provides BLE notification on new\n * FromRadio message and a message counter\n */\nexport const FromNumUuid = \"ed9da18c-a800-4f66-a670-aa7547e34453\";\n\n/** Bluetooth Service characteristic, used to identify Meshtastic devices */\nexport const ServiceUuid = \"6ba1b218-15a8-461f-9fa8-5dcae273eafd\";\n\n/** Broadcast destination number */\nexport const broadcastNum = 0xffffffff;\n\n/** Minimum device firmware version supported by this version of the library. */\nexport const minFwVer = 2.2;\n\nexport const Constants = {\n  ToRadioUuid,\n  FromRadioUuid,\n  FromNumUuid,\n  ServiceUuid,\n  broadcastNum,\n  minFwVer,\n};\n","import { Logger } from \"tslog\";\n\nimport { create, fromBinary, toBinary } from \"@bufbuild/protobuf\";\nimport * as Protobuf from \"@meshtastic/protobufs\";\n\nimport { broadcastNum, minFwVer } from \"./constants.ts\";\nimport * as Types from \"./types.ts\";\nimport { EventSystem, Queue, Xmodem } from \"./utils/index.ts\";\n\n/** Base class for connection methods to extend */\nexport abstract class MeshDevice {\n  /** Abstract property that states the connection type */\n  protected abstract connType: Types.ConnectionTypeName;\n\n  protected abstract portId: string;\n\n  /** Logs to the console and the logging event emitter */\n  protected log: Logger<unknown>;\n\n  /** Describes the current state of the device */\n  protected deviceStatus: Types.DeviceStatusEnum;\n\n  /** Describes the current state of the device */\n  protected isConfigured: boolean;\n\n  /** Are there any settings that have yet to be applied? */\n  protected pendingSettingsChanges: boolean;\n\n  /** Device's node number */\n  private myNodeInfo: Protobuf.Mesh.MyNodeInfo;\n\n  /** Randomly generated number to ensure confiuration lockstep */\n  public configId: number;\n\n  /**\n   * Packert queue, to space out transmissions and routing handle errors and\n   * acks\n   */\n  public queue: Queue;\n\n  public events: EventSystem;\n\n  public xModem: Xmodem;\n\n  constructor(configId?: number) {\n    this.log = new Logger({\n      name: \"iMeshDevice\",\n      prettyLogTemplate:\n        \"{{hh}}:{{MM}}:{{ss}}:{{ms}}\\t{{logLevelName}}\\t[{{name}}]\\t\",\n    });\n\n    this.deviceStatus = Types.DeviceStatusEnum.DeviceDisconnected;\n    this.isConfigured = false;\n    this.pendingSettingsChanges = false;\n    this.myNodeInfo = create(Protobuf.Mesh.MyNodeInfoSchema);\n    this.configId = configId ?? this.generateRandId();\n    this.queue = new Queue();\n    this.events = new EventSystem();\n    this.xModem = new Xmodem(this.sendRaw.bind(this)); //TODO: try wihtout bind\n\n    this.events.onDeviceStatus.subscribe((status) => {\n      this.deviceStatus = status;\n      if (status === Types.DeviceStatusEnum.DeviceConfigured) {\n        this.isConfigured = true;\n      } else if (status === Types.DeviceStatusEnum.DeviceConfiguring) {\n        this.isConfigured = false;\n      }\n    });\n\n    this.events.onMyNodeInfo.subscribe((myNodeInfo) => {\n      this.myNodeInfo = myNodeInfo;\n    });\n\n    this.events.onPendingSettingsChange.subscribe((state) => {\n      this.pendingSettingsChanges = state;\n    });\n  }\n\n  /** Abstract method that writes data to the radio */\n  protected abstract writeToRadio(data: Uint8Array): Promise<void>;\n\n  /** Abstract method that connects to the radio */\n  protected abstract connect(\n    parameters: Types.ConnectionParameters,\n  ): Promise<void>;\n\n  /** Abstract method that disconnects from the radio */\n  protected abstract disconnect(): void;\n\n  /** Abstract method that pings the radio */\n  protected abstract ping(): Promise<boolean>;\n\n  /**\n   * Sends a text over the radio\n   */\n  public async sendText(\n    text: string,\n    destination?: Types.Destination,\n    wantAck?: boolean,\n    channel?: Types.ChannelNumber,\n  ): Promise<number> {\n    this.log.debug(\n      Types.Emitter[Types.Emitter.SendText],\n      `📤 Sending message to ${destination ?? \"broadcast\"} on channel ${\n        channel?.toString() ?? 0\n      }`,\n    );\n\n    const enc = new TextEncoder();\n\n    return await this.sendPacket(\n      enc.encode(text),\n      Protobuf.Portnums.PortNum.TEXT_MESSAGE_APP,\n      destination ?? \"broadcast\",\n      channel,\n      wantAck,\n      false,\n      true,\n    );\n  }\n\n  /**\n   * Sends a text over the radio\n   */\n  public sendWaypoint(\n    waypointMessage: Protobuf.Mesh.Waypoint,\n    destination: Types.Destination,\n    channel?: Types.ChannelNumber,\n  ): Promise<number> {\n    this.log.debug(\n      Types.Emitter[Types.Emitter.SendWaypoint],\n      `📤 Sending waypoint to ${destination} on channel ${\n        channel?.toString() ?? 0\n      }`,\n    );\n\n    waypointMessage.id = this.generateRandId();\n\n    return this.sendPacket(\n      toBinary(Protobuf.Mesh.WaypointSchema, waypointMessage),\n      Protobuf.Portnums.PortNum.WAYPOINT_APP,\n      destination,\n      channel,\n      true,\n      false,\n    );\n  }\n\n  /**\n   * Sends packet over the radio\n   */\n  public async sendPacket(\n    byteData: Uint8Array,\n    portNum: Protobuf.Portnums.PortNum,\n    destination: Types.Destination,\n    channel: Types.ChannelNumber = Types.ChannelNumber.Primary,\n    wantAck = true,\n    wantResponse = true,\n    echoResponse = false,\n    replyId?: number,\n    emoji?: number,\n  ): Promise<number> {\n    this.log.trace(\n      Types.Emitter[Types.Emitter.SendPacket],\n      `📤 Sending ${Protobuf.Portnums.PortNum[portNum]} to ${destination}`,\n    );\n\n    const meshPacket = create(Protobuf.Mesh.MeshPacketSchema, {\n      payloadVariant: {\n        case: \"decoded\",\n        value: {\n          payload: byteData,\n          portnum: portNum,\n          wantResponse,\n          emoji,\n          replyId,\n          dest: 0, //change this!\n          requestId: 0, //change this!\n          source: 0, //change this!\n        },\n      },\n      from: this.myNodeInfo.myNodeNum,\n      to:\n        destination === \"broadcast\"\n          ? broadcastNum\n          : destination === \"self\"\n            ? this.myNodeInfo.myNodeNum\n            : destination,\n      id: this.generateRandId(),\n      wantAck: wantAck,\n      channel,\n    });\n\n    const toRadioMessage = create(Protobuf.Mesh.ToRadioSchema, {\n      payloadVariant: {\n        case: \"packet\",\n        value: meshPacket,\n      },\n    });\n\n    if (echoResponse) {\n      meshPacket.rxTime = Math.trunc(new Date().getTime() / 1000);\n      this.handleMeshPacket(meshPacket);\n    }\n    return await this.sendRaw(\n      toBinary(Protobuf.Mesh.ToRadioSchema, toRadioMessage),\n      meshPacket.id,\n    );\n  }\n\n  /**\n   * Sends raw packet over the radio\n   */\n  public async sendRaw(\n    toRadio: Uint8Array,\n    id: number = this.generateRandId(),\n  ): Promise<number> {\n    if (toRadio.length > 512) {\n      throw new Error(\"Message longer than 512 bytes, it will not be sent!\");\n    }\n    this.queue.push({\n      id,\n      data: toRadio,\n    });\n\n    await this.queue.processQueue(async (data) => {\n      await this.writeToRadio(data);\n    });\n\n    return this.queue.wait(id);\n  }\n\n  /**\n   * Writes config to device\n   */\n  public async setConfig(config: Protobuf.Config.Config): Promise<number> {\n    this.log.debug(\n      Types.Emitter[Types.Emitter.SetConfig],\n      `⚙️ Setting config, Variant: ${config.payloadVariant.case ?? \"Unknown\"}`,\n    );\n\n    if (!this.pendingSettingsChanges) {\n      await this.beginEditSettings();\n    }\n\n    const configMessage = create(Protobuf.Admin.AdminMessageSchema, {\n      payloadVariant: {\n        case: \"setConfig\",\n        value: config,\n      },\n    });\n\n    return this.sendPacket(\n      toBinary(Protobuf.Admin.AdminMessageSchema, configMessage),\n      Protobuf.Portnums.PortNum.ADMIN_APP,\n      \"self\",\n    );\n  }\n\n  /**\n   * Writes module config to device\n   */\n  public async setModuleConfig(\n    moduleConfig: Protobuf.ModuleConfig.ModuleConfig,\n  ): Promise<number> {\n    this.log.debug(\n      Types.Emitter[Types.Emitter.SetModuleConfig],\n      \"⚙️ Setting module config\",\n    );\n\n    const moduleConfigMessage = create(Protobuf.Admin.AdminMessageSchema, {\n      payloadVariant: {\n        case: \"setModuleConfig\",\n        value: moduleConfig,\n      },\n    });\n\n    return await this.sendPacket(\n      toBinary(Protobuf.Admin.AdminMessageSchema, moduleConfigMessage),\n      Protobuf.Portnums.PortNum.ADMIN_APP,\n      \"self\",\n    );\n  }\n\n  // Write cannedMessages to device\n  public async setCannedMessages(\n    cannedMessages: Protobuf.CannedMessages.CannedMessageModuleConfig,\n  ): Promise<number> {\n    this.log.debug(\n      Types.Emitter[Types.Emitter.SetCannedMessages],\n      \"⚙️ Setting CannedMessages\",\n    );\n\n    const cannedMessagesMessage = create(Protobuf.Admin.AdminMessageSchema, {\n      payloadVariant: {\n        case: \"setCannedMessageModuleMessages\",\n        value: cannedMessages.messages,\n      },\n    });\n\n    return await this.sendPacket(\n      toBinary(Protobuf.Admin.AdminMessageSchema, cannedMessagesMessage),\n      Protobuf.Portnums.PortNum.ADMIN_APP,\n      \"self\",\n    );\n  }\n\n  /**\n   * Sets devices owner data\n   */\n  public async setOwner(owner: Protobuf.Mesh.User): Promise<number> {\n    this.log.debug(Types.Emitter[Types.Emitter.SetOwner], \"👤 Setting owner\");\n\n    const setOwnerMessage = create(Protobuf.Admin.AdminMessageSchema, {\n      payloadVariant: {\n        case: \"setOwner\",\n        value: owner,\n      },\n    });\n\n    return await this.sendPacket(\n      toBinary(Protobuf.Admin.AdminMessageSchema, setOwnerMessage),\n      Protobuf.Portnums.PortNum.ADMIN_APP,\n      \"self\",\n    );\n  }\n\n  /**\n   * Sets devices ChannelSettings\n   */\n  public async setChannel(channel: Protobuf.Channel.Channel): Promise<number> {\n    this.log.debug(\n      Types.Emitter[Types.Emitter.SetChannel],\n      `📻 Setting Channel: ${channel.index}`,\n    );\n\n    const setChannelMessage = create(Protobuf.Admin.AdminMessageSchema, {\n      payloadVariant: {\n        case: \"setChannel\",\n        value: channel,\n      },\n    });\n\n    return await this.sendPacket(\n      toBinary(Protobuf.Admin.AdminMessageSchema, setChannelMessage),\n      Protobuf.Portnums.PortNum.ADMIN_APP,\n      \"self\",\n    );\n  }\n  public async enterDfuMode(): Promise<number> {\n    this.log.debug(\n      Types.Emitter[Types.Emitter.EnterDfuMode],\n      \"🔌 Entering DFU mode\",\n    );\n\n    const enterDfuModeRequest = create(Protobuf.Admin.AdminMessageSchema, {\n      payloadVariant: {\n        case: \"enterDfuModeRequest\",\n        value: true,\n      },\n    });\n    return await this.sendPacket(\n      toBinary(Protobuf.Admin.AdminMessageSchema, enterDfuModeRequest),\n      Protobuf.Portnums.PortNum.ADMIN_APP,\n      \"self\",\n    );\n  }\n\n  public async setPosition(\n    positionMessage: Protobuf.Mesh.Position,\n  ): Promise<number> {\n    return await this.sendPacket(\n      toBinary(Protobuf.Mesh.PositionSchema, positionMessage),\n      Protobuf.Portnums.PortNum.POSITION_APP,\n      \"self\",\n    );\n  }\n\n  /**\n   * Gets specified channel information from the radio\n   */\n  public async getChannel(index: number): Promise<number> {\n    this.log.debug(\n      Types.Emitter[Types.Emitter.GetChannel],\n      `📻 Requesting Channel: ${index}`,\n    );\n\n    const getChannelRequestMessage = create(Protobuf.Admin.AdminMessageSchema, {\n      payloadVariant: {\n        case: \"getChannelRequest\",\n        value: index + 1,\n      },\n    });\n\n    return await this.sendPacket(\n      toBinary(Protobuf.Admin.AdminMessageSchema, getChannelRequestMessage),\n      Protobuf.Portnums.PortNum.ADMIN_APP,\n      \"self\",\n    );\n  }\n\n  /**\n   * Gets devices config\n   *   request\n   */\n  public async getConfig(\n    configType: Protobuf.Admin.AdminMessage_ConfigType,\n  ): Promise<number> {\n    this.log.debug(\n      Types.Emitter[Types.Emitter.GetConfig],\n      \"⚙️ Requesting config\",\n    );\n\n    const getRadioRequestMessage = create(Protobuf.Admin.AdminMessageSchema, {\n      payloadVariant: {\n        case: \"getConfigRequest\",\n        value: configType,\n      },\n    });\n\n    return await this.sendPacket(\n      toBinary(Protobuf.Admin.AdminMessageSchema, getRadioRequestMessage),\n      Protobuf.Portnums.PortNum.ADMIN_APP,\n      \"self\",\n    );\n  }\n\n  /**\n   * Gets Module config\n   */\n  public async getModuleConfig(\n    moduleConfigType: Protobuf.Admin.AdminMessage_ModuleConfigType,\n  ): Promise<number> {\n    this.log.debug(\n      Types.Emitter[Types.Emitter.GetModuleConfig],\n      \"⚙️ Requesting module config\",\n    );\n\n    const getRadioRequestMessage = create(Protobuf.Admin.AdminMessageSchema, {\n      payloadVariant: {\n        case: \"getModuleConfigRequest\",\n        value: moduleConfigType,\n      },\n    });\n\n    return await this.sendPacket(\n      toBinary(Protobuf.Admin.AdminMessageSchema, getRadioRequestMessage),\n      Protobuf.Portnums.PortNum.ADMIN_APP,\n      \"self\",\n    );\n  }\n\n  /** Gets devices Owner */\n  public async getOwner(): Promise<number> {\n    this.log.debug(\n      Types.Emitter[Types.Emitter.GetOwner],\n      \"👤 Requesting owner\",\n    );\n\n    const getOwnerRequestMessage = create(Protobuf.Admin.AdminMessageSchema, {\n      payloadVariant: {\n        case: \"getOwnerRequest\",\n        value: true,\n      },\n    });\n\n    return await this.sendPacket(\n      toBinary(Protobuf.Admin.AdminMessageSchema, getOwnerRequestMessage),\n      Protobuf.Portnums.PortNum.ADMIN_APP,\n      \"self\",\n    );\n  }\n\n  /**\n   * Gets devices metadata\n   */\n  public async getMetadata(nodeNum: number): Promise<number> {\n    this.log.debug(\n      Types.Emitter[Types.Emitter.GetMetadata],\n      `🏷️ Requesting metadata from ${nodeNum}`,\n    );\n\n    const getDeviceMetricsRequestMessage = create(\n      Protobuf.Admin.AdminMessageSchema,\n      {\n        payloadVariant: {\n          case: \"getDeviceMetadataRequest\",\n          value: true,\n        },\n      },\n    );\n\n    return await this.sendPacket(\n      toBinary(\n        Protobuf.Admin.AdminMessageSchema,\n        getDeviceMetricsRequestMessage,\n      ),\n      Protobuf.Portnums.PortNum.ADMIN_APP,\n      nodeNum,\n      Types.ChannelNumber.Admin,\n    );\n  }\n\n  /**\n   * Clears specific channel with the designated index\n   */\n  public async clearChannel(index: number): Promise<number> {\n    this.log.debug(\n      Types.Emitter[Types.Emitter.ClearChannel],\n      `📻 Clearing Channel ${index}`,\n    );\n\n    const channel = create(Protobuf.Channel.ChannelSchema, {\n      index,\n      role: Protobuf.Channel.Channel_Role.DISABLED,\n    });\n    const setChannelMessage = create(Protobuf.Admin.AdminMessageSchema, {\n      payloadVariant: {\n        case: \"setChannel\",\n        value: channel,\n      },\n    });\n\n    return await this.sendPacket(\n      toBinary(Protobuf.Admin.AdminMessageSchema, setChannelMessage),\n      Protobuf.Portnums.PortNum.ADMIN_APP,\n      \"self\",\n    );\n  }\n\n  private async beginEditSettings(): Promise<number> {\n    this.events.onPendingSettingsChange.dispatch(true);\n\n    const beginEditSettings = create(Protobuf.Admin.AdminMessageSchema, {\n      payloadVariant: {\n        case: \"beginEditSettings\",\n        value: true,\n      },\n    });\n\n    return await this.sendPacket(\n      toBinary(Protobuf.Admin.AdminMessageSchema, beginEditSettings),\n      Protobuf.Portnums.PortNum.ADMIN_APP,\n      \"self\",\n    );\n  }\n\n  public async commitEditSettings(): Promise<number> {\n    this.events.onPendingSettingsChange.dispatch(false);\n\n    const commitEditSettings = create(Protobuf.Admin.AdminMessageSchema, {\n      payloadVariant: {\n        case: \"commitEditSettings\",\n        value: true,\n      },\n    });\n\n    return await this.sendPacket(\n      toBinary(Protobuf.Admin.AdminMessageSchema, commitEditSettings),\n      Protobuf.Portnums.PortNum.ADMIN_APP,\n      \"self\",\n    );\n  }\n\n  /**\n   * Resets the internal NodeDB of the radio, usefull for removing old nodes\n   * that no longer exist.\n   */\n  public async resetNodes(): Promise<number> {\n    this.log.debug(\n      Types.Emitter[Types.Emitter.ResetNodes],\n      \"📻 Resetting NodeDB\",\n    );\n\n    const resetNodes = create(Protobuf.Admin.AdminMessageSchema, {\n      payloadVariant: {\n        case: \"nodedbReset\",\n        value: 1,\n      },\n    });\n\n    return await this.sendPacket(\n      toBinary(Protobuf.Admin.AdminMessageSchema, resetNodes),\n      Protobuf.Portnums.PortNum.ADMIN_APP,\n      \"self\",\n    );\n  }\n\n  /**\n   * Removes a node from the internal NodeDB of the radio by node number\n   */\n  public async removeNodeByNum(nodeNum: number): Promise<number> {\n    this.log.debug(\n      Types.Emitter[Types.Emitter.RemoveNodeByNum],\n      `📻 Removing Node ${nodeNum} from NodeDB`,\n    );\n\n    const removeNodeByNum = create(Protobuf.Admin.AdminMessageSchema, {\n      payloadVariant: {\n        case: \"removeByNodenum\",\n        value: nodeNum,\n      },\n    });\n\n    return await this.sendPacket(\n      toBinary(Protobuf.Admin.AdminMessageSchema, removeNodeByNum),\n      Protobuf.Portnums.PortNum.ADMIN_APP,\n      \"self\",\n    );\n  }\n\n  /** Shuts down the current node after the specified amount of time has elapsed. */\n  public async shutdown(time: number): Promise<number> {\n    this.log.debug(\n      Types.Emitter[Types.Emitter.Shutdown],\n      `🔌 Shutting down ${time > 2 ? \"now\" : `in ${time} seconds`}`,\n    );\n\n    const shutdown = create(Protobuf.Admin.AdminMessageSchema, {\n      payloadVariant: {\n        case: \"shutdownSeconds\",\n        value: time,\n      },\n    });\n\n    return await this.sendPacket(\n      toBinary(Protobuf.Admin.AdminMessageSchema, shutdown),\n      Protobuf.Portnums.PortNum.ADMIN_APP,\n      \"self\",\n    );\n  }\n\n  /** Reboots the current node after the specified amount of time has elapsed. */\n  public async reboot(time: number): Promise<number> {\n    this.log.debug(\n      Types.Emitter[Types.Emitter.Reboot],\n      `🔌 Rebooting node ${time > 0 ? \"now\" : `in ${time} seconds`}`,\n    );\n\n    const reboot = create(Protobuf.Admin.AdminMessageSchema, {\n      payloadVariant: {\n        case: \"rebootSeconds\",\n        value: time,\n      },\n    });\n\n    return await this.sendPacket(\n      toBinary(Protobuf.Admin.AdminMessageSchema, reboot),\n      Protobuf.Portnums.PortNum.ADMIN_APP,\n      \"self\",\n    );\n  }\n\n  /**\n   * Reboots the current node into OTA mode after the specified amount of time\n   * has elapsed.\n   */\n  public async rebootOta(time: number): Promise<number> {\n    this.log.debug(\n      Types.Emitter[Types.Emitter.RebootOta],\n      `🔌 Rebooting into OTA mode ${time > 0 ? \"now\" : `in ${time} seconds`}`,\n    );\n\n    const rebootOta = create(Protobuf.Admin.AdminMessageSchema, {\n      payloadVariant: {\n        case: \"rebootOtaSeconds\",\n        value: time,\n      },\n    });\n\n    return await this.sendPacket(\n      toBinary(Protobuf.Admin.AdminMessageSchema, rebootOta),\n      Protobuf.Portnums.PortNum.ADMIN_APP,\n      \"self\",\n    );\n  }\n\n  /** Factory resets the current device */\n  // public async factoryResetDevice(): Promise<number> {\n  //   this.log.debug(\n  //     Types.Emitter[Types.Emitter.FactoryReset],\n  //     \"♻️ Factory resetting device\",\n  //   );\n\n  //   const factoryReset = new Protobuf.Admin.AdminMessage({\n  //     payloadVariant: {\n  //       case: \"factoryResetDevice\",\n  //       value: 1,\n  //     },\n  //   });\n\n  //   return await this.sendPacket(\n  //     factoryReset.toBinary(),\n  //     Protobuf.Portnums.PortNum.ADMIN_APP,\n  //     \"self\",\n  //   );\n  // }\n\n  /** Factory resets the current config */\n  // public async factoryResetConfig(): Promise<number> {\n  //   this.log.debug(\n  //     Types.Emitter[Types.Emitter.FactoryReset],\n  //     \"♻️ Factory resetting config\",\n  //   );\n\n  //   const factoryReset = new Protobuf.Admin.AdminMessage({\n  //     payloadVariant: {\n  //       case: \"factoryResetConfig\",\n  //       value: 1,\n  //     },\n  //   });\n\n  //   return await this.sendPacket(\n  //     factoryReset.toBinary(),\n  //     Protobuf.Portnums.PortNum.ADMIN_APP,\n  //     \"self\",\n  //   );\n  // }\n\n  /** Triggers the device configure process */\n  public configure(): Promise<number> {\n    this.log.debug(\n      Types.Emitter[Types.Emitter.Configure],\n      \"⚙️ Requesting device configuration\",\n    );\n    this.updateDeviceStatus(Types.DeviceStatusEnum.DeviceConfiguring);\n\n    const toRadio = create(Protobuf.Mesh.ToRadioSchema, {\n      payloadVariant: {\n        case: \"wantConfigId\",\n        value: this.configId,\n      },\n    });\n\n    return this.sendRaw(toBinary(Protobuf.Mesh.ToRadioSchema, toRadio));\n  }\n\n  /** Serial connection requires a heartbeat ping to stay connected, otherwise times out after 15 minutes */\n  public heartbeat(): Promise<number> {\n    this.log.debug(\n      Types.Emitter[Types.Emitter.Ping],\n      \"❤️ Send heartbeat ping to radio\",\n    );\n\n    const toRadio = create(Protobuf.Mesh.ToRadioSchema, {\n      payloadVariant: {\n        case: \"heartbeat\",\n        value: {},\n      },\n    });\n\n    return this.sendRaw(toBinary(Protobuf.Mesh.ToRadioSchema, toRadio));\n  }\n\n  /** Sends a trace route packet to the designated node */\n  public async traceRoute(destination: number): Promise<number> {\n    const routeDiscovery = create(Protobuf.Mesh.RouteDiscoverySchema, {\n      route: [],\n    });\n\n    return await this.sendPacket(\n      toBinary(Protobuf.Mesh.RouteDiscoverySchema, routeDiscovery),\n      Protobuf.Portnums.PortNum.TRACEROUTE_APP,\n      destination,\n    );\n  }\n\n  /** Requests position from the designated node */\n  public async requestPosition(destination: number): Promise<number> {\n    return await this.sendPacket(\n      new Uint8Array(),\n      Protobuf.Portnums.PortNum.POSITION_APP,\n      destination,\n    );\n  }\n\n  /**\n   * Updates the device status eliminating duplicate status events\n   */\n  public updateDeviceStatus(status: Types.DeviceStatusEnum): void {\n    if (status !== this.deviceStatus) {\n      this.events.onDeviceStatus.dispatch(status);\n    }\n  }\n\n  /**\n   * Generates random packet identifier\n   *\n   * @returns {number} Random packet ID\n   */\n  private generateRandId(): number {\n    const seed = crypto.getRandomValues(new Uint32Array(1));\n    if (!seed[0]) {\n      throw new Error(\"Cannot generate CSPRN\");\n    }\n\n    return Math.floor(seed[0] * 2 ** -32 * 1e9);\n  }\n\n  /**\n   * Gets called whenever a fromRadio message is received from device, returns\n   * fromRadio data\n   */\n  protected handleFromRadio(fromRadio: Uint8Array): void {\n    const decodedMessage = fromBinary(Protobuf.Mesh.FromRadioSchema, fromRadio);\n    this.events.onFromRadio.dispatch(decodedMessage);\n\n    /** @todo Add map here when `all=true` gets fixed. */\n    switch (decodedMessage.payloadVariant.case) {\n      case \"packet\": {\n        this.handleMeshPacket(decodedMessage.payloadVariant.value);\n        break;\n      }\n\n      case \"myInfo\": {\n        this.events.onMyNodeInfo.dispatch(decodedMessage.payloadVariant.value);\n        this.log.info(\n          Types.Emitter[Types.Emitter.HandleFromRadio],\n          \"📱 Received Node info for this device\",\n        );\n        break;\n      }\n\n      case \"nodeInfo\": {\n        this.log.info(\n          Types.Emitter[Types.Emitter.HandleFromRadio],\n          `📱 Received Node Info packet for node: ${decodedMessage.payloadVariant.value.num}`,\n        );\n\n        this.events.onNodeInfoPacket.dispatch(\n          decodedMessage.payloadVariant.value,\n        );\n\n        //TODO: HERE\n        if (decodedMessage.payloadVariant.value?.position) {\n          this.events.onPositionPacket.dispatch({\n            id: decodedMessage.id,\n            rxTime: new Date(),\n            from: decodedMessage.payloadVariant.value.num,\n            to: decodedMessage.payloadVariant.value.num,\n            type: \"direct\",\n            channel: Types.ChannelNumber.Primary,\n            data: decodedMessage.payloadVariant.value.position,\n          });\n        }\n\n        //TODO: HERE\n        if (decodedMessage.payloadVariant.value.user) {\n          this.events.onUserPacket.dispatch({\n            id: decodedMessage.id,\n            rxTime: new Date(),\n            from: decodedMessage.payloadVariant.value.num,\n            to: decodedMessage.payloadVariant.value.num,\n            type: \"direct\",\n            channel: Types.ChannelNumber.Primary,\n            data: decodedMessage.payloadVariant.value.user,\n          });\n        }\n        break;\n      }\n\n      case \"config\": {\n        if (decodedMessage.payloadVariant.value.payloadVariant.case) {\n          this.log.trace(\n            Types.Emitter[Types.Emitter.HandleFromRadio],\n            `💾 Received Config packet of variant: ${decodedMessage.payloadVariant.value.payloadVariant.case}`,\n          );\n        } else {\n          this.log.warn(\n            Types.Emitter[Types.Emitter.HandleFromRadio],\n            `⚠️ Received Config packet of variant: ${\"UNK\"}`,\n          );\n        }\n\n        this.events.onConfigPacket.dispatch(\n          decodedMessage.payloadVariant.value,\n        );\n        break;\n      }\n\n      case \"logRecord\": {\n        this.log.trace(\n          Types.Emitter[Types.Emitter.HandleFromRadio],\n          \"Received onLogRecord\",\n        );\n        this.events.onLogRecord.dispatch(decodedMessage.payloadVariant.value);\n        break;\n      }\n\n      case \"configCompleteId\": {\n        if (decodedMessage.payloadVariant.value !== this.configId) {\n          this.log.error(\n            Types.Emitter[Types.Emitter.HandleFromRadio],\n            `❌ Invalid config id received from device, expected ${this.configId} but received ${decodedMessage.payloadVariant.value}`,\n          );\n        }\n\n        this.log.info(\n          Types.Emitter[Types.Emitter.HandleFromRadio],\n          `⚙️ Valid config id received from device: ${this.configId}`,\n        );\n\n        this.updateDeviceStatus(Types.DeviceStatusEnum.DeviceConfigured);\n        break;\n      }\n\n      case \"rebooted\": {\n        this.configure().catch(() => {\n          // TODO: FIX, workaround for `wantConfigId` not getting acks.\n        });\n        break;\n      }\n\n      case \"moduleConfig\": {\n        if (decodedMessage.payloadVariant.value.payloadVariant.case) {\n          this.log.trace(\n            Types.Emitter[Types.Emitter.HandleFromRadio],\n            `💾 Received Module Config packet of variant: ${decodedMessage.payloadVariant.value.payloadVariant.case}`,\n          );\n        } else {\n          this.log.warn(\n            Types.Emitter[Types.Emitter.HandleFromRadio],\n            \"⚠️ Received Module Config packet of variant: UNK\",\n          );\n        }\n\n        this.events.onModuleConfigPacket.dispatch(\n          decodedMessage.payloadVariant.value,\n        );\n        break;\n      }\n\n      case \"channel\": {\n        this.log.trace(\n          Types.Emitter[Types.Emitter.HandleFromRadio],\n          `🔐 Received Channel: ${decodedMessage.payloadVariant.value.index}`,\n        );\n\n        this.events.onChannelPacket.dispatch(\n          decodedMessage.payloadVariant.value,\n        );\n        break;\n      }\n\n      case \"queueStatus\": {\n        this.log.trace(\n          Types.Emitter[Types.Emitter.HandleFromRadio],\n          `🚧 Received Queue Status: ${decodedMessage.payloadVariant.value}`,\n        );\n\n        this.events.onQueueStatus.dispatch(decodedMessage.payloadVariant.value);\n        break;\n      }\n\n      case \"xmodemPacket\": {\n        this.xModem.handlePacket(decodedMessage.payloadVariant.value);\n        break;\n      }\n\n      case \"metadata\": {\n        if (\n          Number.parseFloat(\n            decodedMessage.payloadVariant.value.firmwareVersion,\n          ) < minFwVer\n        ) {\n          this.log.fatal(\n            Types.Emitter[Types.Emitter.HandleFromRadio],\n            `Device firmware outdated. Min supported: ${minFwVer} got : ${decodedMessage.payloadVariant.value.firmwareVersion}`,\n          );\n        }\n        this.log.debug(\n          Types.Emitter[Types.Emitter.GetMetadata],\n          \"🏷️ Received metadata packet\",\n        );\n\n        this.events.onDeviceMetadataPacket.dispatch({\n          id: decodedMessage.id,\n          rxTime: new Date(),\n          from: 0,\n          to: 0,\n          type: \"direct\",\n          channel: Types.ChannelNumber.Primary,\n          data: decodedMessage.payloadVariant.value,\n        });\n        break;\n      }\n\n      case \"mqttClientProxyMessage\": {\n        break;\n      }\n\n      default: {\n        this.log.warn(\n          Types.Emitter[Types.Emitter.HandleFromRadio],\n          `⚠️ Unhandled payload variant: ${decodedMessage.payloadVariant.case}`,\n        );\n      }\n    }\n  }\n\n  /** Completes all Events */\n  public complete(): void {\n    this.queue.clear();\n  }\n\n  /**\n   * Gets called when a MeshPacket is received from device\n   */\n  private handleMeshPacket(meshPacket: Protobuf.Mesh.MeshPacket): void {\n    this.events.onMeshPacket.dispatch(meshPacket);\n    if (meshPacket.from !== this.myNodeInfo.myNodeNum) {\n      /**\n       * TODO: this shouldn't be called unless the device interracts with the\n       * mesh, currently it does.\n       */\n      this.events.onMeshHeartbeat.dispatch(new Date());\n    }\n\n    switch (meshPacket.payloadVariant.case) {\n      case \"decoded\": {\n        this.handleDecodedPacket(meshPacket.payloadVariant.value, meshPacket);\n        break;\n      }\n\n      case \"encrypted\": {\n        this.log.debug(\n          Types.Emitter[Types.Emitter.HandleMeshPacket],\n          \"🔐 Device received encrypted data packet, ignoring.\",\n        );\n        break;\n      }\n\n      default:\n        throw new Error(`Unhandled case ${meshPacket.payloadVariant.case}`);\n    }\n  }\n\n  private handleDecodedPacket(\n    dataPacket: Protobuf.Mesh.Data,\n    meshPacket: Protobuf.Mesh.MeshPacket,\n  ) {\n    let adminMessage: Protobuf.Admin.AdminMessage | undefined = undefined;\n    let routingPacket: Protobuf.Mesh.Routing | undefined = undefined;\n\n    const packetMetadata: Omit<Types.PacketMetadata<unknown>, \"data\"> = {\n      id: meshPacket.id,\n      rxTime: new Date(meshPacket.rxTime * 1000),\n      type: meshPacket.to === broadcastNum ? \"broadcast\" : \"direct\",\n      from: meshPacket.from,\n      to: meshPacket.to,\n      channel: meshPacket.channel,\n    };\n\n    this.log.trace(\n      Types.Emitter[Types.Emitter.HandleMeshPacket],\n      `📦 Received ${Protobuf.Portnums.PortNum[dataPacket.portnum]} packet`,\n    );\n\n    switch (dataPacket.portnum) {\n      case Protobuf.Portnums.PortNum.TEXT_MESSAGE_APP: {\n        this.events.onMessagePacket.dispatch({\n          ...packetMetadata,\n          data: new TextDecoder().decode(dataPacket.payload),\n        });\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.REMOTE_HARDWARE_APP: {\n        this.events.onRemoteHardwarePacket.dispatch({\n          ...packetMetadata,\n          data: fromBinary(\n            Protobuf.RemoteHardware.HardwareMessageSchema,\n            dataPacket.payload,\n          ),\n        });\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.POSITION_APP: {\n        this.events.onPositionPacket.dispatch({\n          ...packetMetadata,\n          data: fromBinary(Protobuf.Mesh.PositionSchema, dataPacket.payload),\n        });\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.NODEINFO_APP: {\n        this.events.onUserPacket.dispatch({\n          ...packetMetadata,\n          data: fromBinary(Protobuf.Mesh.UserSchema, dataPacket.payload),\n        });\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.ROUTING_APP: {\n        routingPacket = fromBinary(\n          Protobuf.Mesh.RoutingSchema,\n          dataPacket.payload,\n        );\n\n        this.events.onRoutingPacket.dispatch({\n          ...packetMetadata,\n          data: routingPacket,\n        });\n        switch (routingPacket.variant.case) {\n          case \"errorReason\": {\n            if (\n              routingPacket.variant.value === Protobuf.Mesh.Routing_Error.NONE\n            ) {\n              this.queue.processAck(dataPacket.requestId);\n            } else {\n              this.queue.processError({\n                id: dataPacket.requestId,\n                error: routingPacket.variant.value,\n              });\n            }\n\n            break;\n          }\n          case \"routeReply\": {\n            break;\n          }\n          case \"routeRequest\": {\n            break;\n          }\n\n          default: {\n            throw new Error(`Unhandled case ${routingPacket.variant.case}`);\n          }\n        }\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.ADMIN_APP: {\n        adminMessage = fromBinary(\n          Protobuf.Admin.AdminMessageSchema,\n          dataPacket.payload,\n        );\n        switch (adminMessage.payloadVariant.case) {\n          case \"getChannelResponse\": {\n            this.events.onChannelPacket.dispatch(\n              adminMessage.payloadVariant.value,\n            );\n            break;\n          }\n          case \"getOwnerResponse\": {\n            this.events.onUserPacket.dispatch({\n              ...packetMetadata,\n              data: adminMessage.payloadVariant.value,\n            });\n            break;\n          }\n          case \"getConfigResponse\": {\n            this.events.onConfigPacket.dispatch(\n              adminMessage.payloadVariant.value,\n            );\n            break;\n          }\n          case \"getModuleConfigResponse\": {\n            this.events.onModuleConfigPacket.dispatch(\n              adminMessage.payloadVariant.value,\n            );\n            break;\n          }\n          case \"getDeviceMetadataResponse\": {\n            this.log.debug(\n              Types.Emitter[Types.Emitter.GetMetadata],\n              `🏷️ Received metadata packet from ${dataPacket.source}`,\n            );\n\n            this.events.onDeviceMetadataPacket.dispatch({\n              ...packetMetadata,\n              data: adminMessage.payloadVariant.value,\n            });\n            break;\n          }\n          default: {\n            this.log.error(\n              Types.Emitter[Types.Emitter.HandleMeshPacket],\n              `⚠️ Received unhandled AdminMessage, type ${\n                adminMessage.payloadVariant.case ?? \"undefined\"\n              }`,\n              dataPacket.payload,\n            );\n          }\n        }\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.WAYPOINT_APP: {\n        this.events.onWaypointPacket.dispatch({\n          ...packetMetadata,\n          data: fromBinary(Protobuf.Mesh.WaypointSchema, dataPacket.payload),\n        });\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.AUDIO_APP: {\n        this.events.onAudioPacket.dispatch({\n          ...packetMetadata,\n          data: dataPacket.payload,\n        });\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.DETECTION_SENSOR_APP: {\n        this.events.onDetectionSensorPacket.dispatch({\n          ...packetMetadata,\n          data: dataPacket.payload,\n        });\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.REPLY_APP: {\n        this.events.onPingPacket.dispatch({\n          ...packetMetadata,\n          data: dataPacket.payload, //TODO: decode\n        });\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.IP_TUNNEL_APP: {\n        this.events.onIpTunnelPacket.dispatch({\n          ...packetMetadata,\n          data: dataPacket.payload,\n        });\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.PAXCOUNTER_APP: {\n        this.events.onPaxcounterPacket.dispatch({\n          ...packetMetadata,\n          data: fromBinary(\n            Protobuf.PaxCount.PaxcountSchema,\n            dataPacket.payload,\n          ),\n        });\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.SERIAL_APP: {\n        this.events.onSerialPacket.dispatch({\n          ...packetMetadata,\n          data: dataPacket.payload,\n        });\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.STORE_FORWARD_APP: {\n        this.events.onStoreForwardPacket.dispatch({\n          ...packetMetadata,\n          data: dataPacket.payload,\n        });\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.RANGE_TEST_APP: {\n        this.events.onRangeTestPacket.dispatch({\n          ...packetMetadata,\n          data: dataPacket.payload,\n        });\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.TELEMETRY_APP: {\n        this.events.onTelemetryPacket.dispatch({\n          ...packetMetadata,\n          data: fromBinary(\n            Protobuf.Telemetry.TelemetrySchema,\n            dataPacket.payload,\n          ),\n        });\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.ZPS_APP: {\n        this.events.onZpsPacket.dispatch({\n          ...packetMetadata,\n          data: dataPacket.payload,\n        });\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.SIMULATOR_APP: {\n        this.events.onSimulatorPacket.dispatch({\n          ...packetMetadata,\n          data: dataPacket.payload,\n        });\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.TRACEROUTE_APP: {\n        this.events.onTraceRoutePacket.dispatch({\n          ...packetMetadata,\n          data: fromBinary(\n            Protobuf.Mesh.RouteDiscoverySchema,\n            dataPacket.payload,\n          ),\n        });\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.NEIGHBORINFO_APP: {\n        this.events.onNeighborInfoPacket.dispatch({\n          ...packetMetadata,\n          data: fromBinary(\n            Protobuf.Mesh.NeighborInfoSchema,\n            dataPacket.payload,\n          ),\n        });\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.ATAK_PLUGIN: {\n        this.events.onAtakPluginPacket.dispatch({\n          ...packetMetadata,\n          data: dataPacket.payload,\n        });\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.MAP_REPORT_APP: {\n        this.events.onMapReportPacket.dispatch({\n          ...packetMetadata,\n          data: dataPacket.payload,\n        });\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.PRIVATE_APP: {\n        this.events.onPrivatePacket.dispatch({\n          ...packetMetadata,\n          data: dataPacket.payload,\n        });\n        break;\n      }\n\n      case Protobuf.Portnums.PortNum.ATAK_FORWARDER: {\n        this.events.onAtakForwarderPacket.dispatch({\n          ...packetMetadata,\n          data: dataPacket.payload,\n        });\n        break;\n      }\n\n      default:\n        throw new Error(`Unhandled case ${dataPacket.portnum}`);\n    }\n  }\n}\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Determine whether the given `arg` is a message.\n * If `desc` is set, determine whether `arg` is this specific message.\n */\nexport function isMessage(arg, schema) {\n    const isMessage = arg !== null &&\n        typeof arg == \"object\" &&\n        \"$typeName\" in arg &&\n        typeof arg.$typeName == \"string\";\n    if (!isMessage) {\n        return false;\n    }\n    if (schema === undefined) {\n        return true;\n    }\n    return schema.typeName === arg.$typeName;\n}\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Scalar value types. This is a subset of field types declared by protobuf\n * enum google.protobuf.FieldDescriptorProto.Type The types GROUP and MESSAGE\n * are omitted, but the numerical values are identical.\n */\nexport var ScalarType;\n(function (ScalarType) {\n    // 0 is reserved for errors.\n    // Order is weird for historical reasons.\n    ScalarType[ScalarType[\"DOUBLE\"] = 1] = \"DOUBLE\";\n    ScalarType[ScalarType[\"FLOAT\"] = 2] = \"FLOAT\";\n    // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if\n    // negative values are likely.\n    ScalarType[ScalarType[\"INT64\"] = 3] = \"INT64\";\n    ScalarType[ScalarType[\"UINT64\"] = 4] = \"UINT64\";\n    // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if\n    // negative values are likely.\n    ScalarType[ScalarType[\"INT32\"] = 5] = \"INT32\";\n    ScalarType[ScalarType[\"FIXED64\"] = 6] = \"FIXED64\";\n    ScalarType[ScalarType[\"FIXED32\"] = 7] = \"FIXED32\";\n    ScalarType[ScalarType[\"BOOL\"] = 8] = \"BOOL\";\n    ScalarType[ScalarType[\"STRING\"] = 9] = \"STRING\";\n    // Tag-delimited aggregate.\n    // Group type is deprecated and not supported in proto3. However, Proto3\n    // implementations should still be able to parse the group wire format and\n    // treat group fields as unknown fields.\n    // TYPE_GROUP = 10,\n    // TYPE_MESSAGE = 11,  // Length-delimited aggregate.\n    // New in version 2.\n    ScalarType[ScalarType[\"BYTES\"] = 12] = \"BYTES\";\n    ScalarType[ScalarType[\"UINT32\"] = 13] = \"UINT32\";\n    // TYPE_ENUM = 14,\n    ScalarType[ScalarType[\"SFIXED32\"] = 15] = \"SFIXED32\";\n    ScalarType[ScalarType[\"SFIXED64\"] = 16] = \"SFIXED64\";\n    ScalarType[ScalarType[\"SINT32\"] = 17] = \"SINT32\";\n    ScalarType[ScalarType[\"SINT64\"] = 18] = \"SINT64\";\n})(ScalarType || (ScalarType = {}));\n","// Copyright 2008 Google Inc.  All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n// Code generated by the Protocol Buffer compiler is owned by the owner\n// of the input file used when generating it.  This code is not\n// standalone and requires a support library to be linked with it.  This\n// support library is itself covered by the above license.\n/* eslint-disable prefer-const,@typescript-eslint/restrict-plus-operands */\n/**\n * Read a 64 bit varint as two JS numbers.\n *\n * Returns tuple:\n * [0]: low bits\n * [1]: high bits\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L175\n */\nexport function varint64read() {\n    let lowBits = 0;\n    let highBits = 0;\n    for (let shift = 0; shift < 28; shift += 7) {\n        let b = this.buf[this.pos++];\n        lowBits |= (b & 0x7f) << shift;\n        if ((b & 0x80) == 0) {\n            this.assertBounds();\n            return [lowBits, highBits];\n        }\n    }\n    let middleByte = this.buf[this.pos++];\n    // last four bits of the first 32 bit number\n    lowBits |= (middleByte & 0x0f) << 28;\n    // 3 upper bits are part of the next 32 bit number\n    highBits = (middleByte & 0x70) >> 4;\n    if ((middleByte & 0x80) == 0) {\n        this.assertBounds();\n        return [lowBits, highBits];\n    }\n    for (let shift = 3; shift <= 31; shift += 7) {\n        let b = this.buf[this.pos++];\n        highBits |= (b & 0x7f) << shift;\n        if ((b & 0x80) == 0) {\n            this.assertBounds();\n            return [lowBits, highBits];\n        }\n    }\n    throw new Error(\"invalid varint\");\n}\n/**\n * Write a 64 bit varint, given as two JS numbers, to the given bytes array.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/writer.js#L344\n */\nexport function varint64write(lo, hi, bytes) {\n    for (let i = 0; i < 28; i = i + 7) {\n        const shift = lo >>> i;\n        const hasNext = !(shift >>> 7 == 0 && hi == 0);\n        const byte = (hasNext ? shift | 0x80 : shift) & 0xff;\n        bytes.push(byte);\n        if (!hasNext) {\n            return;\n        }\n    }\n    const splitBits = ((lo >>> 28) & 0x0f) | ((hi & 0x07) << 4);\n    const hasMoreBits = !(hi >> 3 == 0);\n    bytes.push((hasMoreBits ? splitBits | 0x80 : splitBits) & 0xff);\n    if (!hasMoreBits) {\n        return;\n    }\n    for (let i = 3; i < 31; i = i + 7) {\n        const shift = hi >>> i;\n        const hasNext = !(shift >>> 7 == 0);\n        const byte = (hasNext ? shift | 0x80 : shift) & 0xff;\n        bytes.push(byte);\n        if (!hasNext) {\n            return;\n        }\n    }\n    bytes.push((hi >>> 31) & 0x01);\n}\n// constants for binary math\nconst TWO_PWR_32_DBL = 0x100000000;\n/**\n * Parse decimal string of 64 bit integer value as two JS numbers.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10\n */\nexport function int64FromString(dec) {\n    // Check for minus sign.\n    const minus = dec[0] === \"-\";\n    if (minus) {\n        dec = dec.slice(1);\n    }\n    // Work 6 decimal digits at a time, acting like we're converting base 1e6\n    // digits to binary. This is safe to do with floating point math because\n    // Number.isSafeInteger(ALL_32_BITS * 1e6) == true.\n    const base = 1e6;\n    let lowBits = 0;\n    let highBits = 0;\n    function add1e6digit(begin, end) {\n        // Note: Number('') is 0.\n        const digit1e6 = Number(dec.slice(begin, end));\n        highBits *= base;\n        lowBits = lowBits * base + digit1e6;\n        // Carry bits from lowBits to\n        if (lowBits >= TWO_PWR_32_DBL) {\n            highBits = highBits + ((lowBits / TWO_PWR_32_DBL) | 0);\n            lowBits = lowBits % TWO_PWR_32_DBL;\n        }\n    }\n    add1e6digit(-24, -18);\n    add1e6digit(-18, -12);\n    add1e6digit(-12, -6);\n    add1e6digit(-6);\n    return minus ? negate(lowBits, highBits) : newBits(lowBits, highBits);\n}\n/**\n * Losslessly converts a 64-bit signed integer in 32:32 split representation\n * into a decimal string.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10\n */\nexport function int64ToString(lo, hi) {\n    let bits = newBits(lo, hi);\n    // If we're treating the input as a signed value and the high bit is set, do\n    // a manual two's complement conversion before the decimal conversion.\n    const negative = bits.hi & 0x80000000;\n    if (negative) {\n        bits = negate(bits.lo, bits.hi);\n    }\n    const result = uInt64ToString(bits.lo, bits.hi);\n    return negative ? \"-\" + result : result;\n}\n/**\n * Losslessly converts a 64-bit unsigned integer in 32:32 split representation\n * into a decimal string.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10\n */\nexport function uInt64ToString(lo, hi) {\n    ({ lo, hi } = toUnsigned(lo, hi));\n    // Skip the expensive conversion if the number is small enough to use the\n    // built-in conversions.\n    // Number.MAX_SAFE_INTEGER = 0x001FFFFF FFFFFFFF, thus any number with\n    // highBits <= 0x1FFFFF can be safely expressed with a double and retain\n    // integer precision.\n    // Proven by: Number.isSafeInteger(0x1FFFFF * 2**32 + 0xFFFFFFFF) == true.\n    if (hi <= 0x1fffff) {\n        return String(TWO_PWR_32_DBL * hi + lo);\n    }\n    // What this code is doing is essentially converting the input number from\n    // base-2 to base-1e7, which allows us to represent the 64-bit range with\n    // only 3 (very large) digits. Those digits are then trivial to convert to\n    // a base-10 string.\n    // The magic numbers used here are -\n    // 2^24 = 16777216 = (1,6777216) in base-1e7.\n    // 2^48 = 281474976710656 = (2,8147497,6710656) in base-1e7.\n    // Split 32:32 representation into 16:24:24 representation so our\n    // intermediate digits don't overflow.\n    const low = lo & 0xffffff;\n    const mid = ((lo >>> 24) | (hi << 8)) & 0xffffff;\n    const high = (hi >> 16) & 0xffff;\n    // Assemble our three base-1e7 digits, ignoring carries. The maximum\n    // value in a digit at this step is representable as a 48-bit integer, which\n    // can be stored in a 64-bit floating point number.\n    let digitA = low + mid * 6777216 + high * 6710656;\n    let digitB = mid + high * 8147497;\n    let digitC = high * 2;\n    // Apply carries from A to B and from B to C.\n    const base = 10000000;\n    if (digitA >= base) {\n        digitB += Math.floor(digitA / base);\n        digitA %= base;\n    }\n    if (digitB >= base) {\n        digitC += Math.floor(digitB / base);\n        digitB %= base;\n    }\n    // If digitC is 0, then we should have returned in the trivial code path\n    // at the top for non-safe integers. Given this, we can assume both digitB\n    // and digitA need leading zeros.\n    return (digitC.toString() +\n        decimalFrom1e7WithLeadingZeros(digitB) +\n        decimalFrom1e7WithLeadingZeros(digitA));\n}\nfunction toUnsigned(lo, hi) {\n    return { lo: lo >>> 0, hi: hi >>> 0 };\n}\nfunction newBits(lo, hi) {\n    return { lo: lo | 0, hi: hi | 0 };\n}\n/**\n * Returns two's compliment negation of input.\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Signed_32-bit_integers\n */\nfunction negate(lowBits, highBits) {\n    highBits = ~highBits;\n    if (lowBits) {\n        lowBits = ~lowBits + 1;\n    }\n    else {\n        // If lowBits is 0, then bitwise-not is 0xFFFFFFFF,\n        // adding 1 to that, results in 0x100000000, which leaves\n        // the low bits 0x0 and simply adds one to the high bits.\n        highBits += 1;\n    }\n    return newBits(lowBits, highBits);\n}\n/**\n * Returns decimal representation of digit1e7 with leading zeros.\n */\nconst decimalFrom1e7WithLeadingZeros = (digit1e7) => {\n    const partial = String(digit1e7);\n    return \"0000000\".slice(partial.length) + partial;\n};\n/**\n * Write a 32 bit varint, signed or unsigned. Same as `varint64write(0, value, bytes)`\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/1b18833f4f2a2f681f4e4a25cdf3b0a43115ec26/js/binary/encoder.js#L144\n */\nexport function varint32write(value, bytes) {\n    if (value >= 0) {\n        // write value as varint 32\n        while (value > 0x7f) {\n            bytes.push((value & 0x7f) | 0x80);\n            value = value >>> 7;\n        }\n        bytes.push(value);\n    }\n    else {\n        for (let i = 0; i < 9; i++) {\n            bytes.push((value & 127) | 128);\n            value = value >> 7;\n        }\n        bytes.push(1);\n    }\n}\n/**\n * Read an unsigned 32 bit varint.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L220\n */\nexport function varint32read() {\n    let b = this.buf[this.pos++];\n    let result = b & 0x7f;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7f) << 7;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7f) << 14;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7f) << 21;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    // Extract only last 4 bits\n    b = this.buf[this.pos++];\n    result |= (b & 0x0f) << 28;\n    for (let readBytes = 5; (b & 0x80) !== 0 && readBytes < 10; readBytes++)\n        b = this.buf[this.pos++];\n    if ((b & 0x80) != 0)\n        throw new Error(\"invalid varint\");\n    this.assertBounds();\n    // Result can have 32 bits, convert it to unsigned\n    return result >>> 0;\n}\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { int64FromString, int64ToString, uInt64ToString, } from \"./wire/varint.js\";\n/**\n * Int64Support for the current environment.\n */\nexport const protoInt64 = /*@__PURE__*/ makeInt64Support();\nfunction makeInt64Support() {\n    const dv = new DataView(new ArrayBuffer(8));\n    // note that Safari 14 implements BigInt, but not the DataView methods\n    const ok = typeof BigInt === \"function\" &&\n        typeof dv.getBigInt64 === \"function\" &&\n        typeof dv.getBigUint64 === \"function\" &&\n        typeof dv.setBigInt64 === \"function\" &&\n        typeof dv.setBigUint64 === \"function\" &&\n        (typeof process != \"object\" ||\n            typeof process.env != \"object\" ||\n            process.env.BUF_BIGINT_DISABLE !== \"1\");\n    if (ok) {\n        const MIN = BigInt(\"-9223372036854775808\"), MAX = BigInt(\"9223372036854775807\"), UMIN = BigInt(\"0\"), UMAX = BigInt(\"18446744073709551615\");\n        return {\n            zero: BigInt(0),\n            supported: true,\n            parse(value) {\n                const bi = typeof value == \"bigint\" ? value : BigInt(value);\n                if (bi > MAX || bi < MIN) {\n                    throw new Error(`invalid int64: ${value}`);\n                }\n                return bi;\n            },\n            uParse(value) {\n                const bi = typeof value == \"bigint\" ? value : BigInt(value);\n                if (bi > UMAX || bi < UMIN) {\n                    throw new Error(`invalid uint64: ${value}`);\n                }\n                return bi;\n            },\n            enc(value) {\n                dv.setBigInt64(0, this.parse(value), true);\n                return {\n                    lo: dv.getInt32(0, true),\n                    hi: dv.getInt32(4, true),\n                };\n            },\n            uEnc(value) {\n                dv.setBigInt64(0, this.uParse(value), true);\n                return {\n                    lo: dv.getInt32(0, true),\n                    hi: dv.getInt32(4, true),\n                };\n            },\n            dec(lo, hi) {\n                dv.setInt32(0, lo, true);\n                dv.setInt32(4, hi, true);\n                return dv.getBigInt64(0, true);\n            },\n            uDec(lo, hi) {\n                dv.setInt32(0, lo, true);\n                dv.setInt32(4, hi, true);\n                return dv.getBigUint64(0, true);\n            },\n        };\n    }\n    return {\n        zero: \"0\",\n        supported: false,\n        parse(value) {\n            if (typeof value != \"string\") {\n                value = value.toString();\n            }\n            assertInt64String(value);\n            return value;\n        },\n        uParse(value) {\n            if (typeof value != \"string\") {\n                value = value.toString();\n            }\n            assertUInt64String(value);\n            return value;\n        },\n        enc(value) {\n            if (typeof value != \"string\") {\n                value = value.toString();\n            }\n            assertInt64String(value);\n            return int64FromString(value);\n        },\n        uEnc(value) {\n            if (typeof value != \"string\") {\n                value = value.toString();\n            }\n            assertUInt64String(value);\n            return int64FromString(value);\n        },\n        dec(lo, hi) {\n            return int64ToString(lo, hi);\n        },\n        uDec(lo, hi) {\n            return uInt64ToString(lo, hi);\n        },\n    };\n}\nfunction assertInt64String(value) {\n    if (!/^-?[0-9]+$/.test(value)) {\n        throw new Error(\"invalid int64: \" + value);\n    }\n}\nfunction assertUInt64String(value) {\n    if (!/^[0-9]+$/.test(value)) {\n        throw new Error(\"invalid uint64: \" + value);\n    }\n}\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { protoInt64 } from \"../proto-int64.js\";\nimport { ScalarType } from \"../descriptors.js\";\n/**\n * Returns true if both scalar values are equal.\n */\nexport function scalarEquals(type, a, b) {\n    if (a === b) {\n        // This correctly matches equal values except BYTES and (possibly) 64-bit integers.\n        return true;\n    }\n    // Special case BYTES - we need to compare each byte individually\n    if (type == ScalarType.BYTES) {\n        if (!(a instanceof Uint8Array) || !(b instanceof Uint8Array)) {\n            return false;\n        }\n        if (a.length !== b.length) {\n            return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n            if (a[i] !== b[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    // Special case 64-bit integers - we support number, string and bigint representation.\n    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\n    switch (type) {\n        case ScalarType.UINT64:\n        case ScalarType.FIXED64:\n        case ScalarType.INT64:\n        case ScalarType.SFIXED64:\n        case ScalarType.SINT64:\n            // Loose comparison will match between 0n, 0 and \"0\".\n            return a == b;\n    }\n    // Anything that hasn't been caught by strict comparison or special cased\n    // BYTES and 64-bit integers is not equal.\n    return false;\n}\n/**\n * Returns the zero value for the given scalar type.\n */\nexport function scalarZeroValue(type, longAsString) {\n    switch (type) {\n        case ScalarType.STRING:\n            return \"\";\n        case ScalarType.BOOL:\n            return false;\n        default:\n            // Handles INT32, UINT32, SINT32, FIXED32, SFIXED32.\n            // We do not use individual cases to save a few bytes code size.\n            return 0;\n        case ScalarType.DOUBLE:\n        case ScalarType.FLOAT:\n            return 0.0;\n        case ScalarType.INT64:\n        case ScalarType.UINT64:\n        case ScalarType.SFIXED64:\n        case ScalarType.FIXED64:\n        case ScalarType.SINT64:\n            return (longAsString ? \"0\" : protoInt64.zero);\n        case ScalarType.BYTES:\n            return new Uint8Array(0);\n    }\n}\n/**\n * Returns true for a zero-value. For example, an integer has the zero-value `0`,\n * a boolean is `false`, a string is `\"\"`, and bytes is an empty Uint8Array.\n *\n * In proto3, zero-values are not written to the wire, unless the field is\n * optional or repeated.\n */\nexport function isScalarZeroValue(type, value) {\n    switch (type) {\n        case ScalarType.BOOL:\n            return value === false;\n        case ScalarType.STRING:\n            return value === \"\";\n        case ScalarType.BYTES:\n            return value instanceof Uint8Array && !value.byteLength;\n        default:\n            return value == 0; // Loose comparison matches 0n, 0 and \"0\"\n    }\n}\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nconst errorNames = [\n    \"FieldValueInvalidError\",\n    \"FieldListRangeError\",\n    \"ForeignFieldError\",\n];\nexport class FieldError extends Error {\n    constructor(fieldOrOneof, message, name = \"FieldValueInvalidError\") {\n        super(message);\n        this.name = name;\n        this.field = () => fieldOrOneof;\n    }\n}\nexport function isFieldError(arg) {\n    return (arg instanceof Error &&\n        errorNames.includes(arg.name) &&\n        \"field\" in arg &&\n        typeof arg.field == \"function\");\n}\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { isScalarZeroValue, scalarZeroValue } from \"./scalar.js\";\n// bootstrap-inject google.protobuf.FeatureSet.FieldPresence.IMPLICIT: const $name: FeatureSet_FieldPresence.$localName = $number;\nconst IMPLICIT = 2;\nexport const unsafeLocal = Symbol.for(\"reflect unsafe local\");\n/**\n * Return the selected field of a oneof group.\n *\n * @private\n */\nexport function unsafeOneofCase(target, // eslint-disable-line @typescript-eslint/no-explicit-any -- `any` is the best choice for dynamic access\noneof) {\n    const c = target[oneof.localName].case;\n    if (c === undefined) {\n        return c;\n    }\n    return oneof.fields.find((f) => f.localName === c);\n}\n/**\n * Returns true if the field is set.\n *\n * @private\n */\nexport function unsafeIsSet(target, // eslint-disable-line @typescript-eslint/no-explicit-any -- `any` is the best choice for dynamic access\nfield) {\n    const name = field.localName;\n    if (field.oneof) {\n        return target[field.oneof.localName].case === name; // eslint-disable-line @typescript-eslint/no-unsafe-member-access\n    }\n    if (field.presence != IMPLICIT) {\n        // Fields with explicit presence have properties on the prototype chain\n        // for default / zero values (except for proto3).\n        return (target[name] !== undefined &&\n            Object.prototype.hasOwnProperty.call(target, name));\n    }\n    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\n    switch (field.fieldKind) {\n        case \"list\":\n            return target[name].length > 0;\n        case \"map\":\n            return Object.keys(target[name]).length > 0; // eslint-disable-line @typescript-eslint/no-unsafe-argument\n        case \"scalar\":\n            return !isScalarZeroValue(field.scalar, target[name]);\n        case \"enum\":\n            return target[name] !== field.enum.values[0].number;\n    }\n    throw new Error(\"message field with implicit presence\");\n}\n/**\n * Returns true if the field is set, but only for singular fields with explicit\n * presence (proto2).\n *\n * @private\n */\nexport function unsafeIsSetExplicit(target, localName) {\n    return (Object.prototype.hasOwnProperty.call(target, localName) &&\n        target[localName] !== undefined);\n}\n/**\n * Return a field value, respecting oneof groups.\n *\n * @private\n */\nexport function unsafeGet(target, field) {\n    if (field.oneof) {\n        const oneof = target[field.oneof.localName];\n        if (oneof.case === field.localName) {\n            return oneof.value;\n        }\n        return undefined;\n    }\n    return target[field.localName];\n}\n/**\n * Set a field value, respecting oneof groups.\n *\n * @private\n */\nexport function unsafeSet(target, field, value) {\n    if (field.oneof) {\n        target[field.oneof.localName] = {\n            case: field.localName,\n            value: value,\n        };\n    }\n    else {\n        target[field.localName] = value;\n    }\n}\n/**\n * Resets the field, so that unsafeIsSet() will return false.\n *\n * @private\n */\nexport function unsafeClear(target, // eslint-disable-line @typescript-eslint/no-explicit-any -- `any` is the best choice for dynamic access\nfield) {\n    const name = field.localName;\n    if (field.oneof) {\n        const oneofLocalName = field.oneof.localName;\n        if (target[oneofLocalName].case === name) {\n            target[oneofLocalName] = { case: undefined };\n        }\n    }\n    else if (field.presence != IMPLICIT) {\n        // Fields with explicit presence have properties on the prototype chain\n        // for default / zero values (except for proto3). By deleting their own\n        // property, the field is reset.\n        delete target[name];\n    }\n    else {\n        // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\n        switch (field.fieldKind) {\n            case \"map\":\n                target[name] = {};\n                break;\n            case \"list\":\n                target[name] = [];\n                break;\n            case \"enum\":\n                target[name] = field.enum.values[0].number;\n                break;\n            case \"scalar\":\n                target[name] = scalarZeroValue(field.scalar, field.longAsString);\n                break;\n        }\n    }\n}\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { unsafeLocal } from \"./unsafe.js\";\nexport function isObject(arg) {\n    return arg !== null && typeof arg == \"object\" && !Array.isArray(arg);\n}\nexport function isOneofADT(arg) {\n    return (arg !== null &&\n        typeof arg == \"object\" &&\n        \"case\" in arg &&\n        ((typeof arg.case == \"string\" && \"value\" in arg && arg.value != null) ||\n            (arg.case === undefined &&\n                (!(\"value\" in arg) || arg.value === undefined))));\n}\nexport function isReflectList(arg, field) {\n    var _a, _b, _c, _d;\n    if (isObject(arg) &&\n        unsafeLocal in arg &&\n        \"add\" in arg &&\n        \"field\" in arg &&\n        typeof arg.field == \"function\") {\n        if (field !== undefined) {\n            const a = field, b = arg.field();\n            return (a.listKind == b.listKind &&\n                a.scalar === b.scalar &&\n                ((_a = a.message) === null || _a === void 0 ? void 0 : _a.typeName) === ((_b = b.message) === null || _b === void 0 ? void 0 : _b.typeName) &&\n                ((_c = a.enum) === null || _c === void 0 ? void 0 : _c.typeName) === ((_d = b.enum) === null || _d === void 0 ? void 0 : _d.typeName));\n        }\n        return true;\n    }\n    return false;\n}\nexport function isReflectMap(arg, field) {\n    var _a, _b, _c, _d;\n    if (isObject(arg) &&\n        unsafeLocal in arg &&\n        \"has\" in arg &&\n        \"field\" in arg &&\n        typeof arg.field == \"function\") {\n        if (field !== undefined) {\n            const a = field, b = arg.field();\n            return (a.mapKey === b.mapKey &&\n                a.mapKind == b.mapKind &&\n                a.scalar === b.scalar &&\n                ((_a = a.message) === null || _a === void 0 ? void 0 : _a.typeName) === ((_b = b.message) === null || _b === void 0 ? void 0 : _b.typeName) &&\n                ((_c = a.enum) === null || _c === void 0 ? void 0 : _c.typeName) === ((_d = b.enum) === null || _d === void 0 ? void 0 : _d.typeName));\n        }\n        return true;\n    }\n    return false;\n}\nexport function isReflectMessage(arg, messageDesc) {\n    return (isObject(arg) &&\n        unsafeLocal in arg &&\n        \"desc\" in arg &&\n        isObject(arg.desc) &&\n        arg.desc.kind === \"message\" &&\n        (messageDesc === undefined || arg.desc.typeName == messageDesc.typeName));\n}\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nexport function isWrapper(arg) {\n    return isWrapperTypeName(arg.$typeName);\n}\nexport function isWrapperDesc(messageDesc) {\n    const f = messageDesc.fields[0];\n    return (isWrapperTypeName(messageDesc.typeName) &&\n        f !== undefined &&\n        f.fieldKind == \"scalar\" &&\n        f.name == \"value\" &&\n        f.number == 1);\n}\nfunction isWrapperTypeName(name) {\n    return (name.startsWith(\"google.protobuf.\") &&\n        [\n            \"DoubleValue\",\n            \"FloatValue\",\n            \"Int64Value\",\n            \"UInt64Value\",\n            \"Int32Value\",\n            \"UInt32Value\",\n            \"BoolValue\",\n            \"StringValue\",\n            \"BytesValue\",\n        ].includes(name.substring(16)));\n}\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { isMessage } from \"./is-message.js\";\nimport { ScalarType, } from \"./descriptors.js\";\nimport { scalarZeroValue } from \"./reflect/scalar.js\";\nimport { FieldError } from \"./reflect/error.js\";\nimport { isObject } from \"./reflect/guard.js\";\nimport { unsafeGet, unsafeOneofCase, unsafeSet } from \"./reflect/unsafe.js\";\nimport { isWrapperDesc } from \"./wkt/wrappers.js\";\n// bootstrap-inject google.protobuf.Edition.EDITION_PROTO3: const $name: Edition.$localName = $number;\nconst EDITION_PROTO3 = 999;\n// bootstrap-inject google.protobuf.Edition.EDITION_PROTO2: const $name: Edition.$localName = $number;\nconst EDITION_PROTO2 = 998;\n// bootstrap-inject google.protobuf.FeatureSet.FieldPresence.IMPLICIT: const $name: FeatureSet_FieldPresence.$localName = $number;\nconst IMPLICIT = 2;\n/**\n * Create a new message instance.\n *\n * The second argument is an optional initializer object, where all fields are\n * optional.\n */\nexport function create(schema, init) {\n    if (isMessage(init, schema)) {\n        return init;\n    }\n    const message = createZeroMessage(schema);\n    if (init !== undefined) {\n        initMessage(schema, message, init);\n    }\n    return message;\n}\n/**\n * Sets field values from a MessageInitShape on a zero message.\n */\nfunction initMessage(messageDesc, message, init) {\n    for (const member of messageDesc.members) {\n        let value = init[member.localName];\n        if (value == null) {\n            // intentionally ignore undefined and null\n            continue;\n        }\n        let field;\n        if (member.kind == \"oneof\") {\n            const oneofField = unsafeOneofCase(init, member);\n            if (!oneofField) {\n                continue;\n            }\n            field = oneofField;\n            value = unsafeGet(init, oneofField);\n        }\n        else {\n            field = member;\n        }\n        // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- no need to convert enum\n        switch (field.fieldKind) {\n            case \"message\":\n                value = toMessage(field, value);\n                break;\n            case \"scalar\":\n                value = initScalar(field, value);\n                break;\n            case \"list\":\n                value = initList(field, value);\n                break;\n            case \"map\":\n                value = initMap(field, value);\n                break;\n        }\n        unsafeSet(message, field, value);\n    }\n    return message;\n}\nfunction initScalar(field, value) {\n    if (field.scalar == ScalarType.BYTES) {\n        return toU8Arr(value);\n    }\n    return value;\n}\nfunction initMap(field, value) {\n    if (isObject(value)) {\n        if (field.scalar == ScalarType.BYTES) {\n            return convertObjectValues(value, toU8Arr);\n        }\n        if (field.mapKind == \"message\") {\n            return convertObjectValues(value, (val) => toMessage(field, val));\n        }\n    }\n    return value;\n}\nfunction initList(field, value) {\n    if (Array.isArray(value)) {\n        if (field.scalar == ScalarType.BYTES) {\n            return value.map(toU8Arr);\n        }\n        if (field.listKind == \"message\") {\n            return value.map((item) => toMessage(field, item));\n        }\n    }\n    return value;\n}\nfunction toMessage(field, value) {\n    if (field.fieldKind == \"message\" &&\n        !field.oneof &&\n        isWrapperDesc(field.message)) {\n        // Types from google/protobuf/wrappers.proto are unwrapped when used in\n        // a singular field that is not part of a oneof group.\n        return initScalar(field.message.fields[0], value);\n    }\n    if (isObject(value)) {\n        if (field.message.typeName == \"google.protobuf.Struct\" &&\n            field.parent.typeName !== \"google.protobuf.Value\") {\n            // google.protobuf.Struct is represented with JsonObject when used in a\n            // field, except when used in google.protobuf.Value.\n            return value;\n        }\n        if (!isMessage(value, field.message)) {\n            return create(field.message, value);\n        }\n    }\n    return value;\n}\n// converts any ArrayLike<number> to Uint8Array if necessary.\nfunction toU8Arr(value) {\n    return Array.isArray(value) ? new Uint8Array(value) : value;\n}\nfunction convertObjectValues(obj, fn) {\n    const ret = {};\n    for (const entry of Object.entries(obj)) {\n        ret[entry[0]] = fn(entry[1]);\n    }\n    return ret;\n}\nconst tokenZeroMessageField = Symbol();\nconst messagePrototypes = new WeakMap();\n/**\n * Create a zero message.\n */\nfunction createZeroMessage(desc) {\n    let msg;\n    if (!needsPrototypeChain(desc)) {\n        msg = {\n            $typeName: desc.typeName,\n        };\n        for (const member of desc.members) {\n            if (member.kind == \"oneof\" || member.presence == IMPLICIT) {\n                msg[member.localName] = createZeroField(member);\n            }\n        }\n    }\n    else {\n        // Support default values and track presence via the prototype chain\n        const cached = messagePrototypes.get(desc);\n        let prototype;\n        let members;\n        if (cached) {\n            ({ prototype, members } = cached);\n        }\n        else {\n            prototype = {};\n            members = new Set();\n            for (const member of desc.members) {\n                if (member.kind == \"oneof\") {\n                    // we can only put immutable values on the prototype,\n                    // oneof ADTs are mutable\n                    continue;\n                }\n                if (member.fieldKind != \"scalar\" && member.fieldKind != \"enum\") {\n                    // only scalar and enum values are immutable, map, list, and message\n                    // are not\n                    continue;\n                }\n                if (member.presence == IMPLICIT) {\n                    // implicit presence tracks field presence by zero values - e.g. 0, false, \"\", are unset, 1, true, \"x\" are set.\n                    // message, map, list fields are mutable, and also have IMPLICIT presence.\n                    continue;\n                }\n                members.add(member);\n                prototype[member.localName] = createZeroField(member);\n            }\n            messagePrototypes.set(desc, { prototype, members });\n        }\n        msg = Object.create(prototype);\n        msg.$typeName = desc.typeName;\n        for (const member of desc.members) {\n            if (members.has(member)) {\n                continue;\n            }\n            if (member.kind == \"field\") {\n                if (member.fieldKind == \"message\") {\n                    continue;\n                }\n                if (member.fieldKind == \"scalar\" || member.fieldKind == \"enum\") {\n                    if (member.presence != IMPLICIT) {\n                        continue;\n                    }\n                }\n            }\n            msg[member.localName] = createZeroField(member);\n        }\n    }\n    return msg;\n}\n/**\n * Do we need the prototype chain to track field presence?\n */\nfunction needsPrototypeChain(desc) {\n    switch (desc.file.edition) {\n        case EDITION_PROTO3:\n            // proto3 always uses implicit presence, we never need the prototype chain.\n            return false;\n        case EDITION_PROTO2:\n            // proto2 never uses implicit presence, we always need the prototype chain.\n            return true;\n        default:\n            // If a message uses scalar or enum fields with explicit presence, we need\n            // the prototype chain to track presence. This rule does not apply to fields\n            // in a oneof group - they use a different mechanism to track presence.\n            return desc.fields.some((f) => f.presence != IMPLICIT && f.fieldKind != \"message\" && !f.oneof);\n    }\n}\n/**\n * Returns a zero value for oneof groups, and for every field kind except\n * messages. Scalar and enum fields can have default values.\n */\nfunction createZeroField(field) {\n    if (field.kind == \"oneof\") {\n        return { case: undefined };\n    }\n    if (field.fieldKind == \"list\") {\n        return [];\n    }\n    if (field.fieldKind == \"map\") {\n        return {}; // Object.create(null) would be desirable here, but is unsupported by react https://react.dev/reference/react/use-server#serializable-parameters-and-return-values\n    }\n    if (field.fieldKind == \"message\") {\n        return tokenZeroMessageField;\n    }\n    const defaultValue = field.getDefaultValue();\n    if (defaultValue !== undefined) {\n        return field.fieldKind == \"scalar\" && field.longAsString\n            ? defaultValue.toString()\n            : defaultValue;\n    }\n    return field.fieldKind == \"scalar\"\n        ? scalarZeroValue(field.scalar, field.longAsString)\n        : field.enum.values[0].number;\n}\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nconst symbol = Symbol.for(\"@bufbuild/protobuf/text-encoding\");\n/**\n * Protobuf-ES requires the Text Encoding API to convert UTF-8 from and to\n * binary. This WHATWG API is widely available, but it is not part of the\n * ECMAScript standard. On runtimes where it is not available, use this\n * function to provide your own implementation.\n *\n * Note that the Text Encoding API does not provide a way to validate UTF-8.\n * Our implementation falls back to use encodeURIComponent().\n */\nexport function configureTextEncoding(textEncoding) {\n    globalThis[symbol] = textEncoding;\n}\nexport function getTextEncoding() {\n    if (globalThis[symbol] == undefined) {\n        const te = new globalThis.TextEncoder();\n        const td = new globalThis.TextDecoder();\n        globalThis[symbol] = {\n            encodeUtf8(text) {\n                return te.encode(text);\n            },\n            decodeUtf8(bytes) {\n                return td.decode(bytes);\n            },\n            checkUtf8(text) {\n                try {\n                    encodeURIComponent(text);\n                    return true;\n                }\n                catch (e) {\n                    return false;\n                }\n            },\n        };\n    }\n    return globalThis[symbol];\n}\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { varint32read, varint32write, varint64read, varint64write, } from \"./varint.js\";\nimport { protoInt64 } from \"../proto-int64.js\";\nimport { getTextEncoding } from \"./text-encoding.js\";\n/* eslint-disable prefer-const,no-case-declarations,@typescript-eslint/restrict-plus-operands */\n/**\n * Protobuf binary format wire types.\n *\n * A wire type provides just enough information to find the length of the\n * following value.\n *\n * See https://developers.google.com/protocol-buffers/docs/encoding#structure\n */\nexport var WireType;\n(function (WireType) {\n    /**\n     * Used for int32, int64, uint32, uint64, sint32, sint64, bool, enum\n     */\n    WireType[WireType[\"Varint\"] = 0] = \"Varint\";\n    /**\n     * Used for fixed64, sfixed64, double.\n     * Always 8 bytes with little-endian byte order.\n     */\n    WireType[WireType[\"Bit64\"] = 1] = \"Bit64\";\n    /**\n     * Used for string, bytes, embedded messages, packed repeated fields\n     *\n     * Only repeated numeric types (types which use the varint, 32-bit,\n     * or 64-bit wire types) can be packed. In proto3, such fields are\n     * packed by default.\n     */\n    WireType[WireType[\"LengthDelimited\"] = 2] = \"LengthDelimited\";\n    /**\n     * Start of a tag-delimited aggregate, such as a proto2 group, or a message\n     * in editions with message_encoding = DELIMITED.\n     */\n    WireType[WireType[\"StartGroup\"] = 3] = \"StartGroup\";\n    /**\n     * End of a tag-delimited aggregate.\n     */\n    WireType[WireType[\"EndGroup\"] = 4] = \"EndGroup\";\n    /**\n     * Used for fixed32, sfixed32, float.\n     * Always 4 bytes with little-endian byte order.\n     */\n    WireType[WireType[\"Bit32\"] = 5] = \"Bit32\";\n})(WireType || (WireType = {}));\n/**\n * Maximum value for a 32-bit floating point value (Protobuf FLOAT).\n */\nexport const FLOAT32_MAX = 3.4028234663852886e38;\n/**\n * Minimum value for a 32-bit floating point value (Protobuf FLOAT).\n */\nexport const FLOAT32_MIN = -3.4028234663852886e38;\n/**\n * Maximum value for an unsigned 32-bit integer (Protobuf UINT32, FIXED32).\n */\nexport const UINT32_MAX = 0xffffffff;\n/**\n * Maximum value for a signed 32-bit integer (Protobuf INT32, SFIXED32, SINT32).\n */\nexport const INT32_MAX = 0x7fffffff;\n/**\n * Minimum value for a signed 32-bit integer (Protobuf INT32, SFIXED32, SINT32).\n */\nexport const INT32_MIN = -0x80000000;\nexport class BinaryWriter {\n    constructor(encodeUtf8 = getTextEncoding().encodeUtf8) {\n        this.encodeUtf8 = encodeUtf8;\n        /**\n         * Previous fork states.\n         */\n        this.stack = [];\n        this.chunks = [];\n        this.buf = [];\n    }\n    /**\n     * Return all bytes written and reset this writer.\n     */\n    finish() {\n        if (this.buf.length) {\n            this.chunks.push(new Uint8Array(this.buf)); // flush the buffer\n            this.buf = [];\n        }\n        let len = 0;\n        for (let i = 0; i < this.chunks.length; i++)\n            len += this.chunks[i].length;\n        let bytes = new Uint8Array(len);\n        let offset = 0;\n        for (let i = 0; i < this.chunks.length; i++) {\n            bytes.set(this.chunks[i], offset);\n            offset += this.chunks[i].length;\n        }\n        this.chunks = [];\n        return bytes;\n    }\n    /**\n     * Start a new fork for length-delimited data like a message\n     * or a packed repeated field.\n     *\n     * Must be joined later with `join()`.\n     */\n    fork() {\n        this.stack.push({ chunks: this.chunks, buf: this.buf });\n        this.chunks = [];\n        this.buf = [];\n        return this;\n    }\n    /**\n     * Join the last fork. Write its length and bytes, then\n     * return to the previous state.\n     */\n    join() {\n        // get chunk of fork\n        let chunk = this.finish();\n        // restore previous state\n        let prev = this.stack.pop();\n        if (!prev)\n            throw new Error(\"invalid state, fork stack empty\");\n        this.chunks = prev.chunks;\n        this.buf = prev.buf;\n        // write length of chunk as varint\n        this.uint32(chunk.byteLength);\n        return this.raw(chunk);\n    }\n    /**\n     * Writes a tag (field number and wire type).\n     *\n     * Equivalent to `uint32( (fieldNo << 3 | type) >>> 0 )`.\n     *\n     * Generated code should compute the tag ahead of time and call `uint32()`.\n     */\n    tag(fieldNo, type) {\n        return this.uint32(((fieldNo << 3) | type) >>> 0);\n    }\n    /**\n     * Write a chunk of raw bytes.\n     */\n    raw(chunk) {\n        if (this.buf.length) {\n            this.chunks.push(new Uint8Array(this.buf));\n            this.buf = [];\n        }\n        this.chunks.push(chunk);\n        return this;\n    }\n    /**\n     * Write a `uint32` value, an unsigned 32 bit varint.\n     */\n    uint32(value) {\n        assertUInt32(value);\n        // write value as varint 32, inlined for speed\n        while (value > 0x7f) {\n            this.buf.push((value & 0x7f) | 0x80);\n            value = value >>> 7;\n        }\n        this.buf.push(value);\n        return this;\n    }\n    /**\n     * Write a `int32` value, a signed 32 bit varint.\n     */\n    int32(value) {\n        assertInt32(value);\n        varint32write(value, this.buf);\n        return this;\n    }\n    /**\n     * Write a `bool` value, a variant.\n     */\n    bool(value) {\n        this.buf.push(value ? 1 : 0);\n        return this;\n    }\n    /**\n     * Write a `bytes` value, length-delimited arbitrary data.\n     */\n    bytes(value) {\n        this.uint32(value.byteLength); // write length of chunk as varint\n        return this.raw(value);\n    }\n    /**\n     * Write a `string` value, length-delimited data converted to UTF-8 text.\n     */\n    string(value) {\n        let chunk = this.encodeUtf8(value);\n        this.uint32(chunk.byteLength); // write length of chunk as varint\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `float` value, 32-bit floating point number.\n     */\n    float(value) {\n        assertFloat32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setFloat32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `double` value, a 64-bit floating point number.\n     */\n    double(value) {\n        let chunk = new Uint8Array(8);\n        new DataView(chunk.buffer).setFloat64(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `fixed32` value, an unsigned, fixed-length 32-bit integer.\n     */\n    fixed32(value) {\n        assertUInt32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setUint32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `sfixed32` value, a signed, fixed-length 32-bit integer.\n     */\n    sfixed32(value) {\n        assertInt32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setInt32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `sint32` value, a signed, zigzag-encoded 32-bit varint.\n     */\n    sint32(value) {\n        assertInt32(value);\n        // zigzag encode\n        value = ((value << 1) ^ (value >> 31)) >>> 0;\n        varint32write(value, this.buf);\n        return this;\n    }\n    /**\n     * Write a `fixed64` value, a signed, fixed-length 64-bit integer.\n     */\n    sfixed64(value) {\n        let chunk = new Uint8Array(8), view = new DataView(chunk.buffer), tc = protoInt64.enc(value);\n        view.setInt32(0, tc.lo, true);\n        view.setInt32(4, tc.hi, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `fixed64` value, an unsigned, fixed-length 64 bit integer.\n     */\n    fixed64(value) {\n        let chunk = new Uint8Array(8), view = new DataView(chunk.buffer), tc = protoInt64.uEnc(value);\n        view.setInt32(0, tc.lo, true);\n        view.setInt32(4, tc.hi, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `int64` value, a signed 64-bit varint.\n     */\n    int64(value) {\n        let tc = protoInt64.enc(value);\n        varint64write(tc.lo, tc.hi, this.buf);\n        return this;\n    }\n    /**\n     * Write a `sint64` value, a signed, zig-zag-encoded 64-bit varint.\n     */\n    sint64(value) {\n        let tc = protoInt64.enc(value), \n        // zigzag encode\n        sign = tc.hi >> 31, lo = (tc.lo << 1) ^ sign, hi = ((tc.hi << 1) | (tc.lo >>> 31)) ^ sign;\n        varint64write(lo, hi, this.buf);\n        return this;\n    }\n    /**\n     * Write a `uint64` value, an unsigned 64-bit varint.\n     */\n    uint64(value) {\n        let tc = protoInt64.uEnc(value);\n        varint64write(tc.lo, tc.hi, this.buf);\n        return this;\n    }\n}\nexport class BinaryReader {\n    constructor(buf, decodeUtf8 = getTextEncoding().decodeUtf8) {\n        this.decodeUtf8 = decodeUtf8;\n        this.varint64 = varint64read; // dirty cast for `this`\n        /**\n         * Read a `uint32` field, an unsigned 32 bit varint.\n         */\n        this.uint32 = varint32read;\n        this.buf = buf;\n        this.len = buf.length;\n        this.pos = 0;\n        this.view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n    }\n    /**\n     * Reads a tag - field number and wire type.\n     */\n    tag() {\n        let tag = this.uint32(), fieldNo = tag >>> 3, wireType = tag & 7;\n        if (fieldNo <= 0 || wireType < 0 || wireType > 5)\n            throw new Error(\"illegal tag: field no \" + fieldNo + \" wire type \" + wireType);\n        return [fieldNo, wireType];\n    }\n    /**\n     * Skip one element and return the skipped data.\n     *\n     * When skipping StartGroup, provide the tags field number to check for\n     * matching field number in the EndGroup tag.\n     */\n    skip(wireType, fieldNo) {\n        let start = this.pos;\n        switch (wireType) {\n            case WireType.Varint:\n                while (this.buf[this.pos++] & 0x80) {\n                    // ignore\n                }\n                break;\n            // eslint-disable-next-line\n            // @ts-expect-error TS7029: Fallthrough case in switch\n            case WireType.Bit64:\n                this.pos += 4;\n            // eslint-disable-next-line no-fallthrough\n            case WireType.Bit32:\n                this.pos += 4;\n                break;\n            case WireType.LengthDelimited:\n                let len = this.uint32();\n                this.pos += len;\n                break;\n            case WireType.StartGroup:\n                for (;;) {\n                    const [fn, wt] = this.tag();\n                    if (wt === WireType.EndGroup) {\n                        if (fieldNo !== undefined && fn !== fieldNo) {\n                            throw new Error(\"invalid end group tag\");\n                        }\n                        break;\n                    }\n                    this.skip(wt, fn);\n                }\n                break;\n            default:\n                throw new Error(\"cant skip wire type \" + wireType);\n        }\n        this.assertBounds();\n        return this.buf.subarray(start, this.pos);\n    }\n    /**\n     * Throws error if position in byte array is out of range.\n     */\n    assertBounds() {\n        if (this.pos > this.len)\n            throw new RangeError(\"premature EOF\");\n    }\n    /**\n     * Read a `int32` field, a signed 32 bit varint.\n     */\n    int32() {\n        return this.uint32() | 0;\n    }\n    /**\n     * Read a `sint32` field, a signed, zigzag-encoded 32-bit varint.\n     */\n    sint32() {\n        let zze = this.uint32();\n        // decode zigzag\n        return (zze >>> 1) ^ -(zze & 1);\n    }\n    /**\n     * Read a `int64` field, a signed 64-bit varint.\n     */\n    int64() {\n        return protoInt64.dec(...this.varint64());\n    }\n    /**\n     * Read a `uint64` field, an unsigned 64-bit varint.\n     */\n    uint64() {\n        return protoInt64.uDec(...this.varint64());\n    }\n    /**\n     * Read a `sint64` field, a signed, zig-zag-encoded 64-bit varint.\n     */\n    sint64() {\n        let [lo, hi] = this.varint64();\n        // decode zig zag\n        let s = -(lo & 1);\n        lo = ((lo >>> 1) | ((hi & 1) << 31)) ^ s;\n        hi = (hi >>> 1) ^ s;\n        return protoInt64.dec(lo, hi);\n    }\n    /**\n     * Read a `bool` field, a variant.\n     */\n    bool() {\n        let [lo, hi] = this.varint64();\n        return lo !== 0 || hi !== 0;\n    }\n    /**\n     * Read a `fixed32` field, an unsigned, fixed-length 32-bit integer.\n     */\n    fixed32() {\n        return this.view.getUint32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `sfixed32` field, a signed, fixed-length 32-bit integer.\n     */\n    sfixed32() {\n        return this.view.getInt32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `fixed64` field, an unsigned, fixed-length 64 bit integer.\n     */\n    fixed64() {\n        return protoInt64.uDec(this.sfixed32(), this.sfixed32());\n    }\n    /**\n     * Read a `fixed64` field, a signed, fixed-length 64-bit integer.\n     */\n    sfixed64() {\n        return protoInt64.dec(this.sfixed32(), this.sfixed32());\n    }\n    /**\n     * Read a `float` field, 32-bit floating point number.\n     */\n    float() {\n        return this.view.getFloat32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `double` field, a 64-bit floating point number.\n     */\n    double() {\n        return this.view.getFloat64((this.pos += 8) - 8, true);\n    }\n    /**\n     * Read a `bytes` field, length-delimited arbitrary data.\n     */\n    bytes() {\n        let len = this.uint32(), start = this.pos;\n        this.pos += len;\n        this.assertBounds();\n        return this.buf.subarray(start, start + len);\n    }\n    /**\n     * Read a `string` field, length-delimited data converted to UTF-8 text.\n     */\n    string() {\n        return this.decodeUtf8(this.bytes());\n    }\n}\n/**\n * Assert a valid signed protobuf 32-bit integer as a number or string.\n */\nfunction assertInt32(arg) {\n    if (typeof arg == \"string\") {\n        arg = Number(arg);\n    }\n    else if (typeof arg != \"number\") {\n        throw new Error(\"invalid int32: \" + typeof arg);\n    }\n    if (!Number.isInteger(arg) ||\n        arg > INT32_MAX ||\n        arg < INT32_MIN)\n        throw new Error(\"invalid int32: \" + arg);\n}\n/**\n * Assert a valid unsigned protobuf 32-bit integer as a number or string.\n */\nfunction assertUInt32(arg) {\n    if (typeof arg == \"string\") {\n        arg = Number(arg);\n    }\n    else if (typeof arg != \"number\") {\n        throw new Error(\"invalid uint32: \" + typeof arg);\n    }\n    if (!Number.isInteger(arg) ||\n        arg > UINT32_MAX ||\n        arg < 0)\n        throw new Error(\"invalid uint32: \" + arg);\n}\n/**\n * Assert a valid protobuf float value as a number or string.\n */\nfunction assertFloat32(arg) {\n    if (typeof arg == \"string\") {\n        const o = arg;\n        arg = Number(arg);\n        if (isNaN(arg) && o !== \"NaN\") {\n            throw new Error(\"invalid float32: \" + o);\n        }\n    }\n    else if (typeof arg != \"number\") {\n        throw new Error(\"invalid float32: \" + typeof arg);\n    }\n    if (Number.isFinite(arg) &&\n        (arg > FLOAT32_MAX || arg < FLOAT32_MIN))\n        throw new Error(\"invalid float32: \" + arg);\n}\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { ScalarType, } from \"../descriptors.js\";\nimport { isMessage } from \"../is-message.js\";\nimport { FieldError } from \"./error.js\";\nimport { isReflectList, isReflectMap, isReflectMessage } from \"./guard.js\";\nimport { FLOAT32_MAX, FLOAT32_MIN, INT32_MAX, INT32_MIN, UINT32_MAX, } from \"../wire/binary-encoding.js\";\nimport { getTextEncoding } from \"../wire/text-encoding.js\";\nimport { protoInt64 } from \"../proto-int64.js\";\n/**\n * Check whether the given field value is valid for the reflect API.\n */\nexport function checkField(field, value) {\n    const check = field.fieldKind == \"list\"\n        ? isReflectList(value, field)\n        : field.fieldKind == \"map\"\n            ? isReflectMap(value, field)\n            : checkSingular(field, value);\n    if (check === true) {\n        return undefined;\n    }\n    let reason;\n    switch (field.fieldKind) {\n        case \"list\":\n            reason = `expected ${formatReflectList(field)}, got ${formatVal(value)}`;\n            break;\n        case \"map\":\n            reason = `expected ${formatReflectMap(field)}, got ${formatVal(value)}`;\n            break;\n        default: {\n            reason = reasonSingular(field, value, check);\n        }\n    }\n    return new FieldError(field, reason);\n}\n/**\n * Check whether the given list item is valid for the reflect API.\n */\nexport function checkListItem(field, index, value) {\n    const check = checkSingular(field, value);\n    if (check !== true) {\n        return new FieldError(field, `list item #${index + 1}: ${reasonSingular(field, value, check)}`);\n    }\n    return undefined;\n}\n/**\n * Check whether the given map key and value are valid for the reflect API.\n */\nexport function checkMapEntry(field, key, value) {\n    const checkKey = checkScalarValue(key, field.mapKey);\n    if (checkKey !== true) {\n        return new FieldError(field, `invalid map key: ${reasonSingular({ scalar: field.mapKey }, key, checkKey)}`);\n    }\n    const checkVal = checkSingular(field, value);\n    if (checkVal !== true) {\n        return new FieldError(field, `map entry ${formatVal(key)}: ${reasonSingular(field, value, checkVal)}`);\n    }\n    return undefined;\n}\nfunction checkSingular(field, value) {\n    if (field.scalar !== undefined) {\n        return checkScalarValue(value, field.scalar);\n    }\n    if (field.enum !== undefined) {\n        if (field.enum.open) {\n            return Number.isInteger(value);\n        }\n        return field.enum.values.some((v) => v.number === value);\n    }\n    return isReflectMessage(value, field.message);\n}\nfunction checkScalarValue(value, scalar) {\n    switch (scalar) {\n        case ScalarType.DOUBLE:\n            return typeof value == \"number\";\n        case ScalarType.FLOAT:\n            if (typeof value != \"number\") {\n                return false;\n            }\n            if (Number.isNaN(value) || !Number.isFinite(value)) {\n                return true;\n            }\n            if (value > FLOAT32_MAX || value < FLOAT32_MIN) {\n                return `${value.toFixed()} out of range`;\n            }\n            return true;\n        case ScalarType.INT32:\n        case ScalarType.SFIXED32:\n        case ScalarType.SINT32:\n            // signed\n            if (typeof value !== \"number\" || !Number.isInteger(value)) {\n                return false;\n            }\n            if (value > INT32_MAX || value < INT32_MIN) {\n                return `${value.toFixed()} out of range`;\n            }\n            return true;\n        case ScalarType.FIXED32:\n        case ScalarType.UINT32:\n            // unsigned\n            if (typeof value !== \"number\" || !Number.isInteger(value)) {\n                return false;\n            }\n            if (value > UINT32_MAX || value < 0) {\n                return `${value.toFixed()} out of range`;\n            }\n            return true;\n        case ScalarType.BOOL:\n            return typeof value == \"boolean\";\n        case ScalarType.STRING:\n            if (typeof value != \"string\") {\n                return false;\n            }\n            return getTextEncoding().checkUtf8(value) || \"invalid UTF8\";\n        case ScalarType.BYTES:\n            return value instanceof Uint8Array;\n        case ScalarType.INT64:\n        case ScalarType.SFIXED64:\n        case ScalarType.SINT64:\n            // signed\n            if (typeof value != \"string\" &&\n                typeof value !== \"bigint\" &&\n                typeof value !== \"number\") {\n                return false;\n            }\n            try {\n                protoInt64.parse(value);\n            }\n            catch (e) {\n                return `${value} out of range`;\n            }\n            return true;\n        case ScalarType.FIXED64:\n        case ScalarType.UINT64:\n            // unsigned\n            if (typeof value != \"string\" &&\n                typeof value !== \"bigint\" &&\n                typeof value !== \"number\") {\n                return false;\n            }\n            try {\n                protoInt64.uParse(value);\n            }\n            catch (e) {\n                return `${value} out of range`;\n            }\n            return true;\n    }\n}\nfunction reasonSingular(field, val, details) {\n    details =\n        typeof details == \"string\" ? `: ${details}` : `, got ${formatVal(val)}`;\n    if (field.scalar !== undefined) {\n        return `expected ${scalarTypeDescription(field.scalar)}` + details;\n    }\n    else if (field.enum !== undefined) {\n        return `expected ${field.enum.toString()}` + details;\n    }\n    return `expected ${formatReflectMessage(field.message)}` + details;\n}\nexport function formatVal(val) {\n    switch (typeof val) {\n        case \"object\":\n            if (val === null) {\n                return \"null\";\n            }\n            if (val instanceof Uint8Array) {\n                return `Uint8Array(${val.length})`;\n            }\n            if (Array.isArray(val)) {\n                return `Array(${val.length})`;\n            }\n            if (isReflectList(val)) {\n                return formatReflectList(val.field());\n            }\n            if (isReflectMap(val)) {\n                return formatReflectMap(val.field());\n            }\n            if (isReflectMessage(val)) {\n                return formatReflectMessage(val.desc);\n            }\n            if (isMessage(val)) {\n                return `message ${val.$typeName}`;\n            }\n            return \"object\";\n        case \"string\":\n            return val.length > 30 ? \"string\" : `\"${val.split('\"').join('\\\\\"')}\"`;\n        case \"boolean\":\n            return String(val);\n        case \"number\":\n            return String(val);\n        case \"bigint\":\n            return String(val) + \"n\";\n        default:\n            // \"symbol\" | \"undefined\" | \"object\" | \"function\"\n            return typeof val;\n    }\n}\nfunction formatReflectMessage(desc) {\n    return `ReflectMessage (${desc.typeName})`;\n}\nfunction formatReflectList(field) {\n    switch (field.listKind) {\n        case \"message\":\n            return `ReflectList (${field.message.toString()})`;\n        case \"enum\":\n            return `ReflectList (${field.enum.toString()})`;\n        case \"scalar\":\n            return `ReflectList (${ScalarType[field.scalar]})`;\n    }\n}\nfunction formatReflectMap(field) {\n    switch (field.mapKind) {\n        case \"message\":\n            return `ReflectMap (${ScalarType[field.mapKey]}, ${field.message.toString()})`;\n        case \"enum\":\n            return `ReflectMap (${ScalarType[field.mapKey]}, ${field.enum.toString()})`;\n        case \"scalar\":\n            return `ReflectMap (${ScalarType[field.mapKey]}, ${ScalarType[field.scalar]})`;\n    }\n}\nfunction scalarTypeDescription(scalar) {\n    switch (scalar) {\n        case ScalarType.STRING:\n            return \"string\";\n        case ScalarType.BOOL:\n            return \"boolean\";\n        case ScalarType.INT64:\n        case ScalarType.SINT64:\n        case ScalarType.SFIXED64:\n            return \"bigint (int64)\";\n        case ScalarType.UINT64:\n        case ScalarType.FIXED64:\n            return \"bigint (uint64)\";\n        case ScalarType.BYTES:\n            return \"Uint8Array\";\n        case ScalarType.DOUBLE:\n            return \"number (float64)\";\n        case ScalarType.FLOAT:\n            return \"number (float32)\";\n        case ScalarType.FIXED32:\n        case ScalarType.UINT32:\n            return \"number (uint32)\";\n        case ScalarType.INT32:\n        case ScalarType.SFIXED32:\n        case ScalarType.SINT32:\n            return \"number (int32)\";\n    }\n}\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { ScalarType, } from \"../descriptors.js\";\nimport { checkField, checkListItem, checkMapEntry } from \"./reflect-check.js\";\nimport { FieldError } from \"./error.js\";\nimport { unsafeClear, unsafeGet, unsafeIsSet, unsafeLocal, unsafeOneofCase, unsafeSet, } from \"./unsafe.js\";\nimport { create } from \"../create.js\";\nimport { isWrapper, isWrapperDesc } from \"../wkt/wrappers.js\";\nimport { scalarZeroValue } from \"./scalar.js\";\nimport { protoInt64 } from \"../proto-int64.js\";\nimport { isObject, isReflectList, isReflectMap, isReflectMessage, } from \"./guard.js\";\n/**\n * Create a ReflectMessage.\n */\nexport function reflect(messageDesc, message, \n/**\n * By default, field values are validated when setting them. For example,\n * a value for an uint32 field must be a ECMAScript Number >= 0.\n *\n * When field values are trusted, performance can be improved by disabling\n * checks.\n */\ncheck = true) {\n    return new ReflectMessageImpl(messageDesc, message, check);\n}\nclass ReflectMessageImpl {\n    get sortedFields() {\n        var _a;\n        return ((_a = this._sortedFields) !== null && _a !== void 0 ? _a : (this._sortedFields = this.desc.fields\n            .concat()\n            .sort((a, b) => a.number - b.number)));\n    }\n    constructor(messageDesc, message, check = true) {\n        this.lists = new Map();\n        this.maps = new Map();\n        this.check = check;\n        this.desc = messageDesc;\n        this.message = this[unsafeLocal] = message !== null && message !== void 0 ? message : create(messageDesc);\n        this.fields = messageDesc.fields;\n        this.oneofs = messageDesc.oneofs;\n        this.members = messageDesc.members;\n    }\n    findNumber(number) {\n        if (!this._fieldsByNumber) {\n            this._fieldsByNumber = new Map(this.desc.fields.map((f) => [f.number, f]));\n        }\n        return this._fieldsByNumber.get(number);\n    }\n    oneofCase(oneof) {\n        assertOwn(this.message, oneof);\n        return unsafeOneofCase(this.message, oneof);\n    }\n    isSet(field) {\n        assertOwn(this.message, field);\n        return unsafeIsSet(this.message, field);\n    }\n    clear(field) {\n        assertOwn(this.message, field);\n        unsafeClear(this.message, field);\n    }\n    get(field) {\n        assertOwn(this.message, field);\n        const value = unsafeGet(this.message, field);\n        switch (field.fieldKind) {\n            case \"list\":\n                // eslint-disable-next-line no-case-declarations\n                let list = this.lists.get(field);\n                if (!list || list[unsafeLocal] !== value) {\n                    this.lists.set(field, (list = new ReflectListImpl(field, value, this.check)));\n                }\n                return list;\n            case \"map\":\n                // eslint-disable-next-line no-case-declarations\n                let map = this.maps.get(field);\n                if (!map || map[unsafeLocal] !== value) {\n                    this.maps.set(field, (map = new ReflectMapImpl(field, value, this.check)));\n                }\n                return map;\n            case \"message\":\n                return messageToReflect(field, value, this.check);\n            case \"scalar\":\n                return (value === undefined\n                    ? scalarZeroValue(field.scalar, false)\n                    : longToReflect(field, value));\n            case \"enum\":\n                return (value !== null && value !== void 0 ? value : field.enum.values[0].number);\n        }\n    }\n    set(field, value) {\n        assertOwn(this.message, field);\n        if (this.check) {\n            const err = checkField(field, value);\n            if (err) {\n                throw err;\n            }\n        }\n        let local;\n        if (field.fieldKind == \"message\") {\n            local = messageToLocal(field, value);\n        }\n        else if (isReflectMap(value) || isReflectList(value)) {\n            local = value[unsafeLocal];\n        }\n        else {\n            local = longToLocal(field, value);\n        }\n        unsafeSet(this.message, field, local);\n    }\n    getUnknown() {\n        return this.message.$unknown;\n    }\n    setUnknown(value) {\n        this.message.$unknown = value;\n    }\n}\nfunction assertOwn(owner, member) {\n    if (member.parent.typeName !== owner.$typeName) {\n        throw new FieldError(member, `cannot use ${member.toString()} with message ${owner.$typeName}`, \"ForeignFieldError\");\n    }\n}\n/**\n * Create a ReflectList.\n */\nexport function reflectList(field, unsafeInput, \n/**\n * By default, field values are validated when setting them. For example,\n * a value for an uint32 field must be a ECMAScript Number >= 0.\n *\n * When field values are trusted, performance can be improved by disabling\n * checks.\n */\ncheck = true) {\n    return new ReflectListImpl(field, unsafeInput !== null && unsafeInput !== void 0 ? unsafeInput : [], check);\n}\nclass ReflectListImpl {\n    field() {\n        return this._field;\n    }\n    get size() {\n        return this._arr.length;\n    }\n    constructor(field, unsafeInput, check) {\n        this._field = field;\n        this._arr = this[unsafeLocal] = unsafeInput;\n        this.check = check;\n    }\n    get(index) {\n        const item = this._arr[index];\n        return item === undefined\n            ? undefined\n            : listItemToReflect(this._field, item, this.check);\n    }\n    set(index, item) {\n        if (index < 0 || index >= this._arr.length) {\n            throw new FieldError(this._field, `list item #${index + 1}: out of range`);\n        }\n        if (this.check) {\n            const err = checkListItem(this._field, index, item);\n            if (err) {\n                throw err;\n            }\n        }\n        this._arr[index] = listItemToLocal(this._field, item);\n    }\n    add(item) {\n        if (this.check) {\n            const err = checkListItem(this._field, this._arr.length, item);\n            if (err) {\n                throw err;\n            }\n        }\n        this._arr.push(listItemToLocal(this._field, item));\n        return undefined;\n    }\n    clear() {\n        this._arr.splice(0, this._arr.length);\n    }\n    [Symbol.iterator]() {\n        return this.values();\n    }\n    keys() {\n        return this._arr.keys();\n    }\n    *values() {\n        for (const item of this._arr) {\n            yield listItemToReflect(this._field, item, this.check);\n        }\n    }\n    *entries() {\n        for (let i = 0; i < this._arr.length; i++) {\n            yield [i, listItemToReflect(this._field, this._arr[i], this.check)];\n        }\n    }\n}\n/**\n * Create a ReflectMap.\n */\nexport function reflectMap(field, unsafeInput, \n/**\n * By default, field values are validated when setting them. For example,\n * a value for an uint32 field must be a ECMAScript Number >= 0.\n *\n * When field values are trusted, performance can be improved by disabling\n * checks.\n */\ncheck = true) {\n    return new ReflectMapImpl(field, unsafeInput, check);\n}\nclass ReflectMapImpl {\n    constructor(field, unsafeInput, check = true) {\n        this.obj = this[unsafeLocal] = unsafeInput !== null && unsafeInput !== void 0 ? unsafeInput : {};\n        this.check = check;\n        this._field = field;\n    }\n    field() {\n        return this._field;\n    }\n    set(key, value) {\n        if (this.check) {\n            const err = checkMapEntry(this._field, key, value);\n            if (err) {\n                throw err;\n            }\n        }\n        this.obj[mapKeyToLocal(key)] = mapValueToLocal(this._field, value);\n        return this;\n    }\n    delete(key) {\n        const k = mapKeyToLocal(key);\n        const has = Object.prototype.hasOwnProperty.call(this.obj, k);\n        if (has) {\n            delete this.obj[k];\n        }\n        return has;\n    }\n    clear() {\n        for (const key of Object.keys(this.obj)) {\n            delete this.obj[key];\n        }\n    }\n    get(key) {\n        let val = this.obj[mapKeyToLocal(key)];\n        if (val !== undefined) {\n            val = mapValueToReflect(this._field, val, this.check);\n        }\n        return val;\n    }\n    has(key) {\n        return Object.prototype.hasOwnProperty.call(this.obj, mapKeyToLocal(key));\n    }\n    *keys() {\n        for (const objKey of Object.keys(this.obj)) {\n            yield mapKeyToReflect(objKey, this._field.mapKey);\n        }\n    }\n    *entries() {\n        for (const objEntry of Object.entries(this.obj)) {\n            yield [\n                mapKeyToReflect(objEntry[0], this._field.mapKey),\n                mapValueToReflect(this._field, objEntry[1], this.check),\n            ];\n        }\n    }\n    [Symbol.iterator]() {\n        return this.entries();\n    }\n    get size() {\n        return Object.keys(this.obj).length;\n    }\n    *values() {\n        for (const val of Object.values(this.obj)) {\n            yield mapValueToReflect(this._field, val, this.check);\n        }\n    }\n    forEach(callbackfn, thisArg) {\n        for (const mapEntry of this.entries()) {\n            callbackfn.call(thisArg, mapEntry[1], mapEntry[0], this);\n        }\n    }\n}\nfunction messageToLocal(field, value) {\n    if (!isReflectMessage(value)) {\n        return value;\n    }\n    if (isWrapper(value.message) &&\n        !field.oneof &&\n        field.fieldKind == \"message\") {\n        // Types from google/protobuf/wrappers.proto are unwrapped when used in\n        // a singular field that is not part of a oneof group.\n        return value.message.value;\n    }\n    if (value.desc.typeName == \"google.protobuf.Struct\" &&\n        field.parent.typeName != \"google.protobuf.Value\") {\n        // google.protobuf.Struct is represented with JsonObject when used in a\n        // field, except when used in google.protobuf.Value.\n        return wktStructToLocal(value.message);\n    }\n    return value.message;\n}\nfunction messageToReflect(field, value, check) {\n    if (value !== undefined) {\n        if (isWrapperDesc(field.message) &&\n            !field.oneof &&\n            field.fieldKind == \"message\") {\n            // Types from google/protobuf/wrappers.proto are unwrapped when used in\n            // a singular field that is not part of a oneof group.\n            value = {\n                $typeName: field.message.typeName,\n                value: longToReflect(field.message.fields[0], value),\n            };\n        }\n        else if (field.message.typeName == \"google.protobuf.Struct\" &&\n            field.parent.typeName != \"google.protobuf.Value\" &&\n            isObject(value)) {\n            // google.protobuf.Struct is represented with JsonObject when used in a\n            // field, except when used in google.protobuf.Value.\n            value = wktStructToReflect(value);\n        }\n    }\n    return new ReflectMessageImpl(field.message, value, check);\n}\nfunction listItemToLocal(field, value) {\n    if (field.listKind == \"message\") {\n        return messageToLocal(field, value);\n    }\n    return longToLocal(field, value);\n}\nfunction listItemToReflect(field, value, check) {\n    if (field.listKind == \"message\") {\n        return messageToReflect(field, value, check);\n    }\n    return longToReflect(field, value);\n}\nfunction mapValueToLocal(field, value) {\n    if (field.mapKind == \"message\") {\n        return messageToLocal(field, value);\n    }\n    return longToLocal(field, value);\n}\nfunction mapValueToReflect(field, value, check) {\n    if (field.mapKind == \"message\") {\n        return messageToReflect(field, value, check);\n    }\n    return value;\n}\nfunction mapKeyToLocal(key) {\n    return typeof key == \"string\" || typeof key == \"number\" ? key : String(key);\n}\n/**\n * Converts a map key (any scalar value except float, double, or bytes) from its\n * representation in a message (string or number, the only possible object key\n * types) to the closest possible type in ECMAScript.\n */\nfunction mapKeyToReflect(key, type) {\n    switch (type) {\n        case ScalarType.STRING:\n            return key;\n        case ScalarType.INT32:\n        case ScalarType.FIXED32:\n        case ScalarType.UINT32:\n        case ScalarType.SFIXED32:\n        case ScalarType.SINT32: {\n            const n = Number.parseInt(key);\n            if (Number.isFinite(n)) {\n                return n;\n            }\n            break;\n        }\n        case ScalarType.BOOL:\n            switch (key) {\n                case \"true\":\n                    return true;\n                case \"false\":\n                    return false;\n            }\n            break;\n        case ScalarType.UINT64:\n        case ScalarType.FIXED64:\n            try {\n                return protoInt64.uParse(key);\n            }\n            catch (_a) {\n                //\n            }\n            break;\n        default:\n            // INT64, SFIXED64, SINT64\n            try {\n                return protoInt64.parse(key);\n            }\n            catch (_b) {\n                //\n            }\n            break;\n    }\n    return key;\n}\nfunction longToReflect(field, value) {\n    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\n    switch (field.scalar) {\n        case ScalarType.INT64:\n        case ScalarType.SFIXED64:\n        case ScalarType.SINT64:\n            if (\"longAsString\" in field &&\n                field.longAsString &&\n                typeof value == \"string\") {\n                value = protoInt64.parse(value);\n            }\n            break;\n        case ScalarType.FIXED64:\n        case ScalarType.UINT64:\n            if (\"longAsString\" in field &&\n                field.longAsString &&\n                typeof value == \"string\") {\n                value = protoInt64.uParse(value);\n            }\n            break;\n    }\n    return value;\n}\nfunction longToLocal(field, value) {\n    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\n    switch (field.scalar) {\n        case ScalarType.INT64:\n        case ScalarType.SFIXED64:\n        case ScalarType.SINT64:\n            if (\"longAsString\" in field && field.longAsString) {\n                value = String(value);\n            }\n            else if (typeof value == \"string\" || typeof value == \"number\") {\n                value = protoInt64.parse(value);\n            }\n            break;\n        case ScalarType.FIXED64:\n        case ScalarType.UINT64:\n            if (\"longAsString\" in field && field.longAsString) {\n                value = String(value);\n            }\n            else if (typeof value == \"string\" || typeof value == \"number\") {\n                value = protoInt64.uParse(value);\n            }\n            break;\n    }\n    return value;\n}\nfunction wktStructToReflect(json) {\n    const struct = {\n        $typeName: \"google.protobuf.Struct\",\n        fields: {},\n    };\n    if (isObject(json)) {\n        for (const [k, v] of Object.entries(json)) {\n            struct.fields[k] = wktValueToReflect(v);\n        }\n    }\n    return struct;\n}\nfunction wktStructToLocal(val) {\n    const json = {};\n    for (const [k, v] of Object.entries(val.fields)) {\n        json[k] = wktValueToLocal(v);\n    }\n    return json;\n}\nfunction wktValueToLocal(val) {\n    switch (val.kind.case) {\n        case \"structValue\":\n            return wktStructToLocal(val.kind.value);\n        case \"listValue\":\n            return val.kind.value.values.map(wktValueToLocal);\n        case \"nullValue\":\n        case undefined:\n            return null;\n        default:\n            return val.kind.value;\n    }\n}\nfunction wktValueToReflect(json) {\n    const value = {\n        $typeName: \"google.protobuf.Value\",\n        kind: { case: undefined },\n    };\n    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- invalid input is unselected kind\n    switch (typeof json) {\n        case \"number\":\n            value.kind = { case: \"numberValue\", value: json };\n            break;\n        case \"string\":\n            value.kind = { case: \"stringValue\", value: json };\n            break;\n        case \"boolean\":\n            value.kind = { case: \"boolValue\", value: json };\n            break;\n        case \"object\":\n            if (json === null) {\n                const nullValue = 0;\n                value.kind = { case: \"nullValue\", value: nullValue };\n            }\n            else if (Array.isArray(json)) {\n                const listValue = {\n                    $typeName: \"google.protobuf.ListValue\",\n                    values: [],\n                };\n                if (Array.isArray(json)) {\n                    for (const e of json) {\n                        listValue.values.push(wktValueToReflect(e));\n                    }\n                }\n                value.kind = {\n                    case: \"listValue\",\n                    value: listValue,\n                };\n            }\n            else {\n                value.kind = {\n                    case: \"structValue\",\n                    value: wktStructToReflect(json),\n                };\n            }\n            break;\n    }\n    return value;\n}\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* eslint-disable @typescript-eslint/ban-ts-comment, @typescript-eslint/no-unnecessary-condition, prefer-const */\n/**\n * Decodes a base64 string to a byte array.\n *\n * - ignores white-space, including line breaks and tabs\n * - allows inner padding (can decode concatenated base64 strings)\n * - does not require padding\n * - understands base64url encoding:\n *   \"-\" instead of \"+\",\n *   \"_\" instead of \"/\",\n *   no padding\n */\nexport function base64Decode(base64Str) {\n    const table = getDecodeTable();\n    // estimate byte size, not accounting for inner padding and whitespace\n    let es = (base64Str.length * 3) / 4;\n    if (base64Str[base64Str.length - 2] == \"=\")\n        es -= 2;\n    else if (base64Str[base64Str.length - 1] == \"=\")\n        es -= 1;\n    let bytes = new Uint8Array(es), bytePos = 0, // position in byte array\n    groupPos = 0, // position in base64 group\n    b, // current byte\n    p = 0; // previous byte\n    for (let i = 0; i < base64Str.length; i++) {\n        b = table[base64Str.charCodeAt(i)];\n        if (b === undefined) {\n            switch (base64Str[i]) {\n                // @ts-expect-error TS7029: Fallthrough case in switch\n                case \"=\":\n                    groupPos = 0; // reset state when padding found\n                // eslint-disable-next-line no-fallthrough\n                case \"\\n\":\n                case \"\\r\":\n                case \"\\t\":\n                case \" \":\n                    continue; // skip white-space, and padding\n                default:\n                    throw Error(\"invalid base64 string\");\n            }\n        }\n        switch (groupPos) {\n            case 0:\n                p = b;\n                groupPos = 1;\n                break;\n            case 1:\n                bytes[bytePos++] = (p << 2) | ((b & 48) >> 4);\n                p = b;\n                groupPos = 2;\n                break;\n            case 2:\n                bytes[bytePos++] = ((p & 15) << 4) | ((b & 60) >> 2);\n                p = b;\n                groupPos = 3;\n                break;\n            case 3:\n                bytes[bytePos++] = ((p & 3) << 6) | b;\n                groupPos = 0;\n                break;\n        }\n    }\n    if (groupPos == 1)\n        throw Error(\"invalid base64 string\");\n    return bytes.subarray(0, bytePos);\n}\n/**\n * Encode a byte array to a base64 string.\n *\n * By default, this function uses the standard base64 encoding with padding.\n *\n * To encode without padding, use encoding = \"std_raw\".\n *\n * To encode with the URL encoding, use encoding = \"url\", which replaces the\n * characters +/ by their URL-safe counterparts -_, and omits padding.\n */\nexport function base64Encode(bytes, encoding = \"std\") {\n    const table = getEncodeTable(encoding);\n    const pad = encoding == \"std\";\n    let base64 = \"\", groupPos = 0, // position in base64 group\n    b, // current byte\n    p = 0; // carry over from previous byte\n    for (let i = 0; i < bytes.length; i++) {\n        b = bytes[i];\n        switch (groupPos) {\n            case 0:\n                base64 += table[b >> 2];\n                p = (b & 3) << 4;\n                groupPos = 1;\n                break;\n            case 1:\n                base64 += table[p | (b >> 4)];\n                p = (b & 15) << 2;\n                groupPos = 2;\n                break;\n            case 2:\n                base64 += table[p | (b >> 6)];\n                base64 += table[b & 63];\n                groupPos = 0;\n                break;\n        }\n    }\n    // add output padding\n    if (groupPos) {\n        base64 += table[p];\n        if (pad) {\n            base64 += \"=\";\n            if (groupPos == 1)\n                base64 += \"=\";\n        }\n    }\n    return base64;\n}\n// lookup table from base64 character to byte\nlet encodeTableStd;\nlet encodeTableUrl;\n// lookup table from base64 character *code* to byte because lookup by number is fast\nlet decodeTable;\nfunction getEncodeTable(encoding) {\n    if (!encodeTableStd) {\n        encodeTableStd =\n            \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".split(\"\");\n        encodeTableUrl = encodeTableStd.slice(0, -2).concat(\"-\", \"_\");\n    }\n    return encoding == \"url\" ? encodeTableUrl : encodeTableStd;\n}\nfunction getDecodeTable() {\n    if (!decodeTable) {\n        decodeTable = [];\n        const encodeTable = getEncodeTable(\"std\");\n        for (let i = 0; i < encodeTable.length; i++)\n            decodeTable[encodeTable[i].charCodeAt(0)] = i;\n        // support base64url variants\n        decodeTable[\"-\".charCodeAt(0)] = encodeTable.indexOf(\"+\");\n        decodeTable[\"_\".charCodeAt(0)] = encodeTable.indexOf(\"/\");\n    }\n    return decodeTable;\n}\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Converts snake_case to protoCamelCase according to the convention\n * used by protoc to convert a field name to a JSON name.\n */\nexport function protoCamelCase(snakeCase) {\n    let capNext = false;\n    const b = [];\n    for (let i = 0; i < snakeCase.length; i++) {\n        let c = snakeCase.charAt(i);\n        switch (c) {\n            case \"_\":\n                capNext = true;\n                break;\n            case \"0\":\n            case \"1\":\n            case \"2\":\n            case \"3\":\n            case \"4\":\n            case \"5\":\n            case \"6\":\n            case \"7\":\n            case \"8\":\n            case \"9\":\n                b.push(c);\n                capNext = false;\n                break;\n            default:\n                if (capNext) {\n                    capNext = false;\n                    c = c.toUpperCase();\n                }\n                b.push(c);\n                break;\n        }\n    }\n    return b.join(\"\");\n}\n/**\n * Names that cannot be used for object properties because they are reserved\n * by built-in JavaScript properties.\n */\nconst reservedObjectProperties = new Set([\n    // names reserved by JavaScript\n    \"constructor\",\n    \"toString\",\n    \"toJSON\",\n    \"valueOf\",\n]);\n/**\n * Escapes names that are reserved for ECMAScript built-in object properties.\n *\n * Also see safeIdentifier() from @bufbuild/protoplugin.\n */\nexport function safeObjectProperty(name) {\n    return reservedObjectProperties.has(name) ? name + \"$\" : name;\n}\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { protoCamelCase } from \"../reflect/names.js\";\nimport { unsafeIsSetExplicit } from \"../reflect/unsafe.js\";\n/**\n * @private\n */\nexport function restoreJsonNames(message) {\n    for (const f of message.field) {\n        if (!unsafeIsSetExplicit(f, \"jsonName\")) {\n            f.jsonName = protoCamelCase(f.name);\n        }\n    }\n    message.nestedType.forEach(restoreJsonNames);\n}\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { ScalarType } from \"../descriptors.js\";\nimport { protoInt64 } from \"../proto-int64.js\";\n/* eslint-disable @typescript-eslint/restrict-template-expressions */\n/**\n * Parse an enum value from the Protobuf text format.\n *\n * @private\n */\nexport function parseTextFormatEnumValue(descEnum, value) {\n    const enumValue = descEnum.values.find((v) => v.name === value);\n    if (!enumValue) {\n        throw new Error(`cannot parse ${descEnum} default value: ${value}`);\n    }\n    return enumValue.number;\n}\n/**\n * Parse a scalar value from the Protobuf text format.\n *\n * @private\n */\nexport function parseTextFormatScalarValue(type, value) {\n    switch (type) {\n        case ScalarType.STRING:\n            return value;\n        case ScalarType.BYTES: {\n            const u = unescapeBytesDefaultValue(value);\n            if (u === false) {\n                throw new Error(`cannot parse ${ScalarType[type]} default value: ${value}`);\n            }\n            return u;\n        }\n        case ScalarType.INT64:\n        case ScalarType.SFIXED64:\n        case ScalarType.SINT64:\n            return protoInt64.parse(value);\n        case ScalarType.UINT64:\n        case ScalarType.FIXED64:\n            return protoInt64.uParse(value);\n        case ScalarType.DOUBLE:\n        case ScalarType.FLOAT:\n            switch (value) {\n                case \"inf\":\n                    return Number.POSITIVE_INFINITY;\n                case \"-inf\":\n                    return Number.NEGATIVE_INFINITY;\n                case \"nan\":\n                    return Number.NaN;\n                default:\n                    return parseFloat(value);\n            }\n        case ScalarType.BOOL:\n            return value === \"true\";\n        case ScalarType.INT32:\n        case ScalarType.UINT32:\n        case ScalarType.SINT32:\n        case ScalarType.FIXED32:\n        case ScalarType.SFIXED32:\n            return parseInt(value, 10);\n    }\n}\n/**\n * Parses a text-encoded default value (proto2) of a BYTES field.\n */\nfunction unescapeBytesDefaultValue(str) {\n    const b = [];\n    const input = {\n        tail: str,\n        c: \"\",\n        next() {\n            if (this.tail.length == 0) {\n                return false;\n            }\n            this.c = this.tail[0];\n            this.tail = this.tail.substring(1);\n            return true;\n        },\n        take(n) {\n            if (this.tail.length >= n) {\n                const r = this.tail.substring(0, n);\n                this.tail = this.tail.substring(n);\n                return r;\n            }\n            return false;\n        },\n    };\n    while (input.next()) {\n        switch (input.c) {\n            case \"\\\\\":\n                if (input.next()) {\n                    switch (input.c) {\n                        case \"\\\\\":\n                            b.push(input.c.charCodeAt(0));\n                            break;\n                        case \"b\":\n                            b.push(0x08);\n                            break;\n                        case \"f\":\n                            b.push(0x0c);\n                            break;\n                        case \"n\":\n                            b.push(0x0a);\n                            break;\n                        case \"r\":\n                            b.push(0x0d);\n                            break;\n                        case \"t\":\n                            b.push(0x09);\n                            break;\n                        case \"v\":\n                            b.push(0x0b);\n                            break;\n                        case \"0\":\n                        case \"1\":\n                        case \"2\":\n                        case \"3\":\n                        case \"4\":\n                        case \"5\":\n                        case \"6\":\n                        case \"7\": {\n                            const s = input.c;\n                            const t = input.take(2);\n                            if (t === false) {\n                                return false;\n                            }\n                            const n = parseInt(s + t, 8);\n                            if (isNaN(n)) {\n                                return false;\n                            }\n                            b.push(n);\n                            break;\n                        }\n                        case \"x\": {\n                            const s = input.c;\n                            const t = input.take(2);\n                            if (t === false) {\n                                return false;\n                            }\n                            const n = parseInt(s + t, 16);\n                            if (isNaN(n)) {\n                                return false;\n                            }\n                            b.push(n);\n                            break;\n                        }\n                        case \"u\": {\n                            const s = input.c;\n                            const t = input.take(4);\n                            if (t === false) {\n                                return false;\n                            }\n                            const n = parseInt(s + t, 16);\n                            if (isNaN(n)) {\n                                return false;\n                            }\n                            const chunk = new Uint8Array(4);\n                            const view = new DataView(chunk.buffer);\n                            view.setInt32(0, n, true);\n                            b.push(chunk[0], chunk[1], chunk[2], chunk[3]);\n                            break;\n                        }\n                        case \"U\": {\n                            const s = input.c;\n                            const t = input.take(8);\n                            if (t === false) {\n                                return false;\n                            }\n                            const tc = protoInt64.uEnc(s + t);\n                            const chunk = new Uint8Array(8);\n                            const view = new DataView(chunk.buffer);\n                            view.setInt32(0, tc.lo, true);\n                            view.setInt32(4, tc.hi, true);\n                            b.push(chunk[0], chunk[1], chunk[2], chunk[3], chunk[4], chunk[5], chunk[6], chunk[7]);\n                            break;\n                        }\n                    }\n                }\n                break;\n            default:\n                b.push(input.c.charCodeAt(0));\n        }\n    }\n    return new Uint8Array(b);\n}\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Iterate over all types - enumerations, extensions, services, messages -\n * and enumerations, extensions and messages nested in messages.\n */\nexport function* nestedTypes(desc) {\n    switch (desc.kind) {\n        case \"file\":\n            for (const message of desc.messages) {\n                yield message;\n                yield* nestedTypes(message);\n            }\n            yield* desc.enums;\n            yield* desc.services;\n            yield* desc.extensions;\n            break;\n        case \"message\":\n            for (const message of desc.nestedMessages) {\n                yield message;\n                yield* nestedTypes(message);\n            }\n            yield* desc.nestedEnums;\n            yield* desc.nestedExtensions;\n            break;\n    }\n}\n/**\n * Returns the ancestors of a given Protobuf element, up to the file.\n */\nexport function parentTypes(desc) {\n    const parents = [];\n    while (desc.kind !== \"file\") {\n        const p = parent(desc);\n        desc = p;\n        parents.push(p);\n    }\n    return parents;\n}\nfunction parent(desc) {\n    var _a;\n    switch (desc.kind) {\n        case \"enum_value\":\n        case \"field\":\n        case \"oneof\":\n        case \"rpc\":\n            return desc.parent;\n        case \"service\":\n            return desc.file;\n        case \"extension\":\n        case \"enum\":\n        case \"message\":\n            return (_a = desc.parent) !== null && _a !== void 0 ? _a : desc.file;\n    }\n}\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { ScalarType, } from \"./descriptors.js\";\nimport { parseTextFormatEnumValue, parseTextFormatScalarValue, } from \"./wire/text-format.js\";\nimport { nestedTypes } from \"./reflect/nested-types.js\";\nimport { unsafeIsSetExplicit } from \"./reflect/unsafe.js\";\nimport { protoCamelCase, safeObjectProperty } from \"./reflect/names.js\";\n/**\n * Create a registry from the given inputs.\n *\n * An input can be:\n * - Any message, enum, service, or extension descriptor, which adds just the\n *   descriptor for this type.\n * - A file descriptor, which adds all typed defined in this file.\n * - A registry, which adds all types from the registry.\n *\n * For duplicate descriptors (same type name), the one given last wins.\n */\nexport function createRegistry(...input) {\n    return initBaseRegistry(input);\n}\n/**\n * Create a registry that allows adding and removing descriptors.\n */\nexport function createMutableRegistry(...input) {\n    const reg = initBaseRegistry(input);\n    return Object.assign(Object.assign({}, reg), { remove(desc) {\n            var _a;\n            if (desc.kind == \"extension\") {\n                (_a = reg.extendees.get(desc.extendee.typeName)) === null || _a === void 0 ? void 0 : _a.delete(desc.number);\n            }\n            reg.types.delete(desc.typeName);\n        } });\n}\nexport function createFileRegistry(...args) {\n    const registry = createBaseRegistry();\n    if (!args.length) {\n        return registry;\n    }\n    if (\"$typeName\" in args[0] &&\n        args[0].$typeName == \"google.protobuf.FileDescriptorSet\") {\n        for (const file of args[0].file) {\n            addFile(file, registry);\n        }\n        return registry;\n    }\n    if (\"$typeName\" in args[0]) {\n        const input = args[0];\n        const resolve = args[1];\n        const seen = new Set();\n        // eslint-disable-next-line no-inner-declarations\n        function recurseDeps(file) {\n            const deps = [];\n            for (const protoFileName of file.dependency) {\n                if (registry.getFile(protoFileName) != undefined) {\n                    continue;\n                }\n                if (seen.has(protoFileName)) {\n                    continue;\n                }\n                const dep = resolve(protoFileName);\n                if (!dep) {\n                    throw new Error(`Unable to resolve ${protoFileName}, imported by ${file.name}`);\n                }\n                if (\"kind\" in dep) {\n                    registry.addFile(dep, false, true);\n                }\n                else {\n                    seen.add(dep.name);\n                    deps.push(dep);\n                }\n            }\n            return deps.concat(...deps.map(recurseDeps));\n        }\n        for (const file of [input, ...recurseDeps(input)].reverse()) {\n            addFile(file, registry);\n        }\n    }\n    else {\n        for (const fileReg of args) {\n            for (const file of fileReg.files) {\n                registry.addFile(file);\n            }\n        }\n    }\n    return registry;\n}\n/**\n * @private\n */\nfunction createBaseRegistry() {\n    const types = new Map();\n    const extendees = new Map();\n    const files = new Map();\n    return {\n        kind: \"registry\",\n        types,\n        extendees,\n        [Symbol.iterator]() {\n            return types.values();\n        },\n        get files() {\n            return files.values();\n        },\n        addFile(file, skipTypes, withDeps) {\n            files.set(file.proto.name, file);\n            // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n            if (!skipTypes) {\n                for (const type of nestedTypes(file)) {\n                    this.add(type);\n                }\n            }\n            // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n            if (withDeps) {\n                for (const f of file.dependencies) {\n                    this.addFile(f, skipTypes, withDeps);\n                }\n            }\n        },\n        add(desc) {\n            if (desc.kind == \"extension\") {\n                let numberToExt = extendees.get(desc.extendee.typeName);\n                if (!numberToExt) {\n                    extendees.set(desc.extendee.typeName, (numberToExt = new Map()));\n                }\n                numberToExt.set(desc.number, desc);\n            }\n            types.set(desc.typeName, desc);\n        },\n        get(typeName) {\n            return types.get(typeName);\n        },\n        getFile(fileName) {\n            return files.get(fileName);\n        },\n        getMessage(typeName) {\n            const t = types.get(typeName);\n            return (t === null || t === void 0 ? void 0 : t.kind) == \"message\" ? t : undefined;\n        },\n        getEnum(typeName) {\n            const t = types.get(typeName);\n            return (t === null || t === void 0 ? void 0 : t.kind) == \"enum\" ? t : undefined;\n        },\n        getExtension(typeName) {\n            const t = types.get(typeName);\n            return (t === null || t === void 0 ? void 0 : t.kind) == \"extension\" ? t : undefined;\n        },\n        getExtensionFor(extendee, no) {\n            var _a;\n            return (_a = extendees.get(extendee.typeName)) === null || _a === void 0 ? void 0 : _a.get(no);\n        },\n        getService(typeName) {\n            const t = types.get(typeName);\n            return (t === null || t === void 0 ? void 0 : t.kind) == \"service\" ? t : undefined;\n        },\n    };\n}\n/**\n * @private\n */\nfunction initBaseRegistry(inputs) {\n    const registry = createBaseRegistry();\n    for (const input of inputs) {\n        switch (input.kind) {\n            case \"registry\":\n                for (const n of input) {\n                    registry.add(n);\n                }\n                break;\n            case \"file\":\n                registry.addFile(input);\n                break;\n            default:\n                registry.add(input);\n                break;\n        }\n    }\n    return registry;\n}\n// bootstrap-inject google.protobuf.Edition.EDITION_PROTO2: const $name: Edition.$localName = $number;\nconst EDITION_PROTO2 = 998;\n// bootstrap-inject google.protobuf.Edition.EDITION_PROTO3: const $name: Edition.$localName = $number;\nconst EDITION_PROTO3 = 999;\n// bootstrap-inject google.protobuf.FieldDescriptorProto.Type.TYPE_STRING: const $name: FieldDescriptorProto_Type.$localName = $number;\nconst TYPE_STRING = 9;\n// bootstrap-inject google.protobuf.FieldDescriptorProto.Type.TYPE_GROUP: const $name: FieldDescriptorProto_Type.$localName = $number;\nconst TYPE_GROUP = 10;\n// bootstrap-inject google.protobuf.FieldDescriptorProto.Type.TYPE_MESSAGE: const $name: FieldDescriptorProto_Type.$localName = $number;\nconst TYPE_MESSAGE = 11;\n// bootstrap-inject google.protobuf.FieldDescriptorProto.Type.TYPE_BYTES: const $name: FieldDescriptorProto_Type.$localName = $number;\nconst TYPE_BYTES = 12;\n// bootstrap-inject google.protobuf.FieldDescriptorProto.Type.TYPE_ENUM: const $name: FieldDescriptorProto_Type.$localName = $number;\nconst TYPE_ENUM = 14;\n// bootstrap-inject google.protobuf.FieldDescriptorProto.Label.LABEL_REPEATED: const $name: FieldDescriptorProto_Label.$localName = $number;\nconst LABEL_REPEATED = 3;\n// bootstrap-inject google.protobuf.FieldDescriptorProto.Label.LABEL_REQUIRED: const $name: FieldDescriptorProto_Label.$localName = $number;\nconst LABEL_REQUIRED = 2;\n// bootstrap-inject google.protobuf.FieldOptions.JSType.JS_STRING: const $name: FieldOptions_JSType.$localName = $number;\nconst JS_STRING = 1;\n// bootstrap-inject google.protobuf.MethodOptions.IdempotencyLevel.IDEMPOTENCY_UNKNOWN: const $name: MethodOptions_IdempotencyLevel.$localName = $number;\nconst IDEMPOTENCY_UNKNOWN = 0;\n// bootstrap-inject google.protobuf.FeatureSet.FieldPresence.EXPLICIT: const $name: FeatureSet_FieldPresence.$localName = $number;\nconst EXPLICIT = 1;\n// bootstrap-inject google.protobuf.FeatureSet.FieldPresence.IMPLICIT: const $name: FeatureSet_FieldPresence.$localName = $number;\nconst IMPLICIT = 2;\n// bootstrap-inject google.protobuf.FeatureSet.FieldPresence.LEGACY_REQUIRED: const $name: FeatureSet_FieldPresence.$localName = $number;\nconst LEGACY_REQUIRED = 3;\n// bootstrap-inject google.protobuf.FeatureSet.RepeatedFieldEncoding.PACKED: const $name: FeatureSet_RepeatedFieldEncoding.$localName = $number;\nconst PACKED = 1;\n// bootstrap-inject google.protobuf.FeatureSet.MessageEncoding.DELIMITED: const $name: FeatureSet_MessageEncoding.$localName = $number;\nconst DELIMITED = 2;\n// bootstrap-inject google.protobuf.FeatureSet.EnumType.OPEN: const $name: FeatureSet_EnumType.$localName = $number;\nconst OPEN = 1;\n// prettier-ignore\n// bootstrap-inject defaults: EDITION_PROTO2 to EDITION_2023: export const minimumEdition: SupportedEdition = $minimumEdition, maximumEdition: SupportedEdition = $maximumEdition;\n// generated from protoc v28.3\nexport const minimumEdition = 998, maximumEdition = 1000;\nconst featureDefaults = {\n    // EDITION_PROTO2\n    998: {\n        fieldPresence: 1, // EXPLICIT,\n        enumType: 2, // CLOSED,\n        repeatedFieldEncoding: 2, // EXPANDED,\n        utf8Validation: 3, // NONE,\n        messageEncoding: 1, // LENGTH_PREFIXED,\n        jsonFormat: 2, // LEGACY_BEST_EFFORT,\n    },\n    // EDITION_PROTO3\n    999: {\n        fieldPresence: 2, // IMPLICIT,\n        enumType: 1, // OPEN,\n        repeatedFieldEncoding: 1, // PACKED,\n        utf8Validation: 2, // VERIFY,\n        messageEncoding: 1, // LENGTH_PREFIXED,\n        jsonFormat: 1, // ALLOW,\n    },\n    // EDITION_2023\n    1000: {\n        fieldPresence: 1, // EXPLICIT,\n        enumType: 1, // OPEN,\n        repeatedFieldEncoding: 1, // PACKED,\n        utf8Validation: 2, // VERIFY,\n        messageEncoding: 1, // LENGTH_PREFIXED,\n        jsonFormat: 1, // ALLOW,\n    },\n};\n/**\n * Create a descriptor for a file, add it to the registry.\n */\nfunction addFile(proto, reg) {\n    var _a, _b;\n    const file = {\n        kind: \"file\",\n        proto,\n        deprecated: (_b = (_a = proto.options) === null || _a === void 0 ? void 0 : _a.deprecated) !== null && _b !== void 0 ? _b : false,\n        edition: getFileEdition(proto),\n        name: proto.name.replace(/\\.proto$/, \"\"),\n        dependencies: findFileDependencies(proto, reg),\n        enums: [],\n        messages: [],\n        extensions: [],\n        services: [],\n        toString() {\n            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions -- we asserted above\n            return `file ${proto.name}`;\n        },\n    };\n    const mapEntriesStore = new Map();\n    const mapEntries = {\n        get(typeName) {\n            return mapEntriesStore.get(typeName);\n        },\n        add(desc) {\n            var _a;\n            assert(((_a = desc.proto.options) === null || _a === void 0 ? void 0 : _a.mapEntry) === true);\n            mapEntriesStore.set(desc.typeName, desc);\n        },\n    };\n    for (const enumProto of proto.enumType) {\n        addEnum(enumProto, file, undefined, reg);\n    }\n    for (const messageProto of proto.messageType) {\n        addMessage(messageProto, file, undefined, reg, mapEntries);\n    }\n    for (const serviceProto of proto.service) {\n        addService(serviceProto, file, reg);\n    }\n    addExtensions(file, reg);\n    for (const mapEntry of mapEntriesStore.values()) {\n        // to create a map field, we need access to the map entry's fields\n        addFields(mapEntry, reg, mapEntries);\n    }\n    for (const message of file.messages) {\n        addFields(message, reg, mapEntries);\n        addExtensions(message, reg);\n    }\n    reg.addFile(file, true);\n}\n/**\n * Create descriptors for extensions, and add them to the message / file,\n * and to our cart.\n * Recurses into nested types.\n */\nfunction addExtensions(desc, reg) {\n    switch (desc.kind) {\n        case \"file\":\n            for (const proto of desc.proto.extension) {\n                const ext = newField(proto, desc, reg);\n                desc.extensions.push(ext);\n                reg.add(ext);\n            }\n            break;\n        case \"message\":\n            for (const proto of desc.proto.extension) {\n                const ext = newField(proto, desc, reg);\n                desc.nestedExtensions.push(ext);\n                reg.add(ext);\n            }\n            for (const message of desc.nestedMessages) {\n                addExtensions(message, reg);\n            }\n            break;\n    }\n}\n/**\n * Create descriptors for fields and oneof groups, and add them to the message.\n * Recurses into nested types.\n */\nfunction addFields(message, reg, mapEntries) {\n    const allOneofs = message.proto.oneofDecl.map((proto) => newOneof(proto, message));\n    const oneofsSeen = new Set();\n    for (const proto of message.proto.field) {\n        const oneof = findOneof(proto, allOneofs);\n        const field = newField(proto, message, reg, oneof, mapEntries);\n        message.fields.push(field);\n        message.field[field.localName] = field;\n        if (oneof === undefined) {\n            message.members.push(field);\n        }\n        else {\n            oneof.fields.push(field);\n            if (!oneofsSeen.has(oneof)) {\n                oneofsSeen.add(oneof);\n                message.members.push(oneof);\n            }\n        }\n    }\n    for (const oneof of allOneofs.filter((o) => oneofsSeen.has(o))) {\n        message.oneofs.push(oneof);\n    }\n    for (const child of message.nestedMessages) {\n        addFields(child, reg, mapEntries);\n    }\n}\n/**\n * Create a descriptor for an enumeration, and add it our cart and to the\n * parent type, if any.\n */\nfunction addEnum(proto, file, parent, reg) {\n    var _a, _b, _c;\n    const sharedPrefix = findEnumSharedPrefix(proto.name, proto.value);\n    const desc = {\n        kind: \"enum\",\n        proto,\n        deprecated: (_b = (_a = proto.options) === null || _a === void 0 ? void 0 : _a.deprecated) !== null && _b !== void 0 ? _b : false,\n        file,\n        parent,\n        open: true,\n        name: proto.name,\n        typeName: makeTypeName(proto, parent, file),\n        value: {},\n        values: [],\n        sharedPrefix,\n        toString() {\n            return `enum ${this.typeName}`;\n        },\n    };\n    desc.open = isEnumOpen(desc);\n    reg.add(desc);\n    proto.value.forEach((proto) => {\n        var _a, _b;\n        const name = proto.name;\n        desc.values.push((desc.value[proto.number] = {\n            kind: \"enum_value\",\n            proto,\n            deprecated: (_b = (_a = proto.options) === null || _a === void 0 ? void 0 : _a.deprecated) !== null && _b !== void 0 ? _b : false,\n            parent: desc,\n            name,\n            localName: safeObjectProperty(sharedPrefix == undefined\n                ? name\n                : name.substring(sharedPrefix.length)),\n            number: proto.number,\n            toString() {\n                return `enum value ${desc.typeName}.${name}`;\n            },\n        }));\n    });\n    ((_c = parent === null || parent === void 0 ? void 0 : parent.nestedEnums) !== null && _c !== void 0 ? _c : file.enums).push(desc);\n}\n/**\n * Create a descriptor for a message, including nested types, and add it to our\n * cart. Note that this does not create descriptors fields.\n */\nfunction addMessage(proto, file, parent, reg, mapEntries) {\n    var _a, _b, _c, _d;\n    const desc = {\n        kind: \"message\",\n        proto,\n        deprecated: (_b = (_a = proto.options) === null || _a === void 0 ? void 0 : _a.deprecated) !== null && _b !== void 0 ? _b : false,\n        file,\n        parent,\n        name: proto.name,\n        typeName: makeTypeName(proto, parent, file),\n        fields: [],\n        field: {},\n        oneofs: [],\n        members: [],\n        nestedEnums: [],\n        nestedMessages: [],\n        nestedExtensions: [],\n        toString() {\n            return `message ${this.typeName}`;\n        },\n    };\n    if (((_c = proto.options) === null || _c === void 0 ? void 0 : _c.mapEntry) === true) {\n        mapEntries.add(desc);\n    }\n    else {\n        ((_d = parent === null || parent === void 0 ? void 0 : parent.nestedMessages) !== null && _d !== void 0 ? _d : file.messages).push(desc);\n        reg.add(desc);\n    }\n    for (const enumProto of proto.enumType) {\n        addEnum(enumProto, file, desc, reg);\n    }\n    for (const messageProto of proto.nestedType) {\n        addMessage(messageProto, file, desc, reg, mapEntries);\n    }\n}\n/**\n * Create a descriptor for a service, including methods, and add it to our\n * cart.\n */\nfunction addService(proto, file, reg) {\n    var _a, _b;\n    const desc = {\n        kind: \"service\",\n        proto,\n        deprecated: (_b = (_a = proto.options) === null || _a === void 0 ? void 0 : _a.deprecated) !== null && _b !== void 0 ? _b : false,\n        file,\n        name: proto.name,\n        typeName: makeTypeName(proto, undefined, file),\n        methods: [],\n        method: {},\n        toString() {\n            return `service ${this.typeName}`;\n        },\n    };\n    file.services.push(desc);\n    reg.add(desc);\n    for (const methodProto of proto.method) {\n        const method = newMethod(methodProto, desc, reg);\n        desc.methods.push(method);\n        desc.method[method.localName] = method;\n    }\n}\n/**\n * Create a descriptor for a method.\n */\nfunction newMethod(proto, parent, reg) {\n    var _a, _b, _c, _d;\n    let methodKind;\n    if (proto.clientStreaming && proto.serverStreaming) {\n        methodKind = \"bidi_streaming\";\n    }\n    else if (proto.clientStreaming) {\n        methodKind = \"client_streaming\";\n    }\n    else if (proto.serverStreaming) {\n        methodKind = \"server_streaming\";\n    }\n    else {\n        methodKind = \"unary\";\n    }\n    const input = reg.getMessage(trimLeadingDot(proto.inputType));\n    const output = reg.getMessage(trimLeadingDot(proto.outputType));\n    assert(input, `invalid MethodDescriptorProto: input_type ${proto.inputType} not found`);\n    assert(output, `invalid MethodDescriptorProto: output_type ${proto.inputType} not found`);\n    const name = proto.name;\n    return {\n        kind: \"rpc\",\n        proto,\n        deprecated: (_b = (_a = proto.options) === null || _a === void 0 ? void 0 : _a.deprecated) !== null && _b !== void 0 ? _b : false,\n        parent,\n        name,\n        localName: safeObjectProperty(name.length\n            ? safeObjectProperty(name[0].toLowerCase() + name.substring(1))\n            : name),\n        methodKind,\n        input,\n        output,\n        idempotency: (_d = (_c = proto.options) === null || _c === void 0 ? void 0 : _c.idempotencyLevel) !== null && _d !== void 0 ? _d : IDEMPOTENCY_UNKNOWN,\n        toString() {\n            return `rpc ${parent.typeName}.${name}`;\n        },\n    };\n}\n/**\n * Create a descriptor for a oneof group.\n */\nfunction newOneof(proto, parent) {\n    return {\n        kind: \"oneof\",\n        proto,\n        deprecated: false,\n        parent,\n        fields: [],\n        name: proto.name,\n        localName: safeObjectProperty(protoCamelCase(proto.name)),\n        toString() {\n            return `oneof ${parent.typeName}.${this.name}`;\n        },\n    };\n}\nfunction newField(proto, parentOrFile, reg, oneof, mapEntries) {\n    var _a, _b, _c;\n    const isExtension = mapEntries === undefined;\n    const field = {\n        kind: \"field\",\n        proto,\n        deprecated: (_b = (_a = proto.options) === null || _a === void 0 ? void 0 : _a.deprecated) !== null && _b !== void 0 ? _b : false,\n        name: proto.name,\n        number: proto.number,\n        scalar: undefined,\n        message: undefined,\n        enum: undefined,\n        presence: getFieldPresence(proto, oneof, isExtension, parentOrFile),\n        listKind: undefined,\n        mapKind: undefined,\n        mapKey: undefined,\n        delimitedEncoding: undefined,\n        packed: undefined,\n        longAsString: false,\n        getDefaultValue: undefined,\n    };\n    if (isExtension) {\n        // extension field\n        const file = parentOrFile.kind == \"file\" ? parentOrFile : parentOrFile.file;\n        const parent = parentOrFile.kind == \"file\" ? undefined : parentOrFile;\n        const typeName = makeTypeName(proto, parent, file);\n        field.kind = \"extension\";\n        field.file = file;\n        field.parent = parent;\n        field.oneof = undefined;\n        field.typeName = typeName;\n        field.jsonName = `[${typeName}]`; // option json_name is not allowed on extension fields\n        field.toString = () => `extension ${typeName}`;\n        const extendee = reg.getMessage(trimLeadingDot(proto.extendee));\n        assert(extendee, `invalid FieldDescriptorProto: extendee ${proto.extendee} not found`);\n        field.extendee = extendee;\n    }\n    else {\n        // regular field\n        const parent = parentOrFile;\n        assert(parent.kind == \"message\");\n        field.parent = parent;\n        field.oneof = oneof;\n        field.localName = oneof\n            ? protoCamelCase(proto.name)\n            : safeObjectProperty(protoCamelCase(proto.name));\n        field.jsonName = proto.jsonName;\n        field.toString = () => `field ${parent.typeName}.${proto.name}`;\n    }\n    const label = proto.label;\n    const type = proto.type;\n    const jstype = (_c = proto.options) === null || _c === void 0 ? void 0 : _c.jstype;\n    if (label === LABEL_REPEATED) {\n        // list or map field\n        const mapEntry = type == TYPE_MESSAGE\n            ? mapEntries === null || mapEntries === void 0 ? void 0 : mapEntries.get(trimLeadingDot(proto.typeName))\n            : undefined;\n        if (mapEntry) {\n            // map field\n            field.fieldKind = \"map\";\n            const { key, value } = findMapEntryFields(mapEntry);\n            field.mapKey = key.scalar;\n            field.mapKind = value.fieldKind;\n            field.message = value.message;\n            field.delimitedEncoding = false; // map fields are always LENGTH_PREFIXED\n            field.enum = value.enum;\n            field.scalar = value.scalar;\n            return field;\n        }\n        // list field\n        field.fieldKind = \"list\";\n        switch (type) {\n            case TYPE_MESSAGE:\n            case TYPE_GROUP:\n                field.listKind = \"message\";\n                field.message = reg.getMessage(trimLeadingDot(proto.typeName));\n                // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n                assert(field.message);\n                field.delimitedEncoding = isDelimitedEncoding(proto, parentOrFile);\n                break;\n            case TYPE_ENUM:\n                field.listKind = \"enum\";\n                field.enum = reg.getEnum(trimLeadingDot(proto.typeName));\n                // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n                assert(field.enum);\n                break;\n            default:\n                field.listKind = \"scalar\";\n                field.scalar = type;\n                field.longAsString = jstype == JS_STRING;\n                break;\n        }\n        field.packed = isPackedField(proto, parentOrFile);\n        return field;\n    }\n    // singular\n    switch (type) {\n        case TYPE_MESSAGE:\n        case TYPE_GROUP:\n            field.fieldKind = \"message\";\n            field.message = reg.getMessage(trimLeadingDot(proto.typeName));\n            assert(\n            // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n            field.message, `invalid FieldDescriptorProto: type_name ${proto.typeName} not found`);\n            field.delimitedEncoding = isDelimitedEncoding(proto, parentOrFile);\n            field.getDefaultValue = () => undefined;\n            break;\n        case TYPE_ENUM: {\n            const enumeration = reg.getEnum(trimLeadingDot(proto.typeName));\n            assert(enumeration !== undefined, `invalid FieldDescriptorProto: type_name ${proto.typeName} not found`);\n            field.fieldKind = \"enum\";\n            field.enum = reg.getEnum(trimLeadingDot(proto.typeName));\n            field.getDefaultValue = () => {\n                return unsafeIsSetExplicit(proto, \"defaultValue\")\n                    ? parseTextFormatEnumValue(enumeration, proto.defaultValue)\n                    : undefined;\n            };\n            break;\n        }\n        default: {\n            field.fieldKind = \"scalar\";\n            field.scalar = type;\n            field.longAsString = jstype == JS_STRING;\n            field.getDefaultValue = () => {\n                return unsafeIsSetExplicit(proto, \"defaultValue\")\n                    ? parseTextFormatScalarValue(type, proto.defaultValue)\n                    : undefined;\n            };\n            break;\n        }\n    }\n    return field;\n}\n/**\n * Parse the \"syntax\" and \"edition\" fields, returning one of the supported\n * editions.\n */\nfunction getFileEdition(proto) {\n    switch (proto.syntax) {\n        case \"\":\n        case \"proto2\":\n            return EDITION_PROTO2;\n        case \"proto3\":\n            return EDITION_PROTO3;\n        case \"editions\":\n            if (proto.edition in featureDefaults) {\n                return proto.edition;\n            }\n            throw new Error(`${proto.name}: unsupported edition`);\n        default:\n            throw new Error(`${proto.name}: unsupported syntax \"${proto.syntax}\"`);\n    }\n}\n/**\n * Resolve dependencies of FileDescriptorProto to DescFile.\n */\nfunction findFileDependencies(proto, reg) {\n    return proto.dependency.map((wantName) => {\n        const dep = reg.getFile(wantName);\n        if (!dep) {\n            throw new Error(`Cannot find ${wantName}, imported by ${proto.name}`);\n        }\n        return dep;\n    });\n}\n/**\n * Finds a prefix shared by enum values, for example `my_enum_` for\n * `enum MyEnum {MY_ENUM_A=0; MY_ENUM_B=1;}`.\n */\nfunction findEnumSharedPrefix(enumName, values) {\n    const prefix = camelToSnakeCase(enumName) + \"_\";\n    for (const value of values) {\n        if (!value.name.toLowerCase().startsWith(prefix)) {\n            return undefined;\n        }\n        const shortName = value.name.substring(prefix.length);\n        if (shortName.length == 0) {\n            return undefined;\n        }\n        if (/^\\d/.test(shortName)) {\n            // identifiers must not start with numbers\n            return undefined;\n        }\n    }\n    return prefix;\n}\n/**\n * Converts lowerCamelCase or UpperCamelCase into lower_snake_case.\n * This is used to find shared prefixes in an enum.\n */\nfunction camelToSnakeCase(camel) {\n    return (camel.substring(0, 1) + camel.substring(1).replace(/[A-Z]/g, (c) => \"_\" + c)).toLowerCase();\n}\n/**\n * Create a fully qualified name for a protobuf type or extension field.\n *\n * The fully qualified name for messages, enumerations, and services is\n * constructed by concatenating the package name (if present), parent\n * message names (for nested types), and the type name. We omit the leading\n * dot added by protobuf compilers. Examples:\n * - mypackage.MyMessage\n * - mypackage.MyMessage.NestedMessage\n *\n * The fully qualified name for extension fields is constructed by\n * concatenating the package name (if present), parent message names (for\n * extensions declared within a message), and the field name. Examples:\n * - mypackage.extfield\n * - mypackage.MyMessage.extfield\n */\nfunction makeTypeName(proto, parent, file) {\n    let typeName;\n    if (parent) {\n        typeName = `${parent.typeName}.${proto.name}`;\n    }\n    else if (file.proto.package.length > 0) {\n        typeName = `${file.proto.package}.${proto.name}`;\n    }\n    else {\n        typeName = `${proto.name}`;\n    }\n    return typeName;\n}\n/**\n * Remove the leading dot from a fully qualified type name.\n */\nfunction trimLeadingDot(typeName) {\n    return typeName.startsWith(\".\") ? typeName.substring(1) : typeName;\n}\n/**\n * Did the user put the field in a oneof group?\n * Synthetic oneofs for proto3 optionals are ignored.\n */\nfunction findOneof(proto, allOneofs) {\n    if (!unsafeIsSetExplicit(proto, \"oneofIndex\")) {\n        return undefined;\n    }\n    if (proto.proto3Optional) {\n        return undefined;\n    }\n    const oneof = allOneofs[proto.oneofIndex];\n    assert(\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n    oneof, `invalid FieldDescriptorProto: oneof #${proto.oneofIndex} for field #${proto.number} not found`);\n    return oneof;\n}\n/**\n * Presence of the field.\n * See https://protobuf.dev/programming-guides/field_presence/\n */\nfunction getFieldPresence(proto, oneof, isExtension, parent) {\n    if (proto.label == LABEL_REQUIRED) {\n        // proto2 required is LEGACY_REQUIRED\n        return LEGACY_REQUIRED;\n    }\n    if (proto.label == LABEL_REPEATED) {\n        // repeated fields (including maps) do not track presence\n        return IMPLICIT;\n    }\n    if (!!oneof || proto.proto3Optional) {\n        // oneof is always explicit\n        return EXPLICIT;\n    }\n    if (proto.type == TYPE_MESSAGE) {\n        // singular message field cannot be implicit\n        return EXPLICIT;\n    }\n    if (isExtension) {\n        // extensions always track presence\n        return EXPLICIT;\n    }\n    return resolveFeature(\"fieldPresence\", { proto, parent });\n}\n/**\n * Pack this repeated field?\n */\nfunction isPackedField(proto, parent) {\n    if (proto.label != LABEL_REPEATED) {\n        return false;\n    }\n    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\n    switch (proto.type) {\n        case TYPE_STRING:\n        case TYPE_BYTES:\n        case TYPE_GROUP:\n        case TYPE_MESSAGE:\n            // length-delimited types cannot be packed\n            return false;\n    }\n    const o = proto.options;\n    if (o && unsafeIsSetExplicit(o, \"packed\")) {\n        // prefer the field option over edition features\n        return o.packed;\n    }\n    return (PACKED ==\n        resolveFeature(\"repeatedFieldEncoding\", {\n            proto,\n            parent,\n        }));\n}\n/**\n * Find the key and value fields of a synthetic map entry message.\n */\nfunction findMapEntryFields(mapEntry) {\n    const key = mapEntry.fields.find((f) => f.number === 1);\n    const value = mapEntry.fields.find((f) => f.number === 2);\n    assert(key &&\n        key.fieldKind == \"scalar\" &&\n        key.scalar != ScalarType.BYTES &&\n        key.scalar != ScalarType.FLOAT &&\n        key.scalar != ScalarType.DOUBLE &&\n        value &&\n        value.fieldKind != \"list\" &&\n        value.fieldKind != \"map\");\n    return { key, value };\n}\n/**\n * Enumerations can be open or closed.\n * See https://protobuf.dev/programming-guides/enum/\n */\nfunction isEnumOpen(desc) {\n    var _a;\n    return (OPEN ==\n        resolveFeature(\"enumType\", {\n            proto: desc.proto,\n            parent: (_a = desc.parent) !== null && _a !== void 0 ? _a : desc.file,\n        }));\n}\n/**\n * Encode the message delimited (a.k.a. proto2 group encoding), or\n * length-prefixed?\n */\nfunction isDelimitedEncoding(proto, parent) {\n    if (proto.type == TYPE_GROUP) {\n        return true;\n    }\n    return (DELIMITED ==\n        resolveFeature(\"messageEncoding\", {\n            proto,\n            parent,\n        }));\n}\nfunction resolveFeature(name, ref) {\n    var _a, _b;\n    const featureSet = (_a = ref.proto.options) === null || _a === void 0 ? void 0 : _a.features;\n    if (featureSet) {\n        const val = featureSet[name];\n        if (val != 0) {\n            return val;\n        }\n    }\n    if (\"kind\" in ref) {\n        if (ref.kind == \"message\") {\n            return resolveFeature(name, (_b = ref.parent) !== null && _b !== void 0 ? _b : ref.file);\n        }\n        const editionDefaults = featureDefaults[ref.edition];\n        if (!editionDefaults) {\n            throw new Error(`feature default for edition ${ref.edition} not found`);\n        }\n        return editionDefaults[name];\n    }\n    return resolveFeature(name, ref.parent);\n}\n/**\n * Assert that condition is truthy or throw error (with message)\n */\nfunction assert(condition, msg) {\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions -- we want the implicit conversion to boolean\n    if (!condition) {\n        throw new Error(msg);\n    }\n}\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { restoreJsonNames } from \"./restore-json-names.js\";\nimport { createFileRegistry } from \"../registry.js\";\n/**\n * Hydrate a file descriptor for google/protobuf/descriptor.proto from a plain\n * object.\n *\n * See createFileDescriptorProtoBoot() for details.\n *\n * @private\n */\nexport function boot(boot) {\n    const root = bootFileDescriptorProto(boot);\n    root.messageType.forEach(restoreJsonNames);\n    const reg = createFileRegistry(root, () => undefined);\n    // non-null assertion because we just created the registry from the file we look up\n    return reg.getFile(root.name);\n}\n/**\n * Creates the message google.protobuf.FileDescriptorProto from an object literal.\n *\n * See createFileDescriptorProtoBoot() for details.\n *\n * @private\n */\nexport function bootFileDescriptorProto(init) {\n    const proto = Object.create({\n        syntax: \"\",\n        edition: 0,\n    });\n    return Object.assign(proto, Object.assign(Object.assign({ $typeName: \"google.protobuf.FileDescriptorProto\", dependency: [], publicDependency: [], weakDependency: [], service: [], extension: [] }, init), { messageType: init.messageType.map(bootDescriptorProto), enumType: init.enumType.map(bootEnumDescriptorProto) }));\n}\nfunction bootDescriptorProto(init) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    return {\n        $typeName: \"google.protobuf.DescriptorProto\",\n        name: init.name,\n        field: (_b = (_a = init.field) === null || _a === void 0 ? void 0 : _a.map(bootFieldDescriptorProto)) !== null && _b !== void 0 ? _b : [],\n        extension: [],\n        nestedType: (_d = (_c = init.nestedType) === null || _c === void 0 ? void 0 : _c.map(bootDescriptorProto)) !== null && _d !== void 0 ? _d : [],\n        enumType: (_f = (_e = init.enumType) === null || _e === void 0 ? void 0 : _e.map(bootEnumDescriptorProto)) !== null && _f !== void 0 ? _f : [],\n        extensionRange: (_h = (_g = init.extensionRange) === null || _g === void 0 ? void 0 : _g.map((e) => (Object.assign({ $typeName: \"google.protobuf.DescriptorProto.ExtensionRange\" }, e)))) !== null && _h !== void 0 ? _h : [],\n        oneofDecl: [],\n        reservedRange: [],\n        reservedName: [],\n    };\n}\nfunction bootFieldDescriptorProto(init) {\n    const proto = Object.create({\n        label: 1,\n        typeName: \"\",\n        extendee: \"\",\n        defaultValue: \"\",\n        oneofIndex: 0,\n        jsonName: \"\",\n        proto3Optional: false,\n    });\n    return Object.assign(proto, Object.assign(Object.assign({ $typeName: \"google.protobuf.FieldDescriptorProto\" }, init), { options: init.options ? bootFieldOptions(init.options) : undefined }));\n}\nfunction bootFieldOptions(init) {\n    var _a, _b, _c;\n    const proto = Object.create({\n        ctype: 0,\n        packed: false,\n        jstype: 0,\n        lazy: false,\n        unverifiedLazy: false,\n        deprecated: false,\n        weak: false,\n        debugRedact: false,\n        retention: 0,\n    });\n    return Object.assign(proto, Object.assign(Object.assign({ $typeName: \"google.protobuf.FieldOptions\" }, init), { targets: (_a = init.targets) !== null && _a !== void 0 ? _a : [], editionDefaults: (_c = (_b = init.editionDefaults) === null || _b === void 0 ? void 0 : _b.map((e) => (Object.assign({ $typeName: \"google.protobuf.FieldOptions.EditionDefault\" }, e)))) !== null && _c !== void 0 ? _c : [], uninterpretedOption: [] }));\n}\nfunction bootEnumDescriptorProto(init) {\n    return {\n        $typeName: \"google.protobuf.EnumDescriptorProto\",\n        name: init.name,\n        reservedName: [],\n        reservedRange: [],\n        value: init.value.map((e) => (Object.assign({ $typeName: \"google.protobuf.EnumValueDescriptorProto\" }, e))),\n    };\n}\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Hydrate a message descriptor.\n *\n * @private\n */\nexport function messageDesc(file, path, ...paths) {\n    return paths.reduce((acc, cur) => acc.nestedMessages[cur], file.messages[path]);\n}\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Hydrate an enum descriptor.\n *\n * @private\n */\nexport function enumDesc(file, path, ...paths) {\n    if (paths.length == 0) {\n        return file.enums[path];\n    }\n    const e = paths.pop(); // we checked length above\n    return paths.reduce((acc, cur) => acc.nestedMessages[cur], file.messages[path]).nestedEnums[e];\n}\n/**\n * Construct a TypeScript enum object at runtime from a descriptor.\n */\nexport function tsEnum(desc) {\n    const enumObject = {};\n    for (const value of desc.values) {\n        enumObject[value.localName] = value.number;\n        enumObject[value.number] = value.localName;\n    }\n    return enumObject;\n}\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { boot } from \"../../../../codegenv1/boot.js\";\nimport { messageDesc } from \"../../../../codegenv1/message.js\";\nimport { enumDesc } from \"../../../../codegenv1/enum.js\";\n/**\n * Describes the file google/protobuf/descriptor.proto.\n */\nexport const file_google_protobuf_descriptor = /*@__PURE__*/ boot({ \"name\": \"google/protobuf/descriptor.proto\", \"package\": \"google.protobuf\", \"messageType\": [{ \"name\": \"FileDescriptorSet\", \"field\": [{ \"name\": \"file\", \"number\": 1, \"type\": 11, \"label\": 3, \"typeName\": \".google.protobuf.FileDescriptorProto\" }] }, { \"name\": \"FileDescriptorProto\", \"field\": [{ \"name\": \"name\", \"number\": 1, \"type\": 9, \"label\": 1 }, { \"name\": \"package\", \"number\": 2, \"type\": 9, \"label\": 1 }, { \"name\": \"dependency\", \"number\": 3, \"type\": 9, \"label\": 3 }, { \"name\": \"public_dependency\", \"number\": 10, \"type\": 5, \"label\": 3 }, { \"name\": \"weak_dependency\", \"number\": 11, \"type\": 5, \"label\": 3 }, { \"name\": \"message_type\", \"number\": 4, \"type\": 11, \"label\": 3, \"typeName\": \".google.protobuf.DescriptorProto\" }, { \"name\": \"enum_type\", \"number\": 5, \"type\": 11, \"label\": 3, \"typeName\": \".google.protobuf.EnumDescriptorProto\" }, { \"name\": \"service\", \"number\": 6, \"type\": 11, \"label\": 3, \"typeName\": \".google.protobuf.ServiceDescriptorProto\" }, { \"name\": \"extension\", \"number\": 7, \"type\": 11, \"label\": 3, \"typeName\": \".google.protobuf.FieldDescriptorProto\" }, { \"name\": \"options\", \"number\": 8, \"type\": 11, \"label\": 1, \"typeName\": \".google.protobuf.FileOptions\" }, { \"name\": \"source_code_info\", \"number\": 9, \"type\": 11, \"label\": 1, \"typeName\": \".google.protobuf.SourceCodeInfo\" }, { \"name\": \"syntax\", \"number\": 12, \"type\": 9, \"label\": 1 }, { \"name\": \"edition\", \"number\": 14, \"type\": 14, \"label\": 1, \"typeName\": \".google.protobuf.Edition\" }] }, { \"name\": \"DescriptorProto\", \"field\": [{ \"name\": \"name\", \"number\": 1, \"type\": 9, \"label\": 1 }, { \"name\": \"field\", \"number\": 2, \"type\": 11, \"label\": 3, \"typeName\": \".google.protobuf.FieldDescriptorProto\" }, { \"name\": \"extension\", \"number\": 6, \"type\": 11, \"label\": 3, \"typeName\": \".google.protobuf.FieldDescriptorProto\" }, { \"name\": \"nested_type\", \"number\": 3, \"type\": 11, \"label\": 3, \"typeName\": \".google.protobuf.DescriptorProto\" }, { \"name\": \"enum_type\", \"number\": 4, \"type\": 11, \"label\": 3, \"typeName\": \".google.protobuf.EnumDescriptorProto\" }, { \"name\": \"extension_range\", \"number\": 5, \"type\": 11, \"label\": 3, \"typeName\": \".google.protobuf.DescriptorProto.ExtensionRange\" }, { \"name\": \"oneof_decl\", \"number\": 8, \"type\": 11, \"label\": 3, \"typeName\": \".google.protobuf.OneofDescriptorProto\" }, { \"name\": \"options\", \"number\": 7, \"type\": 11, \"label\": 1, \"typeName\": \".google.protobuf.MessageOptions\" }, { \"name\": \"reserved_range\", \"number\": 9, \"type\": 11, \"label\": 3, \"typeName\": \".google.protobuf.DescriptorProto.ReservedRange\" }, { \"name\": \"reserved_name\", \"number\": 10, \"type\": 9, \"label\": 3 }], \"nestedType\": [{ \"name\": \"ExtensionRange\", \"field\": [{ \"name\": \"start\", \"number\": 1, \"type\": 5, \"label\": 1 }, { \"name\": \"end\", \"number\": 2, \"type\": 5, \"label\": 1 }, { \"name\": \"options\", \"number\": 3, \"type\": 11, \"label\": 1, \"typeName\": \".google.protobuf.ExtensionRangeOptions\" }] }, { \"name\": \"ReservedRange\", \"field\": [{ \"name\": \"start\", \"number\": 1, \"type\": 5, \"label\": 1 }, { \"name\": \"end\", \"number\": 2, \"type\": 5, \"label\": 1 }] }] }, { \"name\": \"ExtensionRangeOptions\", \"field\": [{ \"name\": \"uninterpreted_option\", \"number\": 999, \"type\": 11, \"label\": 3, \"typeName\": \".google.protobuf.UninterpretedOption\" }, { \"name\": \"declaration\", \"number\": 2, \"type\": 11, \"label\": 3, \"typeName\": \".google.protobuf.ExtensionRangeOptions.Declaration\", \"options\": { \"retention\": 2 } }, { \"name\": \"features\", \"number\": 50, \"type\": 11, \"label\": 1, \"typeName\": \".google.protobuf.FeatureSet\" }, { \"name\": \"verification\", \"number\": 3, \"type\": 14, \"label\": 1, \"typeName\": \".google.protobuf.ExtensionRangeOptions.VerificationState\", \"defaultValue\": \"UNVERIFIED\", \"options\": { \"retention\": 2 } }], \"nestedType\": [{ \"name\": \"Declaration\", \"field\": [{ \"name\": \"number\", \"number\": 1, \"type\": 5, \"label\": 1 }, { \"name\": \"full_name\", \"number\": 2, \"type\": 9, \"label\": 1 }, { \"name\": \"type\", \"number\": 3, \"type\": 9, \"label\": 1 }, { \"name\": \"reserved\", \"number\": 5, \"type\": 8, \"label\": 1 }, { \"name\": \"repeated\", \"number\": 6, \"type\": 8, \"label\": 1 }] }], \"enumType\": [{ \"name\": \"VerificationState\", \"value\": [{ \"name\": \"DECLARATION\", \"number\": 0 }, { \"name\": \"UNVERIFIED\", \"number\": 1 }] }], \"extensionRange\": [{ \"start\": 1000, \"end\": 536870912 }] }, { \"name\": \"FieldDescriptorProto\", \"field\": [{ \"name\": \"name\", \"number\": 1, \"type\": 9, \"label\": 1 }, { \"name\": \"number\", \"number\": 3, \"type\": 5, \"label\": 1 }, { \"name\": \"label\", \"number\": 4, \"type\": 14, \"label\": 1, \"typeName\": \".google.protobuf.FieldDescriptorProto.Label\" }, { \"name\": \"type\", \"number\": 5, \"type\": 14, \"label\": 1, \"typeName\": \".google.protobuf.FieldDescriptorProto.Type\" }, { \"name\": \"type_name\", \"number\": 6, \"type\": 9, \"label\": 1 }, { \"name\": \"extendee\", \"number\": 2, \"type\": 9, \"label\": 1 }, { \"name\": \"default_value\", \"number\": 7, \"type\": 9, \"label\": 1 }, { \"name\": \"oneof_index\", \"number\": 9, \"type\": 5, \"label\": 1 }, { \"name\": \"json_name\", \"number\": 10, \"type\": 9, \"label\": 1 }, { \"name\": \"options\", \"number\": 8, \"type\": 11, \"label\": 1, \"typeName\": \".google.protobuf.FieldOptions\" }, { \"name\": \"proto3_optional\", \"number\": 17, \"type\": 8, \"label\": 1 }], \"enumType\": [{ \"name\": \"Type\", \"value\": [{ \"name\": \"TYPE_DOUBLE\", \"number\": 1 }, { \"name\": \"TYPE_FLOAT\", \"number\": 2 }, { \"name\": \"TYPE_INT64\", \"number\": 3 }, { \"name\": \"TYPE_UINT64\", \"number\": 4 }, { \"name\": \"TYPE_INT32\", \"number\": 5 }, { \"name\": \"TYPE_FIXED64\", \"number\": 6 }, { \"name\": \"TYPE_FIXED32\", \"number\": 7 }, { \"name\": \"TYPE_BOOL\", \"number\": 8 }, { \"name\": \"TYPE_STRING\", \"number\": 9 }, { \"name\": \"TYPE_GROUP\", \"number\": 10 }, { \"name\": \"TYPE_MESSAGE\", \"number\": 11 }, { \"name\": \"TYPE_BYTES\", \"number\": 12 }, { \"name\": \"TYPE_UINT32\", \"number\": 13 }, { \"name\": \"TYPE_ENUM\", \"number\": 14 }, { \"name\": \"TYPE_SFIXED32\", \"number\": 15 }, { \"name\": \"TYPE_SFIXED64\", \"number\": 16 }, { \"name\": \"TYPE_SINT32\", \"number\": 17 }, { \"name\": \"TYPE_SINT64\", \"number\": 18 }] }, { \"name\": \"Label\", \"value\": [{ \"name\": \"LABEL_OPTIONAL\", \"number\": 1 }, { \"name\": \"LABEL_REPEATED\", \"number\": 3 }, { \"name\": \"LABEL_REQUIRED\", \"number\": 2 }] }] }, { \"name\": \"OneofDescriptorProto\", \"field\": [{ \"name\": \"name\", \"number\": 1, \"type\": 9, \"label\": 1 }, { \"name\": \"options\", \"number\": 2, \"type\": 11, \"label\": 1, \"typeName\": \".google.protobuf.OneofOptions\" }] }, { \"name\": \"EnumDescriptorProto\", \"field\": [{ \"name\": \"name\", \"number\": 1, \"type\": 9, \"label\": 1 }, { \"name\": \"value\", \"number\": 2, \"type\": 11, \"label\": 3, \"typeName\": \".google.protobuf.EnumValueDescriptorProto\" }, { \"name\": \"options\", \"number\": 3, \"type\": 11, \"label\": 1, \"typeName\": \".google.protobuf.EnumOptions\" }, { \"name\": \"reserved_range\", \"number\": 4, \"type\": 11, \"label\": 3, \"typeName\": \".google.protobuf.EnumDescriptorProto.EnumReservedRange\" }, { \"name\": \"reserved_name\", \"number\": 5, \"type\": 9, \"label\": 3 }], \"nestedType\": [{ \"name\": \"EnumReservedRange\", \"field\": [{ \"name\": \"start\", \"number\": 1, \"type\": 5, \"label\": 1 }, { \"name\": \"end\", \"number\": 2, \"type\": 5, \"label\": 1 }] }] }, { \"name\": \"EnumValueDescriptorProto\", \"field\": [{ \"name\": \"name\", \"number\": 1, \"type\": 9, \"label\": 1 }, { \"name\": \"number\", \"number\": 2, \"type\": 5, \"label\": 1 }, { \"name\": \"options\", \"number\": 3, \"type\": 11, \"label\": 1, \"typeName\": \".google.protobuf.EnumValueOptions\" }] }, { \"name\": \"ServiceDescriptorProto\", \"field\": [{ \"name\": \"name\", \"number\": 1, \"type\": 9, \"label\": 1 }, { \"name\": \"method\", \"number\": 2, \"type\": 11, \"label\": 3, \"typeName\": \".google.protobuf.MethodDescriptorProto\" }, { \"name\": \"options\", \"number\": 3, \"type\": 11, \"label\": 1, \"typeName\": \".google.protobuf.ServiceOptions\" }] }, { \"name\": \"MethodDescriptorProto\", \"field\": [{ \"name\": \"name\", \"number\": 1, \"type\": 9, \"label\": 1 }, { \"name\": \"input_type\", \"number\": 2, \"type\": 9, \"label\": 1 }, { \"name\": \"output_type\", \"number\": 3, \"type\": 9, \"label\": 1 }, { \"name\": \"options\", \"number\": 4, \"type\": 11, \"label\": 1, \"typeName\": \".google.protobuf.MethodOptions\" }, { \"name\": \"client_streaming\", \"number\": 5, \"type\": 8, \"label\": 1, \"defaultValue\": \"false\" }, { \"name\": \"server_streaming\", \"number\": 6, \"type\": 8, \"label\": 1, \"defaultValue\": \"false\" }] }, { \"name\": \"FileOptions\", \"field\": [{ \"name\": \"java_package\", \"number\": 1, \"type\": 9, \"label\": 1 }, { \"name\": \"java_outer_classname\", \"number\": 8, \"type\": 9, \"label\": 1 }, { \"name\": \"java_multiple_files\", \"number\": 10, \"type\": 8, \"label\": 1, \"defaultValue\": \"false\" }, { \"name\": \"java_generate_equals_and_hash\", \"number\": 20, \"type\": 8, \"label\": 1, \"options\": { \"deprecated\": true } }, { \"name\": \"java_string_check_utf8\", \"number\": 27, \"type\": 8, \"label\": 1, \"defaultValue\": \"false\" }, { \"name\": \"optimize_for\", \"number\": 9, \"type\": 14, \"label\": 1, \"typeName\": \".google.protobuf.FileOptions.OptimizeMode\", \"defaultValue\": \"SPEED\" }, { \"name\": \"go_package\", \"number\": 11, \"type\": 9, \"label\": 1 }, { \"name\": \"cc_generic_services\", \"number\": 16, \"type\": 8, \"label\": 1, \"defaultValue\": \"false\" }, { \"name\": \"java_generic_services\", \"number\": 17, \"type\": 8, \"label\": 1, \"defaultValue\": \"false\" }, { \"name\": \"py_generic_services\", \"number\": 18, \"type\": 8, \"label\": 1, \"defaultValue\": \"false\" }, { \"name\": \"deprecated\", \"number\": 23, \"type\": 8, \"label\": 1, \"defaultValue\": \"false\" }, { \"name\": \"cc_enable_arenas\", \"number\": 31, \"type\": 8, \"label\": 1, \"defaultValue\": \"true\" }, { \"name\": \"objc_class_prefix\", \"number\": 36, \"type\": 9, \"label\": 1 }, { \"name\": \"csharp_namespace\", \"number\": 37, \"type\": 9, \"label\": 1 }, { \"name\": \"swift_prefix\", \"number\": 39, \"type\": 9, \"label\": 1 }, { \"name\": \"php_class_prefix\", \"number\": 40, \"type\": 9, \"label\": 1 }, { \"name\": \"php_namespace\", \"number\": 41, \"type\": 9, \"label\": 1 }, { \"name\": \"php_metadata_namespace\", \"number\": 44, \"type\": 9, \"label\": 1 }, { \"name\": \"ruby_package\", \"number\": 45, \"type\": 9, \"label\": 1 }, { \"name\": \"features\", \"number\": 50, \"type\": 11, \"label\": 1, \"typeName\": \".google.protobuf.FeatureSet\" }, { \"name\": \"uninterpreted_option\", \"number\": 999, \"type\": 11, \"label\": 3, \"typeName\": \".google.protobuf.UninterpretedOption\" }], \"enumType\": [{ \"name\": \"OptimizeMode\", \"value\": [{ \"name\": \"SPEED\", \"number\": 1 }, { \"name\": \"CODE_SIZE\", \"number\": 2 }, { \"name\": \"LITE_RUNTIME\", \"number\": 3 }] }], \"extensionRange\": [{ \"start\": 1000, \"end\": 536870912 }] }, { \"name\": \"MessageOptions\", \"field\": [{ \"name\": \"message_set_wire_format\", \"number\": 1, \"type\": 8, \"label\": 1, \"defaultValue\": \"false\" }, { \"name\": \"no_standard_descriptor_accessor\", \"number\": 2, \"type\": 8, \"label\": 1, \"defaultValue\": \"false\" }, { \"name\": \"deprecated\", \"number\": 3, \"type\": 8, \"label\": 1, \"defaultValue\": \"false\" }, { \"name\": \"map_entry\", \"number\": 7, \"type\": 8, \"label\": 1 }, { \"name\": \"deprecated_legacy_json_field_conflicts\", \"number\": 11, \"type\": 8, \"label\": 1, \"options\": { \"deprecated\": true } }, { \"name\": \"features\", \"number\": 12, \"type\": 11, \"label\": 1, \"typeName\": \".google.protobuf.FeatureSet\" }, { \"name\": \"uninterpreted_option\", \"number\": 999, \"type\": 11, \"label\": 3, \"typeName\": \".google.protobuf.UninterpretedOption\" }], \"extensionRange\": [{ \"start\": 1000, \"end\": 536870912 }] }, { \"name\": \"FieldOptions\", \"field\": [{ \"name\": \"ctype\", \"number\": 1, \"type\": 14, \"label\": 1, \"typeName\": \".google.protobuf.FieldOptions.CType\", \"defaultValue\": \"STRING\" }, { \"name\": \"packed\", \"number\": 2, \"type\": 8, \"label\": 1 }, { \"name\": \"jstype\", \"number\": 6, \"type\": 14, \"label\": 1, \"typeName\": \".google.protobuf.FieldOptions.JSType\", \"defaultValue\": \"JS_NORMAL\" }, { \"name\": \"lazy\", \"number\": 5, \"type\": 8, \"label\": 1, \"defaultValue\": \"false\" }, { \"name\": \"unverified_lazy\", \"number\": 15, \"type\": 8, \"label\": 1, \"defaultValue\": \"false\" }, { \"name\": \"deprecated\", \"number\": 3, \"type\": 8, \"label\": 1, \"defaultValue\": \"false\" }, { \"name\": \"weak\", \"number\": 10, \"type\": 8, \"label\": 1, \"defaultValue\": \"false\" }, { \"name\": \"debug_redact\", \"number\": 16, \"type\": 8, \"label\": 1, \"defaultValue\": \"false\" }, { \"name\": \"retention\", \"number\": 17, \"type\": 14, \"label\": 1, \"typeName\": \".google.protobuf.FieldOptions.OptionRetention\" }, { \"name\": \"targets\", \"number\": 19, \"type\": 14, \"label\": 3, \"typeName\": \".google.protobuf.FieldOptions.OptionTargetType\" }, { \"name\": \"edition_defaults\", \"number\": 20, \"type\": 11, \"label\": 3, \"typeName\": \".google.protobuf.FieldOptions.EditionDefault\" }, { \"name\": \"features\", \"number\": 21, \"type\": 11, \"label\": 1, \"typeName\": \".google.protobuf.FeatureSet\" }, { \"name\": \"feature_support\", \"number\": 22, \"type\": 11, \"label\": 1, \"typeName\": \".google.protobuf.FieldOptions.FeatureSupport\" }, { \"name\": \"uninterpreted_option\", \"number\": 999, \"type\": 11, \"label\": 3, \"typeName\": \".google.protobuf.UninterpretedOption\" }], \"nestedType\": [{ \"name\": \"EditionDefault\", \"field\": [{ \"name\": \"edition\", \"number\": 3, \"type\": 14, \"label\": 1, \"typeName\": \".google.protobuf.Edition\" }, { \"name\": \"value\", \"number\": 2, \"type\": 9, \"label\": 1 }] }, { \"name\": \"FeatureSupport\", \"field\": [{ \"name\": \"edition_introduced\", \"number\": 1, \"type\": 14, \"label\": 1, \"typeName\": \".google.protobuf.Edition\" }, { \"name\": \"edition_deprecated\", \"number\": 2, \"type\": 14, \"label\": 1, \"typeName\": \".google.protobuf.Edition\" }, { \"name\": \"deprecation_warning\", \"number\": 3, \"type\": 9, \"label\": 1 }, { \"name\": \"edition_removed\", \"number\": 4, \"type\": 14, \"label\": 1, \"typeName\": \".google.protobuf.Edition\" }] }], \"enumType\": [{ \"name\": \"CType\", \"value\": [{ \"name\": \"STRING\", \"number\": 0 }, { \"name\": \"CORD\", \"number\": 1 }, { \"name\": \"STRING_PIECE\", \"number\": 2 }] }, { \"name\": \"JSType\", \"value\": [{ \"name\": \"JS_NORMAL\", \"number\": 0 }, { \"name\": \"JS_STRING\", \"number\": 1 }, { \"name\": \"JS_NUMBER\", \"number\": 2 }] }, { \"name\": \"OptionRetention\", \"value\": [{ \"name\": \"RETENTION_UNKNOWN\", \"number\": 0 }, { \"name\": \"RETENTION_RUNTIME\", \"number\": 1 }, { \"name\": \"RETENTION_SOURCE\", \"number\": 2 }] }, { \"name\": \"OptionTargetType\", \"value\": [{ \"name\": \"TARGET_TYPE_UNKNOWN\", \"number\": 0 }, { \"name\": \"TARGET_TYPE_FILE\", \"number\": 1 }, { \"name\": \"TARGET_TYPE_EXTENSION_RANGE\", \"number\": 2 }, { \"name\": \"TARGET_TYPE_MESSAGE\", \"number\": 3 }, { \"name\": \"TARGET_TYPE_FIELD\", \"number\": 4 }, { \"name\": \"TARGET_TYPE_ONEOF\", \"number\": 5 }, { \"name\": \"TARGET_TYPE_ENUM\", \"number\": 6 }, { \"name\": \"TARGET_TYPE_ENUM_ENTRY\", \"number\": 7 }, { \"name\": \"TARGET_TYPE_SERVICE\", \"number\": 8 }, { \"name\": \"TARGET_TYPE_METHOD\", \"number\": 9 }] }], \"extensionRange\": [{ \"start\": 1000, \"end\": 536870912 }] }, { \"name\": \"OneofOptions\", \"field\": [{ \"name\": \"features\", \"number\": 1, \"type\": 11, \"label\": 1, \"typeName\": \".google.protobuf.FeatureSet\" }, { \"name\": \"uninterpreted_option\", \"number\": 999, \"type\": 11, \"label\": 3, \"typeName\": \".google.protobuf.UninterpretedOption\" }], \"extensionRange\": [{ \"start\": 1000, \"end\": 536870912 }] }, { \"name\": \"EnumOptions\", \"field\": [{ \"name\": \"allow_alias\", \"number\": 2, \"type\": 8, \"label\": 1 }, { \"name\": \"deprecated\", \"number\": 3, \"type\": 8, \"label\": 1, \"defaultValue\": \"false\" }, { \"name\": \"deprecated_legacy_json_field_conflicts\", \"number\": 6, \"type\": 8, \"label\": 1, \"options\": { \"deprecated\": true } }, { \"name\": \"features\", \"number\": 7, \"type\": 11, \"label\": 1, \"typeName\": \".google.protobuf.FeatureSet\" }, { \"name\": \"uninterpreted_option\", \"number\": 999, \"type\": 11, \"label\": 3, \"typeName\": \".google.protobuf.UninterpretedOption\" }], \"extensionRange\": [{ \"start\": 1000, \"end\": 536870912 }] }, { \"name\": \"EnumValueOptions\", \"field\": [{ \"name\": \"deprecated\", \"number\": 1, \"type\": 8, \"label\": 1, \"defaultValue\": \"false\" }, { \"name\": \"features\", \"number\": 2, \"type\": 11, \"label\": 1, \"typeName\": \".google.protobuf.FeatureSet\" }, { \"name\": \"debug_redact\", \"number\": 3, \"type\": 8, \"label\": 1, \"defaultValue\": \"false\" }, { \"name\": \"feature_support\", \"number\": 4, \"type\": 11, \"label\": 1, \"typeName\": \".google.protobuf.FieldOptions.FeatureSupport\" }, { \"name\": \"uninterpreted_option\", \"number\": 999, \"type\": 11, \"label\": 3, \"typeName\": \".google.protobuf.UninterpretedOption\" }], \"extensionRange\": [{ \"start\": 1000, \"end\": 536870912 }] }, { \"name\": \"ServiceOptions\", \"field\": [{ \"name\": \"features\", \"number\": 34, \"type\": 11, \"label\": 1, \"typeName\": \".google.protobuf.FeatureSet\" }, { \"name\": \"deprecated\", \"number\": 33, \"type\": 8, \"label\": 1, \"defaultValue\": \"false\" }, { \"name\": \"uninterpreted_option\", \"number\": 999, \"type\": 11, \"label\": 3, \"typeName\": \".google.protobuf.UninterpretedOption\" }], \"extensionRange\": [{ \"start\": 1000, \"end\": 536870912 }] }, { \"name\": \"MethodOptions\", \"field\": [{ \"name\": \"deprecated\", \"number\": 33, \"type\": 8, \"label\": 1, \"defaultValue\": \"false\" }, { \"name\": \"idempotency_level\", \"number\": 34, \"type\": 14, \"label\": 1, \"typeName\": \".google.protobuf.MethodOptions.IdempotencyLevel\", \"defaultValue\": \"IDEMPOTENCY_UNKNOWN\" }, { \"name\": \"features\", \"number\": 35, \"type\": 11, \"label\": 1, \"typeName\": \".google.protobuf.FeatureSet\" }, { \"name\": \"uninterpreted_option\", \"number\": 999, \"type\": 11, \"label\": 3, \"typeName\": \".google.protobuf.UninterpretedOption\" }], \"enumType\": [{ \"name\": \"IdempotencyLevel\", \"value\": [{ \"name\": \"IDEMPOTENCY_UNKNOWN\", \"number\": 0 }, { \"name\": \"NO_SIDE_EFFECTS\", \"number\": 1 }, { \"name\": \"IDEMPOTENT\", \"number\": 2 }] }], \"extensionRange\": [{ \"start\": 1000, \"end\": 536870912 }] }, { \"name\": \"UninterpretedOption\", \"field\": [{ \"name\": \"name\", \"number\": 2, \"type\": 11, \"label\": 3, \"typeName\": \".google.protobuf.UninterpretedOption.NamePart\" }, { \"name\": \"identifier_value\", \"number\": 3, \"type\": 9, \"label\": 1 }, { \"name\": \"positive_int_value\", \"number\": 4, \"type\": 4, \"label\": 1 }, { \"name\": \"negative_int_value\", \"number\": 5, \"type\": 3, \"label\": 1 }, { \"name\": \"double_value\", \"number\": 6, \"type\": 1, \"label\": 1 }, { \"name\": \"string_value\", \"number\": 7, \"type\": 12, \"label\": 1 }, { \"name\": \"aggregate_value\", \"number\": 8, \"type\": 9, \"label\": 1 }], \"nestedType\": [{ \"name\": \"NamePart\", \"field\": [{ \"name\": \"name_part\", \"number\": 1, \"type\": 9, \"label\": 2 }, { \"name\": \"is_extension\", \"number\": 2, \"type\": 8, \"label\": 2 }] }] }, { \"name\": \"FeatureSet\", \"field\": [{ \"name\": \"field_presence\", \"number\": 1, \"type\": 14, \"label\": 1, \"typeName\": \".google.protobuf.FeatureSet.FieldPresence\", \"options\": { \"retention\": 1, \"targets\": [4, 1], \"editionDefaults\": [{ \"value\": \"EXPLICIT\", \"edition\": 900 }, { \"value\": \"IMPLICIT\", \"edition\": 999 }, { \"value\": \"EXPLICIT\", \"edition\": 1000 }] } }, { \"name\": \"enum_type\", \"number\": 2, \"type\": 14, \"label\": 1, \"typeName\": \".google.protobuf.FeatureSet.EnumType\", \"options\": { \"retention\": 1, \"targets\": [6, 1], \"editionDefaults\": [{ \"value\": \"CLOSED\", \"edition\": 900 }, { \"value\": \"OPEN\", \"edition\": 999 }] } }, { \"name\": \"repeated_field_encoding\", \"number\": 3, \"type\": 14, \"label\": 1, \"typeName\": \".google.protobuf.FeatureSet.RepeatedFieldEncoding\", \"options\": { \"retention\": 1, \"targets\": [4, 1], \"editionDefaults\": [{ \"value\": \"EXPANDED\", \"edition\": 900 }, { \"value\": \"PACKED\", \"edition\": 999 }] } }, { \"name\": \"utf8_validation\", \"number\": 4, \"type\": 14, \"label\": 1, \"typeName\": \".google.protobuf.FeatureSet.Utf8Validation\", \"options\": { \"retention\": 1, \"targets\": [4, 1], \"editionDefaults\": [{ \"value\": \"NONE\", \"edition\": 900 }, { \"value\": \"VERIFY\", \"edition\": 999 }] } }, { \"name\": \"message_encoding\", \"number\": 5, \"type\": 14, \"label\": 1, \"typeName\": \".google.protobuf.FeatureSet.MessageEncoding\", \"options\": { \"retention\": 1, \"targets\": [4, 1], \"editionDefaults\": [{ \"value\": \"LENGTH_PREFIXED\", \"edition\": 900 }] } }, { \"name\": \"json_format\", \"number\": 6, \"type\": 14, \"label\": 1, \"typeName\": \".google.protobuf.FeatureSet.JsonFormat\", \"options\": { \"retention\": 1, \"targets\": [3, 6, 1], \"editionDefaults\": [{ \"value\": \"LEGACY_BEST_EFFORT\", \"edition\": 900 }, { \"value\": \"ALLOW\", \"edition\": 999 }] } }], \"enumType\": [{ \"name\": \"FieldPresence\", \"value\": [{ \"name\": \"FIELD_PRESENCE_UNKNOWN\", \"number\": 0 }, { \"name\": \"EXPLICIT\", \"number\": 1 }, { \"name\": \"IMPLICIT\", \"number\": 2 }, { \"name\": \"LEGACY_REQUIRED\", \"number\": 3 }] }, { \"name\": \"EnumType\", \"value\": [{ \"name\": \"ENUM_TYPE_UNKNOWN\", \"number\": 0 }, { \"name\": \"OPEN\", \"number\": 1 }, { \"name\": \"CLOSED\", \"number\": 2 }] }, { \"name\": \"RepeatedFieldEncoding\", \"value\": [{ \"name\": \"REPEATED_FIELD_ENCODING_UNKNOWN\", \"number\": 0 }, { \"name\": \"PACKED\", \"number\": 1 }, { \"name\": \"EXPANDED\", \"number\": 2 }] }, { \"name\": \"Utf8Validation\", \"value\": [{ \"name\": \"UTF8_VALIDATION_UNKNOWN\", \"number\": 0 }, { \"name\": \"VERIFY\", \"number\": 2 }, { \"name\": \"NONE\", \"number\": 3 }] }, { \"name\": \"MessageEncoding\", \"value\": [{ \"name\": \"MESSAGE_ENCODING_UNKNOWN\", \"number\": 0 }, { \"name\": \"LENGTH_PREFIXED\", \"number\": 1 }, { \"name\": \"DELIMITED\", \"number\": 2 }] }, { \"name\": \"JsonFormat\", \"value\": [{ \"name\": \"JSON_FORMAT_UNKNOWN\", \"number\": 0 }, { \"name\": \"ALLOW\", \"number\": 1 }, { \"name\": \"LEGACY_BEST_EFFORT\", \"number\": 2 }] }], \"extensionRange\": [{ \"start\": 1000, \"end\": 9995 }, { \"start\": 9995, \"end\": 10000 }, { \"start\": 10000, \"end\": 10001 }] }, { \"name\": \"FeatureSetDefaults\", \"field\": [{ \"name\": \"defaults\", \"number\": 1, \"type\": 11, \"label\": 3, \"typeName\": \".google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault\" }, { \"name\": \"minimum_edition\", \"number\": 4, \"type\": 14, \"label\": 1, \"typeName\": \".google.protobuf.Edition\" }, { \"name\": \"maximum_edition\", \"number\": 5, \"type\": 14, \"label\": 1, \"typeName\": \".google.protobuf.Edition\" }], \"nestedType\": [{ \"name\": \"FeatureSetEditionDefault\", \"field\": [{ \"name\": \"edition\", \"number\": 3, \"type\": 14, \"label\": 1, \"typeName\": \".google.protobuf.Edition\" }, { \"name\": \"overridable_features\", \"number\": 4, \"type\": 11, \"label\": 1, \"typeName\": \".google.protobuf.FeatureSet\" }, { \"name\": \"fixed_features\", \"number\": 5, \"type\": 11, \"label\": 1, \"typeName\": \".google.protobuf.FeatureSet\" }] }] }, { \"name\": \"SourceCodeInfo\", \"field\": [{ \"name\": \"location\", \"number\": 1, \"type\": 11, \"label\": 3, \"typeName\": \".google.protobuf.SourceCodeInfo.Location\" }], \"nestedType\": [{ \"name\": \"Location\", \"field\": [{ \"name\": \"path\", \"number\": 1, \"type\": 5, \"label\": 3, \"options\": { \"packed\": true } }, { \"name\": \"span\", \"number\": 2, \"type\": 5, \"label\": 3, \"options\": { \"packed\": true } }, { \"name\": \"leading_comments\", \"number\": 3, \"type\": 9, \"label\": 1 }, { \"name\": \"trailing_comments\", \"number\": 4, \"type\": 9, \"label\": 1 }, { \"name\": \"leading_detached_comments\", \"number\": 6, \"type\": 9, \"label\": 3 }] }] }, { \"name\": \"GeneratedCodeInfo\", \"field\": [{ \"name\": \"annotation\", \"number\": 1, \"type\": 11, \"label\": 3, \"typeName\": \".google.protobuf.GeneratedCodeInfo.Annotation\" }], \"nestedType\": [{ \"name\": \"Annotation\", \"field\": [{ \"name\": \"path\", \"number\": 1, \"type\": 5, \"label\": 3, \"options\": { \"packed\": true } }, { \"name\": \"source_file\", \"number\": 2, \"type\": 9, \"label\": 1 }, { \"name\": \"begin\", \"number\": 3, \"type\": 5, \"label\": 1 }, { \"name\": \"end\", \"number\": 4, \"type\": 5, \"label\": 1 }, { \"name\": \"semantic\", \"number\": 5, \"type\": 14, \"label\": 1, \"typeName\": \".google.protobuf.GeneratedCodeInfo.Annotation.Semantic\" }], \"enumType\": [{ \"name\": \"Semantic\", \"value\": [{ \"name\": \"NONE\", \"number\": 0 }, { \"name\": \"SET\", \"number\": 1 }, { \"name\": \"ALIAS\", \"number\": 2 }] }] }] }], \"enumType\": [{ \"name\": \"Edition\", \"value\": [{ \"name\": \"EDITION_UNKNOWN\", \"number\": 0 }, { \"name\": \"EDITION_LEGACY\", \"number\": 900 }, { \"name\": \"EDITION_PROTO2\", \"number\": 998 }, { \"name\": \"EDITION_PROTO3\", \"number\": 999 }, { \"name\": \"EDITION_2023\", \"number\": 1000 }, { \"name\": \"EDITION_2024\", \"number\": 1001 }, { \"name\": \"EDITION_1_TEST_ONLY\", \"number\": 1 }, { \"name\": \"EDITION_2_TEST_ONLY\", \"number\": 2 }, { \"name\": \"EDITION_99997_TEST_ONLY\", \"number\": 99997 }, { \"name\": \"EDITION_99998_TEST_ONLY\", \"number\": 99998 }, { \"name\": \"EDITION_99999_TEST_ONLY\", \"number\": 99999 }, { \"name\": \"EDITION_MAX\", \"number\": 2147483647 }] }] });\n/**\n * Describes the message google.protobuf.FileDescriptorSet.\n * Use `create(FileDescriptorSetSchema)` to create a new message.\n */\nexport const FileDescriptorSetSchema = /*@__PURE__*/ messageDesc(file_google_protobuf_descriptor, 0);\n/**\n * Describes the message google.protobuf.FileDescriptorProto.\n * Use `create(FileDescriptorProtoSchema)` to create a new message.\n */\nexport const FileDescriptorProtoSchema = /*@__PURE__*/ messageDesc(file_google_protobuf_descriptor, 1);\n/**\n * Describes the message google.protobuf.DescriptorProto.\n * Use `create(DescriptorProtoSchema)` to create a new message.\n */\nexport const DescriptorProtoSchema = /*@__PURE__*/ messageDesc(file_google_protobuf_descriptor, 2);\n/**\n * Describes the message google.protobuf.DescriptorProto.ExtensionRange.\n * Use `create(DescriptorProto_ExtensionRangeSchema)` to create a new message.\n */\nexport const DescriptorProto_ExtensionRangeSchema = /*@__PURE__*/ messageDesc(file_google_protobuf_descriptor, 2, 0);\n/**\n * Describes the message google.protobuf.DescriptorProto.ReservedRange.\n * Use `create(DescriptorProto_ReservedRangeSchema)` to create a new message.\n */\nexport const DescriptorProto_ReservedRangeSchema = /*@__PURE__*/ messageDesc(file_google_protobuf_descriptor, 2, 1);\n/**\n * Describes the message google.protobuf.ExtensionRangeOptions.\n * Use `create(ExtensionRangeOptionsSchema)` to create a new message.\n */\nexport const ExtensionRangeOptionsSchema = /*@__PURE__*/ messageDesc(file_google_protobuf_descriptor, 3);\n/**\n * Describes the message google.protobuf.ExtensionRangeOptions.Declaration.\n * Use `create(ExtensionRangeOptions_DeclarationSchema)` to create a new message.\n */\nexport const ExtensionRangeOptions_DeclarationSchema = /*@__PURE__*/ messageDesc(file_google_protobuf_descriptor, 3, 0);\n/**\n * The verification state of the extension range.\n *\n * @generated from enum google.protobuf.ExtensionRangeOptions.VerificationState\n */\nexport var ExtensionRangeOptions_VerificationState;\n(function (ExtensionRangeOptions_VerificationState) {\n    /**\n     * All the extensions of the range must be declared.\n     *\n     * @generated from enum value: DECLARATION = 0;\n     */\n    ExtensionRangeOptions_VerificationState[ExtensionRangeOptions_VerificationState[\"DECLARATION\"] = 0] = \"DECLARATION\";\n    /**\n     * @generated from enum value: UNVERIFIED = 1;\n     */\n    ExtensionRangeOptions_VerificationState[ExtensionRangeOptions_VerificationState[\"UNVERIFIED\"] = 1] = \"UNVERIFIED\";\n})(ExtensionRangeOptions_VerificationState || (ExtensionRangeOptions_VerificationState = {}));\n/**\n * Describes the enum google.protobuf.ExtensionRangeOptions.VerificationState.\n */\nexport const ExtensionRangeOptions_VerificationStateSchema = /*@__PURE__*/ enumDesc(file_google_protobuf_descriptor, 3, 0);\n/**\n * Describes the message google.protobuf.FieldDescriptorProto.\n * Use `create(FieldDescriptorProtoSchema)` to create a new message.\n */\nexport const FieldDescriptorProtoSchema = /*@__PURE__*/ messageDesc(file_google_protobuf_descriptor, 4);\n/**\n * @generated from enum google.protobuf.FieldDescriptorProto.Type\n */\nexport var FieldDescriptorProto_Type;\n(function (FieldDescriptorProto_Type) {\n    /**\n     * 0 is reserved for errors.\n     * Order is weird for historical reasons.\n     *\n     * @generated from enum value: TYPE_DOUBLE = 1;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"DOUBLE\"] = 1] = \"DOUBLE\";\n    /**\n     * @generated from enum value: TYPE_FLOAT = 2;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"FLOAT\"] = 2] = \"FLOAT\";\n    /**\n     * Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if\n     * negative values are likely.\n     *\n     * @generated from enum value: TYPE_INT64 = 3;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"INT64\"] = 3] = \"INT64\";\n    /**\n     * @generated from enum value: TYPE_UINT64 = 4;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"UINT64\"] = 4] = \"UINT64\";\n    /**\n     * Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if\n     * negative values are likely.\n     *\n     * @generated from enum value: TYPE_INT32 = 5;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"INT32\"] = 5] = \"INT32\";\n    /**\n     * @generated from enum value: TYPE_FIXED64 = 6;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"FIXED64\"] = 6] = \"FIXED64\";\n    /**\n     * @generated from enum value: TYPE_FIXED32 = 7;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"FIXED32\"] = 7] = \"FIXED32\";\n    /**\n     * @generated from enum value: TYPE_BOOL = 8;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"BOOL\"] = 8] = \"BOOL\";\n    /**\n     * @generated from enum value: TYPE_STRING = 9;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"STRING\"] = 9] = \"STRING\";\n    /**\n     * Tag-delimited aggregate.\n     * Group type is deprecated and not supported after google.protobuf. However, Proto3\n     * implementations should still be able to parse the group wire format and\n     * treat group fields as unknown fields.  In Editions, the group wire format\n     * can be enabled via the `message_encoding` feature.\n     *\n     * @generated from enum value: TYPE_GROUP = 10;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"GROUP\"] = 10] = \"GROUP\";\n    /**\n     * Length-delimited aggregate.\n     *\n     * @generated from enum value: TYPE_MESSAGE = 11;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"MESSAGE\"] = 11] = \"MESSAGE\";\n    /**\n     * New in version 2.\n     *\n     * @generated from enum value: TYPE_BYTES = 12;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"BYTES\"] = 12] = \"BYTES\";\n    /**\n     * @generated from enum value: TYPE_UINT32 = 13;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"UINT32\"] = 13] = \"UINT32\";\n    /**\n     * @generated from enum value: TYPE_ENUM = 14;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"ENUM\"] = 14] = \"ENUM\";\n    /**\n     * @generated from enum value: TYPE_SFIXED32 = 15;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"SFIXED32\"] = 15] = \"SFIXED32\";\n    /**\n     * @generated from enum value: TYPE_SFIXED64 = 16;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"SFIXED64\"] = 16] = \"SFIXED64\";\n    /**\n     * Uses ZigZag encoding.\n     *\n     * @generated from enum value: TYPE_SINT32 = 17;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"SINT32\"] = 17] = \"SINT32\";\n    /**\n     * Uses ZigZag encoding.\n     *\n     * @generated from enum value: TYPE_SINT64 = 18;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"SINT64\"] = 18] = \"SINT64\";\n})(FieldDescriptorProto_Type || (FieldDescriptorProto_Type = {}));\n/**\n * Describes the enum google.protobuf.FieldDescriptorProto.Type.\n */\nexport const FieldDescriptorProto_TypeSchema = /*@__PURE__*/ enumDesc(file_google_protobuf_descriptor, 4, 0);\n/**\n * @generated from enum google.protobuf.FieldDescriptorProto.Label\n */\nexport var FieldDescriptorProto_Label;\n(function (FieldDescriptorProto_Label) {\n    /**\n     * 0 is reserved for errors\n     *\n     * @generated from enum value: LABEL_OPTIONAL = 1;\n     */\n    FieldDescriptorProto_Label[FieldDescriptorProto_Label[\"OPTIONAL\"] = 1] = \"OPTIONAL\";\n    /**\n     * @generated from enum value: LABEL_REPEATED = 3;\n     */\n    FieldDescriptorProto_Label[FieldDescriptorProto_Label[\"REPEATED\"] = 3] = \"REPEATED\";\n    /**\n     * The required label is only allowed in google.protobuf.  In proto3 and Editions\n     * it's explicitly prohibited.  In Editions, the `field_presence` feature\n     * can be used to get this behavior.\n     *\n     * @generated from enum value: LABEL_REQUIRED = 2;\n     */\n    FieldDescriptorProto_Label[FieldDescriptorProto_Label[\"REQUIRED\"] = 2] = \"REQUIRED\";\n})(FieldDescriptorProto_Label || (FieldDescriptorProto_Label = {}));\n/**\n * Describes the enum google.protobuf.FieldDescriptorProto.Label.\n */\nexport const FieldDescriptorProto_LabelSchema = /*@__PURE__*/ enumDesc(file_google_protobuf_descriptor, 4, 1);\n/**\n * Describes the message google.protobuf.OneofDescriptorProto.\n * Use `create(OneofDescriptorProtoSchema)` to create a new message.\n */\nexport const OneofDescriptorProtoSchema = /*@__PURE__*/ messageDesc(file_google_protobuf_descriptor, 5);\n/**\n * Describes the message google.protobuf.EnumDescriptorProto.\n * Use `create(EnumDescriptorProtoSchema)` to create a new message.\n */\nexport const EnumDescriptorProtoSchema = /*@__PURE__*/ messageDesc(file_google_protobuf_descriptor, 6);\n/**\n * Describes the message google.protobuf.EnumDescriptorProto.EnumReservedRange.\n * Use `create(EnumDescriptorProto_EnumReservedRangeSchema)` to create a new message.\n */\nexport const EnumDescriptorProto_EnumReservedRangeSchema = /*@__PURE__*/ messageDesc(file_google_protobuf_descriptor, 6, 0);\n/**\n * Describes the message google.protobuf.EnumValueDescriptorProto.\n * Use `create(EnumValueDescriptorProtoSchema)` to create a new message.\n */\nexport const EnumValueDescriptorProtoSchema = /*@__PURE__*/ messageDesc(file_google_protobuf_descriptor, 7);\n/**\n * Describes the message google.protobuf.ServiceDescriptorProto.\n * Use `create(ServiceDescriptorProtoSchema)` to create a new message.\n */\nexport const ServiceDescriptorProtoSchema = /*@__PURE__*/ messageDesc(file_google_protobuf_descriptor, 8);\n/**\n * Describes the message google.protobuf.MethodDescriptorProto.\n * Use `create(MethodDescriptorProtoSchema)` to create a new message.\n */\nexport const MethodDescriptorProtoSchema = /*@__PURE__*/ messageDesc(file_google_protobuf_descriptor, 9);\n/**\n * Describes the message google.protobuf.FileOptions.\n * Use `create(FileOptionsSchema)` to create a new message.\n */\nexport const FileOptionsSchema = /*@__PURE__*/ messageDesc(file_google_protobuf_descriptor, 10);\n/**\n * Generated classes can be optimized for speed or code size.\n *\n * @generated from enum google.protobuf.FileOptions.OptimizeMode\n */\nexport var FileOptions_OptimizeMode;\n(function (FileOptions_OptimizeMode) {\n    /**\n     * Generate complete code for parsing, serialization,\n     *\n     * @generated from enum value: SPEED = 1;\n     */\n    FileOptions_OptimizeMode[FileOptions_OptimizeMode[\"SPEED\"] = 1] = \"SPEED\";\n    /**\n     * etc.\n     *\n     * Use ReflectionOps to implement these methods.\n     *\n     * @generated from enum value: CODE_SIZE = 2;\n     */\n    FileOptions_OptimizeMode[FileOptions_OptimizeMode[\"CODE_SIZE\"] = 2] = \"CODE_SIZE\";\n    /**\n     * Generate code using MessageLite and the lite runtime.\n     *\n     * @generated from enum value: LITE_RUNTIME = 3;\n     */\n    FileOptions_OptimizeMode[FileOptions_OptimizeMode[\"LITE_RUNTIME\"] = 3] = \"LITE_RUNTIME\";\n})(FileOptions_OptimizeMode || (FileOptions_OptimizeMode = {}));\n/**\n * Describes the enum google.protobuf.FileOptions.OptimizeMode.\n */\nexport const FileOptions_OptimizeModeSchema = /*@__PURE__*/ enumDesc(file_google_protobuf_descriptor, 10, 0);\n/**\n * Describes the message google.protobuf.MessageOptions.\n * Use `create(MessageOptionsSchema)` to create a new message.\n */\nexport const MessageOptionsSchema = /*@__PURE__*/ messageDesc(file_google_protobuf_descriptor, 11);\n/**\n * Describes the message google.protobuf.FieldOptions.\n * Use `create(FieldOptionsSchema)` to create a new message.\n */\nexport const FieldOptionsSchema = /*@__PURE__*/ messageDesc(file_google_protobuf_descriptor, 12);\n/**\n * Describes the message google.protobuf.FieldOptions.EditionDefault.\n * Use `create(FieldOptions_EditionDefaultSchema)` to create a new message.\n */\nexport const FieldOptions_EditionDefaultSchema = /*@__PURE__*/ messageDesc(file_google_protobuf_descriptor, 12, 0);\n/**\n * Describes the message google.protobuf.FieldOptions.FeatureSupport.\n * Use `create(FieldOptions_FeatureSupportSchema)` to create a new message.\n */\nexport const FieldOptions_FeatureSupportSchema = /*@__PURE__*/ messageDesc(file_google_protobuf_descriptor, 12, 1);\n/**\n * @generated from enum google.protobuf.FieldOptions.CType\n */\nexport var FieldOptions_CType;\n(function (FieldOptions_CType) {\n    /**\n     * Default mode.\n     *\n     * @generated from enum value: STRING = 0;\n     */\n    FieldOptions_CType[FieldOptions_CType[\"STRING\"] = 0] = \"STRING\";\n    /**\n     * The option [ctype=CORD] may be applied to a non-repeated field of type\n     * \"bytes\". It indicates that in C++, the data should be stored in a Cord\n     * instead of a string.  For very large strings, this may reduce memory\n     * fragmentation. It may also allow better performance when parsing from a\n     * Cord, or when parsing with aliasing enabled, as the parsed Cord may then\n     * alias the original buffer.\n     *\n     * @generated from enum value: CORD = 1;\n     */\n    FieldOptions_CType[FieldOptions_CType[\"CORD\"] = 1] = \"CORD\";\n    /**\n     * @generated from enum value: STRING_PIECE = 2;\n     */\n    FieldOptions_CType[FieldOptions_CType[\"STRING_PIECE\"] = 2] = \"STRING_PIECE\";\n})(FieldOptions_CType || (FieldOptions_CType = {}));\n/**\n * Describes the enum google.protobuf.FieldOptions.CType.\n */\nexport const FieldOptions_CTypeSchema = /*@__PURE__*/ enumDesc(file_google_protobuf_descriptor, 12, 0);\n/**\n * @generated from enum google.protobuf.FieldOptions.JSType\n */\nexport var FieldOptions_JSType;\n(function (FieldOptions_JSType) {\n    /**\n     * Use the default type.\n     *\n     * @generated from enum value: JS_NORMAL = 0;\n     */\n    FieldOptions_JSType[FieldOptions_JSType[\"JS_NORMAL\"] = 0] = \"JS_NORMAL\";\n    /**\n     * Use JavaScript strings.\n     *\n     * @generated from enum value: JS_STRING = 1;\n     */\n    FieldOptions_JSType[FieldOptions_JSType[\"JS_STRING\"] = 1] = \"JS_STRING\";\n    /**\n     * Use JavaScript numbers.\n     *\n     * @generated from enum value: JS_NUMBER = 2;\n     */\n    FieldOptions_JSType[FieldOptions_JSType[\"JS_NUMBER\"] = 2] = \"JS_NUMBER\";\n})(FieldOptions_JSType || (FieldOptions_JSType = {}));\n/**\n * Describes the enum google.protobuf.FieldOptions.JSType.\n */\nexport const FieldOptions_JSTypeSchema = /*@__PURE__*/ enumDesc(file_google_protobuf_descriptor, 12, 1);\n/**\n * If set to RETENTION_SOURCE, the option will be omitted from the binary.\n * Note: as of January 2023, support for this is in progress and does not yet\n * have an effect (b/264593489).\n *\n * @generated from enum google.protobuf.FieldOptions.OptionRetention\n */\nexport var FieldOptions_OptionRetention;\n(function (FieldOptions_OptionRetention) {\n    /**\n     * @generated from enum value: RETENTION_UNKNOWN = 0;\n     */\n    FieldOptions_OptionRetention[FieldOptions_OptionRetention[\"RETENTION_UNKNOWN\"] = 0] = \"RETENTION_UNKNOWN\";\n    /**\n     * @generated from enum value: RETENTION_RUNTIME = 1;\n     */\n    FieldOptions_OptionRetention[FieldOptions_OptionRetention[\"RETENTION_RUNTIME\"] = 1] = \"RETENTION_RUNTIME\";\n    /**\n     * @generated from enum value: RETENTION_SOURCE = 2;\n     */\n    FieldOptions_OptionRetention[FieldOptions_OptionRetention[\"RETENTION_SOURCE\"] = 2] = \"RETENTION_SOURCE\";\n})(FieldOptions_OptionRetention || (FieldOptions_OptionRetention = {}));\n/**\n * Describes the enum google.protobuf.FieldOptions.OptionRetention.\n */\nexport const FieldOptions_OptionRetentionSchema = /*@__PURE__*/ enumDesc(file_google_protobuf_descriptor, 12, 2);\n/**\n * This indicates the types of entities that the field may apply to when used\n * as an option. If it is unset, then the field may be freely used as an\n * option on any kind of entity. Note: as of January 2023, support for this is\n * in progress and does not yet have an effect (b/264593489).\n *\n * @generated from enum google.protobuf.FieldOptions.OptionTargetType\n */\nexport var FieldOptions_OptionTargetType;\n(function (FieldOptions_OptionTargetType) {\n    /**\n     * @generated from enum value: TARGET_TYPE_UNKNOWN = 0;\n     */\n    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType[\"TARGET_TYPE_UNKNOWN\"] = 0] = \"TARGET_TYPE_UNKNOWN\";\n    /**\n     * @generated from enum value: TARGET_TYPE_FILE = 1;\n     */\n    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType[\"TARGET_TYPE_FILE\"] = 1] = \"TARGET_TYPE_FILE\";\n    /**\n     * @generated from enum value: TARGET_TYPE_EXTENSION_RANGE = 2;\n     */\n    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType[\"TARGET_TYPE_EXTENSION_RANGE\"] = 2] = \"TARGET_TYPE_EXTENSION_RANGE\";\n    /**\n     * @generated from enum value: TARGET_TYPE_MESSAGE = 3;\n     */\n    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType[\"TARGET_TYPE_MESSAGE\"] = 3] = \"TARGET_TYPE_MESSAGE\";\n    /**\n     * @generated from enum value: TARGET_TYPE_FIELD = 4;\n     */\n    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType[\"TARGET_TYPE_FIELD\"] = 4] = \"TARGET_TYPE_FIELD\";\n    /**\n     * @generated from enum value: TARGET_TYPE_ONEOF = 5;\n     */\n    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType[\"TARGET_TYPE_ONEOF\"] = 5] = \"TARGET_TYPE_ONEOF\";\n    /**\n     * @generated from enum value: TARGET_TYPE_ENUM = 6;\n     */\n    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType[\"TARGET_TYPE_ENUM\"] = 6] = \"TARGET_TYPE_ENUM\";\n    /**\n     * @generated from enum value: TARGET_TYPE_ENUM_ENTRY = 7;\n     */\n    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType[\"TARGET_TYPE_ENUM_ENTRY\"] = 7] = \"TARGET_TYPE_ENUM_ENTRY\";\n    /**\n     * @generated from enum value: TARGET_TYPE_SERVICE = 8;\n     */\n    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType[\"TARGET_TYPE_SERVICE\"] = 8] = \"TARGET_TYPE_SERVICE\";\n    /**\n     * @generated from enum value: TARGET_TYPE_METHOD = 9;\n     */\n    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType[\"TARGET_TYPE_METHOD\"] = 9] = \"TARGET_TYPE_METHOD\";\n})(FieldOptions_OptionTargetType || (FieldOptions_OptionTargetType = {}));\n/**\n * Describes the enum google.protobuf.FieldOptions.OptionTargetType.\n */\nexport const FieldOptions_OptionTargetTypeSchema = /*@__PURE__*/ enumDesc(file_google_protobuf_descriptor, 12, 3);\n/**\n * Describes the message google.protobuf.OneofOptions.\n * Use `create(OneofOptionsSchema)` to create a new message.\n */\nexport const OneofOptionsSchema = /*@__PURE__*/ messageDesc(file_google_protobuf_descriptor, 13);\n/**\n * Describes the message google.protobuf.EnumOptions.\n * Use `create(EnumOptionsSchema)` to create a new message.\n */\nexport const EnumOptionsSchema = /*@__PURE__*/ messageDesc(file_google_protobuf_descriptor, 14);\n/**\n * Describes the message google.protobuf.EnumValueOptions.\n * Use `create(EnumValueOptionsSchema)` to create a new message.\n */\nexport const EnumValueOptionsSchema = /*@__PURE__*/ messageDesc(file_google_protobuf_descriptor, 15);\n/**\n * Describes the message google.protobuf.ServiceOptions.\n * Use `create(ServiceOptionsSchema)` to create a new message.\n */\nexport const ServiceOptionsSchema = /*@__PURE__*/ messageDesc(file_google_protobuf_descriptor, 16);\n/**\n * Describes the message google.protobuf.MethodOptions.\n * Use `create(MethodOptionsSchema)` to create a new message.\n */\nexport const MethodOptionsSchema = /*@__PURE__*/ messageDesc(file_google_protobuf_descriptor, 17);\n/**\n * Is this method side-effect-free (or safe in HTTP parlance), or idempotent,\n * or neither? HTTP based RPC implementation may choose GET verb for safe\n * methods, and PUT verb for idempotent methods instead of the default POST.\n *\n * @generated from enum google.protobuf.MethodOptions.IdempotencyLevel\n */\nexport var MethodOptions_IdempotencyLevel;\n(function (MethodOptions_IdempotencyLevel) {\n    /**\n     * @generated from enum value: IDEMPOTENCY_UNKNOWN = 0;\n     */\n    MethodOptions_IdempotencyLevel[MethodOptions_IdempotencyLevel[\"IDEMPOTENCY_UNKNOWN\"] = 0] = \"IDEMPOTENCY_UNKNOWN\";\n    /**\n     * implies idempotent\n     *\n     * @generated from enum value: NO_SIDE_EFFECTS = 1;\n     */\n    MethodOptions_IdempotencyLevel[MethodOptions_IdempotencyLevel[\"NO_SIDE_EFFECTS\"] = 1] = \"NO_SIDE_EFFECTS\";\n    /**\n     * idempotent, but may have side effects\n     *\n     * @generated from enum value: IDEMPOTENT = 2;\n     */\n    MethodOptions_IdempotencyLevel[MethodOptions_IdempotencyLevel[\"IDEMPOTENT\"] = 2] = \"IDEMPOTENT\";\n})(MethodOptions_IdempotencyLevel || (MethodOptions_IdempotencyLevel = {}));\n/**\n * Describes the enum google.protobuf.MethodOptions.IdempotencyLevel.\n */\nexport const MethodOptions_IdempotencyLevelSchema = /*@__PURE__*/ enumDesc(file_google_protobuf_descriptor, 17, 0);\n/**\n * Describes the message google.protobuf.UninterpretedOption.\n * Use `create(UninterpretedOptionSchema)` to create a new message.\n */\nexport const UninterpretedOptionSchema = /*@__PURE__*/ messageDesc(file_google_protobuf_descriptor, 18);\n/**\n * Describes the message google.protobuf.UninterpretedOption.NamePart.\n * Use `create(UninterpretedOption_NamePartSchema)` to create a new message.\n */\nexport const UninterpretedOption_NamePartSchema = /*@__PURE__*/ messageDesc(file_google_protobuf_descriptor, 18, 0);\n/**\n * Describes the message google.protobuf.FeatureSet.\n * Use `create(FeatureSetSchema)` to create a new message.\n */\nexport const FeatureSetSchema = /*@__PURE__*/ messageDesc(file_google_protobuf_descriptor, 19);\n/**\n * @generated from enum google.protobuf.FeatureSet.FieldPresence\n */\nexport var FeatureSet_FieldPresence;\n(function (FeatureSet_FieldPresence) {\n    /**\n     * @generated from enum value: FIELD_PRESENCE_UNKNOWN = 0;\n     */\n    FeatureSet_FieldPresence[FeatureSet_FieldPresence[\"FIELD_PRESENCE_UNKNOWN\"] = 0] = \"FIELD_PRESENCE_UNKNOWN\";\n    /**\n     * @generated from enum value: EXPLICIT = 1;\n     */\n    FeatureSet_FieldPresence[FeatureSet_FieldPresence[\"EXPLICIT\"] = 1] = \"EXPLICIT\";\n    /**\n     * @generated from enum value: IMPLICIT = 2;\n     */\n    FeatureSet_FieldPresence[FeatureSet_FieldPresence[\"IMPLICIT\"] = 2] = \"IMPLICIT\";\n    /**\n     * @generated from enum value: LEGACY_REQUIRED = 3;\n     */\n    FeatureSet_FieldPresence[FeatureSet_FieldPresence[\"LEGACY_REQUIRED\"] = 3] = \"LEGACY_REQUIRED\";\n})(FeatureSet_FieldPresence || (FeatureSet_FieldPresence = {}));\n/**\n * Describes the enum google.protobuf.FeatureSet.FieldPresence.\n */\nexport const FeatureSet_FieldPresenceSchema = /*@__PURE__*/ enumDesc(file_google_protobuf_descriptor, 19, 0);\n/**\n * @generated from enum google.protobuf.FeatureSet.EnumType\n */\nexport var FeatureSet_EnumType;\n(function (FeatureSet_EnumType) {\n    /**\n     * @generated from enum value: ENUM_TYPE_UNKNOWN = 0;\n     */\n    FeatureSet_EnumType[FeatureSet_EnumType[\"ENUM_TYPE_UNKNOWN\"] = 0] = \"ENUM_TYPE_UNKNOWN\";\n    /**\n     * @generated from enum value: OPEN = 1;\n     */\n    FeatureSet_EnumType[FeatureSet_EnumType[\"OPEN\"] = 1] = \"OPEN\";\n    /**\n     * @generated from enum value: CLOSED = 2;\n     */\n    FeatureSet_EnumType[FeatureSet_EnumType[\"CLOSED\"] = 2] = \"CLOSED\";\n})(FeatureSet_EnumType || (FeatureSet_EnumType = {}));\n/**\n * Describes the enum google.protobuf.FeatureSet.EnumType.\n */\nexport const FeatureSet_EnumTypeSchema = /*@__PURE__*/ enumDesc(file_google_protobuf_descriptor, 19, 1);\n/**\n * @generated from enum google.protobuf.FeatureSet.RepeatedFieldEncoding\n */\nexport var FeatureSet_RepeatedFieldEncoding;\n(function (FeatureSet_RepeatedFieldEncoding) {\n    /**\n     * @generated from enum value: REPEATED_FIELD_ENCODING_UNKNOWN = 0;\n     */\n    FeatureSet_RepeatedFieldEncoding[FeatureSet_RepeatedFieldEncoding[\"REPEATED_FIELD_ENCODING_UNKNOWN\"] = 0] = \"REPEATED_FIELD_ENCODING_UNKNOWN\";\n    /**\n     * @generated from enum value: PACKED = 1;\n     */\n    FeatureSet_RepeatedFieldEncoding[FeatureSet_RepeatedFieldEncoding[\"PACKED\"] = 1] = \"PACKED\";\n    /**\n     * @generated from enum value: EXPANDED = 2;\n     */\n    FeatureSet_RepeatedFieldEncoding[FeatureSet_RepeatedFieldEncoding[\"EXPANDED\"] = 2] = \"EXPANDED\";\n})(FeatureSet_RepeatedFieldEncoding || (FeatureSet_RepeatedFieldEncoding = {}));\n/**\n * Describes the enum google.protobuf.FeatureSet.RepeatedFieldEncoding.\n */\nexport const FeatureSet_RepeatedFieldEncodingSchema = /*@__PURE__*/ enumDesc(file_google_protobuf_descriptor, 19, 2);\n/**\n * @generated from enum google.protobuf.FeatureSet.Utf8Validation\n */\nexport var FeatureSet_Utf8Validation;\n(function (FeatureSet_Utf8Validation) {\n    /**\n     * @generated from enum value: UTF8_VALIDATION_UNKNOWN = 0;\n     */\n    FeatureSet_Utf8Validation[FeatureSet_Utf8Validation[\"UTF8_VALIDATION_UNKNOWN\"] = 0] = \"UTF8_VALIDATION_UNKNOWN\";\n    /**\n     * @generated from enum value: VERIFY = 2;\n     */\n    FeatureSet_Utf8Validation[FeatureSet_Utf8Validation[\"VERIFY\"] = 2] = \"VERIFY\";\n    /**\n     * @generated from enum value: NONE = 3;\n     */\n    FeatureSet_Utf8Validation[FeatureSet_Utf8Validation[\"NONE\"] = 3] = \"NONE\";\n})(FeatureSet_Utf8Validation || (FeatureSet_Utf8Validation = {}));\n/**\n * Describes the enum google.protobuf.FeatureSet.Utf8Validation.\n */\nexport const FeatureSet_Utf8ValidationSchema = /*@__PURE__*/ enumDesc(file_google_protobuf_descriptor, 19, 3);\n/**\n * @generated from enum google.protobuf.FeatureSet.MessageEncoding\n */\nexport var FeatureSet_MessageEncoding;\n(function (FeatureSet_MessageEncoding) {\n    /**\n     * @generated from enum value: MESSAGE_ENCODING_UNKNOWN = 0;\n     */\n    FeatureSet_MessageEncoding[FeatureSet_MessageEncoding[\"MESSAGE_ENCODING_UNKNOWN\"] = 0] = \"MESSAGE_ENCODING_UNKNOWN\";\n    /**\n     * @generated from enum value: LENGTH_PREFIXED = 1;\n     */\n    FeatureSet_MessageEncoding[FeatureSet_MessageEncoding[\"LENGTH_PREFIXED\"] = 1] = \"LENGTH_PREFIXED\";\n    /**\n     * @generated from enum value: DELIMITED = 2;\n     */\n    FeatureSet_MessageEncoding[FeatureSet_MessageEncoding[\"DELIMITED\"] = 2] = \"DELIMITED\";\n})(FeatureSet_MessageEncoding || (FeatureSet_MessageEncoding = {}));\n/**\n * Describes the enum google.protobuf.FeatureSet.MessageEncoding.\n */\nexport const FeatureSet_MessageEncodingSchema = /*@__PURE__*/ enumDesc(file_google_protobuf_descriptor, 19, 4);\n/**\n * @generated from enum google.protobuf.FeatureSet.JsonFormat\n */\nexport var FeatureSet_JsonFormat;\n(function (FeatureSet_JsonFormat) {\n    /**\n     * @generated from enum value: JSON_FORMAT_UNKNOWN = 0;\n     */\n    FeatureSet_JsonFormat[FeatureSet_JsonFormat[\"JSON_FORMAT_UNKNOWN\"] = 0] = \"JSON_FORMAT_UNKNOWN\";\n    /**\n     * @generated from enum value: ALLOW = 1;\n     */\n    FeatureSet_JsonFormat[FeatureSet_JsonFormat[\"ALLOW\"] = 1] = \"ALLOW\";\n    /**\n     * @generated from enum value: LEGACY_BEST_EFFORT = 2;\n     */\n    FeatureSet_JsonFormat[FeatureSet_JsonFormat[\"LEGACY_BEST_EFFORT\"] = 2] = \"LEGACY_BEST_EFFORT\";\n})(FeatureSet_JsonFormat || (FeatureSet_JsonFormat = {}));\n/**\n * Describes the enum google.protobuf.FeatureSet.JsonFormat.\n */\nexport const FeatureSet_JsonFormatSchema = /*@__PURE__*/ enumDesc(file_google_protobuf_descriptor, 19, 5);\n/**\n * Describes the message google.protobuf.FeatureSetDefaults.\n * Use `create(FeatureSetDefaultsSchema)` to create a new message.\n */\nexport const FeatureSetDefaultsSchema = /*@__PURE__*/ messageDesc(file_google_protobuf_descriptor, 20);\n/**\n * Describes the message google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault.\n * Use `create(FeatureSetDefaults_FeatureSetEditionDefaultSchema)` to create a new message.\n */\nexport const FeatureSetDefaults_FeatureSetEditionDefaultSchema = /*@__PURE__*/ messageDesc(file_google_protobuf_descriptor, 20, 0);\n/**\n * Describes the message google.protobuf.SourceCodeInfo.\n * Use `create(SourceCodeInfoSchema)` to create a new message.\n */\nexport const SourceCodeInfoSchema = /*@__PURE__*/ messageDesc(file_google_protobuf_descriptor, 21);\n/**\n * Describes the message google.protobuf.SourceCodeInfo.Location.\n * Use `create(SourceCodeInfo_LocationSchema)` to create a new message.\n */\nexport const SourceCodeInfo_LocationSchema = /*@__PURE__*/ messageDesc(file_google_protobuf_descriptor, 21, 0);\n/**\n * Describes the message google.protobuf.GeneratedCodeInfo.\n * Use `create(GeneratedCodeInfoSchema)` to create a new message.\n */\nexport const GeneratedCodeInfoSchema = /*@__PURE__*/ messageDesc(file_google_protobuf_descriptor, 22);\n/**\n * Describes the message google.protobuf.GeneratedCodeInfo.Annotation.\n * Use `create(GeneratedCodeInfo_AnnotationSchema)` to create a new message.\n */\nexport const GeneratedCodeInfo_AnnotationSchema = /*@__PURE__*/ messageDesc(file_google_protobuf_descriptor, 22, 0);\n/**\n * Represents the identified object's effect on the element in the original\n * .proto file.\n *\n * @generated from enum google.protobuf.GeneratedCodeInfo.Annotation.Semantic\n */\nexport var GeneratedCodeInfo_Annotation_Semantic;\n(function (GeneratedCodeInfo_Annotation_Semantic) {\n    /**\n     * There is no effect or the effect is indescribable.\n     *\n     * @generated from enum value: NONE = 0;\n     */\n    GeneratedCodeInfo_Annotation_Semantic[GeneratedCodeInfo_Annotation_Semantic[\"NONE\"] = 0] = \"NONE\";\n    /**\n     * The element is set or otherwise mutated.\n     *\n     * @generated from enum value: SET = 1;\n     */\n    GeneratedCodeInfo_Annotation_Semantic[GeneratedCodeInfo_Annotation_Semantic[\"SET\"] = 1] = \"SET\";\n    /**\n     * An alias to the element is returned.\n     *\n     * @generated from enum value: ALIAS = 2;\n     */\n    GeneratedCodeInfo_Annotation_Semantic[GeneratedCodeInfo_Annotation_Semantic[\"ALIAS\"] = 2] = \"ALIAS\";\n})(GeneratedCodeInfo_Annotation_Semantic || (GeneratedCodeInfo_Annotation_Semantic = {}));\n/**\n * Describes the enum google.protobuf.GeneratedCodeInfo.Annotation.Semantic.\n */\nexport const GeneratedCodeInfo_Annotation_SemanticSchema = /*@__PURE__*/ enumDesc(file_google_protobuf_descriptor, 22, 0, 0);\n/**\n * The full set of known editions.\n *\n * @generated from enum google.protobuf.Edition\n */\nexport var Edition;\n(function (Edition) {\n    /**\n     * A placeholder for an unknown edition value.\n     *\n     * @generated from enum value: EDITION_UNKNOWN = 0;\n     */\n    Edition[Edition[\"EDITION_UNKNOWN\"] = 0] = \"EDITION_UNKNOWN\";\n    /**\n     * A placeholder edition for specifying default behaviors *before* a feature\n     * was first introduced.  This is effectively an \"infinite past\".\n     *\n     * @generated from enum value: EDITION_LEGACY = 900;\n     */\n    Edition[Edition[\"EDITION_LEGACY\"] = 900] = \"EDITION_LEGACY\";\n    /**\n     * Legacy syntax \"editions\".  These pre-date editions, but behave much like\n     * distinct editions.  These can't be used to specify the edition of proto\n     * files, but feature definitions must supply proto2/proto3 defaults for\n     * backwards compatibility.\n     *\n     * @generated from enum value: EDITION_PROTO2 = 998;\n     */\n    Edition[Edition[\"EDITION_PROTO2\"] = 998] = \"EDITION_PROTO2\";\n    /**\n     * @generated from enum value: EDITION_PROTO3 = 999;\n     */\n    Edition[Edition[\"EDITION_PROTO3\"] = 999] = \"EDITION_PROTO3\";\n    /**\n     * Editions that have been released.  The specific values are arbitrary and\n     * should not be depended on, but they will always be time-ordered for easy\n     * comparison.\n     *\n     * @generated from enum value: EDITION_2023 = 1000;\n     */\n    Edition[Edition[\"EDITION_2023\"] = 1000] = \"EDITION_2023\";\n    /**\n     * @generated from enum value: EDITION_2024 = 1001;\n     */\n    Edition[Edition[\"EDITION_2024\"] = 1001] = \"EDITION_2024\";\n    /**\n     * Placeholder editions for testing feature resolution.  These should not be\n     * used or relyed on outside of tests.\n     *\n     * @generated from enum value: EDITION_1_TEST_ONLY = 1;\n     */\n    Edition[Edition[\"EDITION_1_TEST_ONLY\"] = 1] = \"EDITION_1_TEST_ONLY\";\n    /**\n     * @generated from enum value: EDITION_2_TEST_ONLY = 2;\n     */\n    Edition[Edition[\"EDITION_2_TEST_ONLY\"] = 2] = \"EDITION_2_TEST_ONLY\";\n    /**\n     * @generated from enum value: EDITION_99997_TEST_ONLY = 99997;\n     */\n    Edition[Edition[\"EDITION_99997_TEST_ONLY\"] = 99997] = \"EDITION_99997_TEST_ONLY\";\n    /**\n     * @generated from enum value: EDITION_99998_TEST_ONLY = 99998;\n     */\n    Edition[Edition[\"EDITION_99998_TEST_ONLY\"] = 99998] = \"EDITION_99998_TEST_ONLY\";\n    /**\n     * @generated from enum value: EDITION_99999_TEST_ONLY = 99999;\n     */\n    Edition[Edition[\"EDITION_99999_TEST_ONLY\"] = 99999] = \"EDITION_99999_TEST_ONLY\";\n    /**\n     * Placeholder for specifying unbounded edition support.  This should only\n     * ever be used by plugins that can expect to never require any changes to\n     * support a new edition.\n     *\n     * @generated from enum value: EDITION_MAX = 2147483647;\n     */\n    Edition[Edition[\"EDITION_MAX\"] = 2147483647] = \"EDITION_MAX\";\n})(Edition || (Edition = {}));\n/**\n * Describes the enum google.protobuf.Edition.\n */\nexport const EditionSchema = /*@__PURE__*/ enumDesc(file_google_protobuf_descriptor, 0);\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { ScalarType } from \"./descriptors.js\";\nimport { scalarZeroValue } from \"./reflect/scalar.js\";\nimport { reflect } from \"./reflect/reflect.js\";\nimport { BinaryReader, WireType } from \"./wire/binary-encoding.js\";\n// Default options for parsing binary data.\nconst readDefaults = {\n    readUnknownFields: true,\n};\nfunction makeReadOptions(options) {\n    return options ? Object.assign(Object.assign({}, readDefaults), options) : readDefaults;\n}\n/**\n * Parse serialized binary data.\n */\nexport function fromBinary(schema, bytes, options) {\n    const msg = reflect(schema, undefined, false);\n    readMessage(msg, new BinaryReader(bytes), makeReadOptions(options), false, bytes.byteLength);\n    return msg.message;\n}\n/**\n * Parse from binary data, merging fields.\n *\n * Repeated fields are appended. Map entries are added, overwriting\n * existing keys.\n *\n * If a message field is already present, it will be merged with the\n * new data.\n */\nexport function mergeFromBinary(schema, target, bytes, options) {\n    readMessage(reflect(schema, target, false), new BinaryReader(bytes), makeReadOptions(options), false, bytes.byteLength);\n    return target;\n}\n/**\n * If `delimited` is false, read the length given in `lengthOrDelimitedFieldNo`.\n *\n * If `delimited` is true, read until an EndGroup tag. `lengthOrDelimitedFieldNo`\n * is the expected field number.\n *\n * @private\n */\nfunction readMessage(message, reader, options, delimited, lengthOrDelimitedFieldNo) {\n    var _a;\n    const end = delimited ? reader.len : reader.pos + lengthOrDelimitedFieldNo;\n    let fieldNo, wireType;\n    const unknownFields = (_a = message.getUnknown()) !== null && _a !== void 0 ? _a : [];\n    while (reader.pos < end) {\n        [fieldNo, wireType] = reader.tag();\n        if (delimited && wireType == WireType.EndGroup) {\n            break;\n        }\n        const field = message.findNumber(fieldNo);\n        if (!field) {\n            const data = reader.skip(wireType, fieldNo);\n            if (options.readUnknownFields) {\n                unknownFields.push({ no: fieldNo, wireType, data });\n            }\n            continue;\n        }\n        readField(message, reader, field, wireType, options);\n    }\n    if (delimited) {\n        if (wireType != WireType.EndGroup || fieldNo !== lengthOrDelimitedFieldNo) {\n            throw new Error(`invalid end group tag`);\n        }\n    }\n    if (unknownFields.length > 0) {\n        message.setUnknown(unknownFields);\n    }\n}\n/**\n * @private\n */\nexport function readField(message, reader, field, wireType, options) {\n    switch (field.fieldKind) {\n        case \"scalar\":\n            message.set(field, readScalar(reader, field.scalar));\n            break;\n        case \"enum\":\n            message.set(field, readScalar(reader, ScalarType.INT32));\n            break;\n        case \"message\":\n            message.set(field, readMessageField(reader, options, field, message.get(field)));\n            break;\n        case \"list\":\n            readListField(reader, wireType, message.get(field), options);\n            break;\n        case \"map\":\n            readMapEntry(reader, message.get(field), options);\n            break;\n    }\n}\n// Read a map field, expecting key field = 1, value field = 2\nfunction readMapEntry(reader, map, options) {\n    const field = map.field();\n    let key, val;\n    const end = reader.pos + reader.uint32();\n    while (reader.pos < end) {\n        const [fieldNo] = reader.tag();\n        switch (fieldNo) {\n            case 1:\n                key = readScalar(reader, field.mapKey);\n                break;\n            case 2:\n                switch (field.mapKind) {\n                    case \"scalar\":\n                        val = readScalar(reader, field.scalar);\n                        break;\n                    case \"enum\":\n                        val = reader.int32();\n                        break;\n                    case \"message\":\n                        val = readMessageField(reader, options, field);\n                        break;\n                }\n                break;\n        }\n    }\n    if (key === undefined) {\n        key = scalarZeroValue(field.mapKey, false);\n    }\n    if (val === undefined) {\n        switch (field.mapKind) {\n            case \"scalar\":\n                val = scalarZeroValue(field.scalar, false);\n                break;\n            case \"enum\":\n                val = field.enum.values[0].number;\n                break;\n            case \"message\":\n                val = reflect(field.message, undefined, false);\n                break;\n        }\n    }\n    map.set(key, val);\n}\nfunction readListField(reader, wireType, list, options) {\n    var _a;\n    const field = list.field();\n    if (field.listKind === \"message\") {\n        list.add(readMessageField(reader, options, field));\n        return;\n    }\n    const scalarType = (_a = field.scalar) !== null && _a !== void 0 ? _a : ScalarType.INT32;\n    const packed = wireType == WireType.LengthDelimited &&\n        scalarType != ScalarType.STRING &&\n        scalarType != ScalarType.BYTES;\n    if (!packed) {\n        list.add(readScalar(reader, scalarType));\n        return;\n    }\n    const e = reader.uint32() + reader.pos;\n    while (reader.pos < e) {\n        list.add(readScalar(reader, scalarType));\n    }\n}\nfunction readMessageField(reader, options, field, mergeMessage) {\n    const delimited = field.delimitedEncoding;\n    const message = mergeMessage !== null && mergeMessage !== void 0 ? mergeMessage : reflect(field.message, undefined, false);\n    readMessage(message, reader, options, delimited, delimited ? field.number : reader.uint32());\n    return message;\n}\nfunction readScalar(reader, type) {\n    switch (type) {\n        case ScalarType.STRING:\n            return reader.string();\n        case ScalarType.BOOL:\n            return reader.bool();\n        case ScalarType.DOUBLE:\n            return reader.double();\n        case ScalarType.FLOAT:\n            return reader.float();\n        case ScalarType.INT32:\n            return reader.int32();\n        case ScalarType.INT64:\n            return reader.int64();\n        case ScalarType.UINT64:\n            return reader.uint64();\n        case ScalarType.FIXED64:\n            return reader.fixed64();\n        case ScalarType.BYTES:\n            return reader.bytes();\n        case ScalarType.FIXED32:\n            return reader.fixed32();\n        case ScalarType.SFIXED32:\n            return reader.sfixed32();\n        case ScalarType.SFIXED64:\n            return reader.sfixed64();\n        case ScalarType.SINT64:\n            return reader.sint64();\n        case ScalarType.UINT32:\n            return reader.uint32();\n        case ScalarType.SINT32:\n            return reader.sint32();\n    }\n}\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { base64Decode } from \"../wire/base64-encoding.js\";\nimport { FileDescriptorProtoSchema } from \"../wkt/gen/google/protobuf/descriptor_pb.js\";\nimport { createFileRegistry } from \"../registry.js\";\nimport { restoreJsonNames } from \"./restore-json-names.js\";\nimport { fromBinary } from \"../from-binary.js\";\n/**\n * Hydrate a file descriptor.\n *\n * @private\n */\nexport function fileDesc(b64, imports) {\n    var _a;\n    const root = fromBinary(FileDescriptorProtoSchema, base64Decode(b64));\n    root.messageType.forEach(restoreJsonNames);\n    root.dependency = (_a = imports === null || imports === void 0 ? void 0 : imports.map((f) => f.proto.name)) !== null && _a !== void 0 ? _a : [];\n    const reg = createFileRegistry(root, (protoFileName) => imports === null || imports === void 0 ? void 0 : imports.find((f) => f.proto.name === protoFileName));\n    // non-null assertion because we just created the registry from the file we look up\n    return reg.getFile(root.name);\n}\n","// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { reflect } from \"./reflect/reflect.js\";\nimport { BinaryWriter, WireType } from \"./wire/binary-encoding.js\";\nimport { ScalarType } from \"./descriptors.js\";\n// bootstrap-inject google.protobuf.FeatureSet.FieldPresence.LEGACY_REQUIRED: const $name: FeatureSet_FieldPresence.$localName = $number;\nconst LEGACY_REQUIRED = 3;\n// Default options for serializing binary data.\nconst writeDefaults = {\n    writeUnknownFields: true,\n};\nfunction makeWriteOptions(options) {\n    return options ? Object.assign(Object.assign({}, writeDefaults), options) : writeDefaults;\n}\nexport function toBinary(schema, message, options) {\n    return writeFields(new BinaryWriter(), makeWriteOptions(options), reflect(schema, message)).finish();\n}\nfunction writeFields(writer, opts, msg) {\n    var _a;\n    for (const f of msg.sortedFields) {\n        if (!msg.isSet(f)) {\n            if (f.presence == LEGACY_REQUIRED) {\n                throw new Error(`cannot encode field ${msg.desc.typeName}.${f.name} to binary: required field not set`);\n            }\n            continue;\n        }\n        writeField(writer, opts, msg, f);\n    }\n    if (opts.writeUnknownFields) {\n        for (const { no, wireType, data } of (_a = msg.getUnknown()) !== null && _a !== void 0 ? _a : []) {\n            writer.tag(no, wireType).raw(data);\n        }\n    }\n    return writer;\n}\n/**\n * @private\n */\nexport function writeField(writer, opts, msg, field) {\n    var _a;\n    switch (field.fieldKind) {\n        case \"scalar\":\n        case \"enum\":\n            writeScalar(writer, (_a = field.scalar) !== null && _a !== void 0 ? _a : ScalarType.INT32, field.number, msg.get(field));\n            break;\n        case \"list\":\n            writeListField(writer, opts, field, msg.get(field));\n            break;\n        case \"message\":\n            writeMessageField(writer, opts, field, msg.get(field));\n            break;\n        case \"map\":\n            for (const [key, val] of msg.get(field)) {\n                writeMapEntry(writer, opts, field, key, val);\n            }\n            break;\n    }\n}\nfunction writeScalar(writer, scalarType, fieldNo, value) {\n    writeScalarValue(writer.tag(fieldNo, writeTypeOfScalar(scalarType)), scalarType, value);\n}\nfunction writeMessageField(writer, opts, field, message) {\n    if (field.delimitedEncoding) {\n        writeFields(writer.tag(field.number, WireType.StartGroup), opts, message).tag(field.number, WireType.EndGroup);\n    }\n    else {\n        writeFields(writer.tag(field.number, WireType.LengthDelimited).fork(), opts, message).join();\n    }\n}\nfunction writeListField(writer, opts, field, list) {\n    var _a;\n    if (field.listKind == \"message\") {\n        for (const item of list) {\n            writeMessageField(writer, opts, field, item);\n        }\n        return;\n    }\n    const scalarType = (_a = field.scalar) !== null && _a !== void 0 ? _a : ScalarType.INT32;\n    if (field.packed) {\n        if (!list.size) {\n            return;\n        }\n        writer.tag(field.number, WireType.LengthDelimited).fork();\n        for (const item of list) {\n            writeScalarValue(writer, scalarType, item);\n        }\n        writer.join();\n        return;\n    }\n    for (const item of list) {\n        writeScalar(writer, scalarType, field.number, item);\n    }\n}\nfunction writeMapEntry(writer, opts, field, key, value) {\n    var _a;\n    writer.tag(field.number, WireType.LengthDelimited).fork();\n    // write key, expecting key field number = 1\n    writeScalar(writer, field.mapKey, 1, key);\n    // write value, expecting value field number = 2\n    switch (field.mapKind) {\n        case \"scalar\":\n        case \"enum\":\n            writeScalar(writer, (_a = field.scalar) !== null && _a !== void 0 ? _a : ScalarType.INT32, 2, value);\n            break;\n        case \"message\":\n            writeFields(writer.tag(2, WireType.LengthDelimited).fork(), opts, value).join();\n            break;\n    }\n    writer.join();\n}\nfunction writeScalarValue(writer, type, value) {\n    switch (type) {\n        case ScalarType.STRING:\n            writer.string(value);\n            break;\n        case ScalarType.BOOL:\n            writer.bool(value);\n            break;\n        case ScalarType.DOUBLE:\n            writer.double(value);\n            break;\n        case ScalarType.FLOAT:\n            writer.float(value);\n            break;\n        case ScalarType.INT32:\n            writer.int32(value);\n            break;\n        case ScalarType.INT64:\n            writer.int64(value);\n            break;\n        case ScalarType.UINT64:\n            writer.uint64(value);\n            break;\n        case ScalarType.FIXED64:\n            writer.fixed64(value);\n            break;\n        case ScalarType.BYTES:\n            writer.bytes(value);\n            break;\n        case ScalarType.FIXED32:\n            writer.fixed32(value);\n            break;\n        case ScalarType.SFIXED32:\n            writer.sfixed32(value);\n            break;\n        case ScalarType.SFIXED64:\n            writer.sfixed64(value);\n            break;\n        case ScalarType.SINT64:\n            writer.sint64(value);\n            break;\n        case ScalarType.UINT32:\n            writer.uint32(value);\n            break;\n        case ScalarType.SINT32:\n            writer.sint32(value);\n            break;\n    }\n}\nfunction writeTypeOfScalar(type) {\n    switch (type) {\n        case ScalarType.BYTES:\n        case ScalarType.STRING:\n            return WireType.LengthDelimited;\n        case ScalarType.DOUBLE:\n        case ScalarType.FIXED64:\n        case ScalarType.SFIXED64:\n            return WireType.Bit64;\n        case ScalarType.FIXED32:\n        case ScalarType.SFIXED32:\n        case ScalarType.FLOAT:\n            return WireType.Bit32;\n        default:\n            return WireType.Varint;\n    }\n}\n","export * as Admin from \"./lib/admin_pb.js\";\nexport * as AppOnly from \"./lib/apponly_pb.js\";\nexport * as ATAK from \"./lib/atak_pb.js\";\nexport * as CannedMessages from \"./lib/cannedmessages_pb.js\";\nexport * as Channel from \"./lib/channel_pb.js\";\nexport * as ClientOnly from \"./lib/clientonly_pb.js\";\nexport * as Config from \"./lib/config_pb.js\";\nexport * as ConnectionStatus from \"./lib/connection_status_pb.js\";\nexport * as LocalOnly from \"./lib/localonly_pb.js\";\nexport * as Mesh from \"./lib/mesh_pb.js\";\nexport * as ModuleConfig from \"./lib/module_config_pb.js\";\nexport * as Mqtt from \"./lib/mqtt_pb.js\";\nexport * as PaxCount from \"./lib/paxcount_pb.js\";\nexport * as Portnums from \"./lib/portnums_pb.js\";\nexport * as PowerMon from \"./lib/powermon_pb.js\";\nexport * as RemoteHardware from \"./lib/remote_hardware_pb.js\";\nexport * as Rtttl from \"./lib/rtttl_pb.js\";\nexport * as StoreForward from \"./lib/storeforward_pb.js\";\nexport * as Telemetry from \"./lib/telemetry_pb.js\";\nexport * as Xmodem from \"./lib/xmodem_pb.js\";\n","// @generated by protoc-gen-es v2.1.0 with parameter \"target=ts\"\n// @generated from file admin.proto (package meshtastic, syntax proto3)\n/* eslint-disable */\n\nimport type { GenEnum, GenFile, GenMessage } from \"@bufbuild/protobuf/codegenv1\";\nimport { enumDesc, fileDesc, messageDesc } from \"@bufbuild/protobuf/codegenv1\";\nimport type { Channel } from \"./channel_pb.js\";\nimport { file_channel } from \"./channel_pb.js\";\nimport type { Config } from \"./config_pb.js\";\nimport { file_config } from \"./config_pb.js\";\nimport type { DeviceConnectionStatus } from \"./connection_status_pb.js\";\nimport { file_connection_status } from \"./connection_status_pb.js\";\nimport type { DeviceMetadata, NodeRemoteHardwarePin, Position, User } from \"./mesh_pb.js\";\nimport { file_mesh } from \"./mesh_pb.js\";\nimport type { ModuleConfig } from \"./module_config_pb.js\";\nimport { file_module_config } from \"./module_config_pb.js\";\nimport type { DeviceUIConfig } from \"./device_ui_pb.js\";\nimport { file_device_ui } from \"./device_ui_pb.js\";\nimport type { Message } from \"npm:@bufbuild/protobuf@^2.1.0\";\n\n/**\n * Describes the file admin.proto.\n */\nexport const file_admin: GenFile = /*@__PURE__*/\n  fileDesc(\"CgthZG1pbi5wcm90bxIKbWVzaHRhc3RpYyKTFAoMQWRtaW5NZXNzYWdlEhcKD3Nlc3Npb25fcGFzc2tleRhlIAEoDBIdChNnZXRfY2hhbm5lbF9yZXF1ZXN0GAEgASgNSAASMwoUZ2V0X2NoYW5uZWxfcmVzcG9uc2UYAiABKAsyEy5tZXNodGFzdGljLkNoYW5uZWxIABIbChFnZXRfb3duZXJfcmVxdWVzdBgDIAEoCEgAEi4KEmdldF9vd25lcl9yZXNwb25zZRgEIAEoCzIQLm1lc2h0YXN0aWMuVXNlckgAEkEKEmdldF9jb25maWdfcmVxdWVzdBgFIAEoDjIjLm1lc2h0YXN0aWMuQWRtaW5NZXNzYWdlLkNvbmZpZ1R5cGVIABIxChNnZXRfY29uZmlnX3Jlc3BvbnNlGAYgASgLMhIubWVzaHRhc3RpYy5Db25maWdIABJOChlnZXRfbW9kdWxlX2NvbmZpZ19yZXF1ZXN0GAcgASgOMikubWVzaHRhc3RpYy5BZG1pbk1lc3NhZ2UuTW9kdWxlQ29uZmlnVHlwZUgAEj4KGmdldF9tb2R1bGVfY29uZmlnX3Jlc3BvbnNlGAggASgLMhgubWVzaHRhc3RpYy5Nb2R1bGVDb25maWdIABI0CipnZXRfY2FubmVkX21lc3NhZ2VfbW9kdWxlX21lc3NhZ2VzX3JlcXVlc3QYCiABKAhIABI1CitnZXRfY2FubmVkX21lc3NhZ2VfbW9kdWxlX21lc3NhZ2VzX3Jlc3BvbnNlGAsgASgJSAASJQobZ2V0X2RldmljZV9tZXRhZGF0YV9yZXF1ZXN0GAwgASgISAASQgocZ2V0X2RldmljZV9tZXRhZGF0YV9yZXNwb25zZRgNIAEoCzIaLm1lc2h0YXN0aWMuRGV2aWNlTWV0YWRhdGFIABIeChRnZXRfcmluZ3RvbmVfcmVxdWVzdBgOIAEoCEgAEh8KFWdldF9yaW5ndG9uZV9yZXNwb25zZRgPIAEoCUgAEi4KJGdldF9kZXZpY2VfY29ubmVjdGlvbl9zdGF0dXNfcmVxdWVzdBgQIAEoCEgAElMKJWdldF9kZXZpY2VfY29ubmVjdGlvbl9zdGF0dXNfcmVzcG9uc2UYESABKAsyIi5tZXNodGFzdGljLkRldmljZUNvbm5lY3Rpb25TdGF0dXNIABIxCgxzZXRfaGFtX21vZGUYEiABKAsyGS5tZXNodGFzdGljLkhhbVBhcmFtZXRlcnNIABIvCiVnZXRfbm9kZV9yZW1vdGVfaGFyZHdhcmVfcGluc19yZXF1ZXN0GBMgASgISAASXAomZ2V0X25vZGVfcmVtb3RlX2hhcmR3YXJlX3BpbnNfcmVzcG9uc2UYFCABKAsyKi5tZXNodGFzdGljLk5vZGVSZW1vdGVIYXJkd2FyZVBpbnNSZXNwb25zZUgAEiAKFmVudGVyX2RmdV9tb2RlX3JlcXVlc3QYFSABKAhIABIdChNkZWxldGVfZmlsZV9yZXF1ZXN0GBYgASgJSAASEwoJc2V0X3NjYWxlGBcgASgNSAASJQoJc2V0X293bmVyGCAgASgLMhAubWVzaHRhc3RpYy5Vc2VySAASKgoLc2V0X2NoYW5uZWwYISABKAsyEy5tZXNodGFzdGljLkNoYW5uZWxIABIoCgpzZXRfY29uZmlnGCIgASgLMhIubWVzaHRhc3RpYy5Db25maWdIABI1ChFzZXRfbW9kdWxlX2NvbmZpZxgjIAEoCzIYLm1lc2h0YXN0aWMuTW9kdWxlQ29uZmlnSAASLAoic2V0X2Nhbm5lZF9tZXNzYWdlX21vZHVsZV9tZXNzYWdlcxgkIAEoCUgAEh4KFHNldF9yaW5ndG9uZV9tZXNzYWdlGCUgASgJSAASGwoRcmVtb3ZlX2J5X25vZGVudW0YJiABKA1IABIbChFzZXRfZmF2b3JpdGVfbm9kZRgnIAEoDUgAEh4KFHJlbW92ZV9mYXZvcml0ZV9ub2RlGCggASgNSAASMgoSc2V0X2ZpeGVkX3Bvc2l0aW9uGCkgASgLMhQubWVzaHRhc3RpYy5Qb3NpdGlvbkgAEh8KFXJlbW92ZV9maXhlZF9wb3NpdGlvbhgqIAEoCEgAEhcKDXNldF90aW1lX29ubHkYKyABKAdIABIfChVnZXRfdWlfY29uZmlnX3JlcXVlc3QYLCABKAhIABI8ChZnZXRfdWlfY29uZmlnX3Jlc3BvbnNlGC0gASgLMhoubWVzaHRhc3RpYy5EZXZpY2VVSUNvbmZpZ0gAEjUKD3N0b3JlX3VpX2NvbmZpZxguIAEoCzIaLm1lc2h0YXN0aWMuRGV2aWNlVUlDb25maWdIABIdChNiZWdpbl9lZGl0X3NldHRpbmdzGEAgASgISAASHgoUY29tbWl0X2VkaXRfc2V0dGluZ3MYQSABKAhIABIeChRmYWN0b3J5X3Jlc2V0X2RldmljZRheIAEoBUgAEhwKEnJlYm9vdF9vdGFfc2Vjb25kcxhfIAEoBUgAEhgKDmV4aXRfc2ltdWxhdG9yGGAgASgISAASGAoOcmVib290X3NlY29uZHMYYSABKAVIABIaChBzaHV0ZG93bl9zZWNvbmRzGGIgASgFSAASHgoUZmFjdG9yeV9yZXNldF9jb25maWcYYyABKAVIABIWCgxub2RlZGJfcmVzZXQYZCABKAVIACLWAQoKQ29uZmlnVHlwZRIRCg1ERVZJQ0VfQ09ORklHEAASEwoPUE9TSVRJT05fQ09ORklHEAESEAoMUE9XRVJfQ09ORklHEAISEgoOTkVUV09SS19DT05GSUcQAxISCg5ESVNQTEFZX0NPTkZJRxAEEg8KC0xPUkFfQ09ORklHEAUSFAoQQkxVRVRPT1RIX0NPTkZJRxAGEhMKD1NFQ1VSSVRZX0NPTkZJRxAHEhUKEVNFU1NJT05LRVlfQ09ORklHEAgSEwoPREVWSUNFVUlfQ09ORklHEAkiuwIKEE1vZHVsZUNvbmZpZ1R5cGUSDwoLTVFUVF9DT05GSUcQABIRCg1TRVJJQUxfQ09ORklHEAESEwoPRVhUTk9USUZfQ09ORklHEAISFwoTU1RPUkVGT1JXQVJEX0NPTkZJRxADEhQKEFJBTkdFVEVTVF9DT05GSUcQBBIUChBURUxFTUVUUllfQ09ORklHEAUSFAoQQ0FOTkVETVNHX0NPTkZJRxAGEhAKDEFVRElPX0NPTkZJRxAHEhkKFVJFTU9URUhBUkRXQVJFX0NPTkZJRxAIEhcKE05FSUdIQk9SSU5GT19DT05GSUcQCRIaChZBTUJJRU5UTElHSFRJTkdfQ09ORklHEAoSGgoWREVURUNUSU9OU0VOU09SX0NPTkZJRxALEhUKEVBBWENPVU5URVJfQ09ORklHEAxCEQoPcGF5bG9hZF92YXJpYW50IlsKDUhhbVBhcmFtZXRlcnMSEQoJY2FsbF9zaWduGAEgASgJEhAKCHR4X3Bvd2VyGAIgASgFEhEKCWZyZXF1ZW5jeRgDIAEoAhISCgpzaG9ydF9uYW1lGAQgASgJImYKHk5vZGVSZW1vdGVIYXJkd2FyZVBpbnNSZXNwb25zZRJEChlub2RlX3JlbW90ZV9oYXJkd2FyZV9waW5zGAEgAygLMiEubWVzaHRhc3RpYy5Ob2RlUmVtb3RlSGFyZHdhcmVQaW5CYAoTY29tLmdlZWtzdmlsbGUubWVzaEILQWRtaW5Qcm90b3NaImdpdGh1Yi5jb20vbWVzaHRhc3RpYy9nby9nZW5lcmF0ZWSqAhRNZXNodGFzdGljLlByb3RvYnVmc7oCAGIGcHJvdG8z\", [file_channel, file_config, file_connection_status, file_mesh, file_module_config, file_device_ui]);\n\n/**\n *\n * This message is handled by the Admin module and is responsible for all settings/channel read/write operations.\n * This message is used to do settings operations to both remote AND local nodes.\n * (Prior to 1.2 these operations were done via special ToRadio operations)\n *\n * @generated from message meshtastic.AdminMessage\n */\nexport type AdminMessage = Message<\"meshtastic.AdminMessage\"> & {\n  /**\n   *\n   * The node generates this key and sends it with any get_x_response packets.\n   * The client MUST include the same key with any set_x commands. Key expires after 300 seconds.\n   * Prevents replay attacks for admin messages.\n   *\n   * @generated from field: bytes session_passkey = 101;\n   */\n  sessionPasskey: Uint8Array;\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from oneof meshtastic.AdminMessage.payload_variant\n   */\n  payloadVariant: {\n    /**\n     *\n     * Send the specified channel in the response to this message\n     * NOTE: This field is sent with the channel index + 1 (to ensure we never try to send 'zero' - which protobufs treats as not present)\n     *\n     * @generated from field: uint32 get_channel_request = 1;\n     */\n    value: number;\n    case: \"getChannelRequest\";\n  } | {\n    /**\n     *\n     * TODO: REPLACE\n     *\n     * @generated from field: meshtastic.Channel get_channel_response = 2;\n     */\n    value: Channel;\n    case: \"getChannelResponse\";\n  } | {\n    /**\n     *\n     * Send the current owner data in the response to this message.\n     *\n     * @generated from field: bool get_owner_request = 3;\n     */\n    value: boolean;\n    case: \"getOwnerRequest\";\n  } | {\n    /**\n     *\n     * TODO: REPLACE\n     *\n     * @generated from field: meshtastic.User get_owner_response = 4;\n     */\n    value: User;\n    case: \"getOwnerResponse\";\n  } | {\n    /**\n     *\n     * Ask for the following config data to be sent\n     *\n     * @generated from field: meshtastic.AdminMessage.ConfigType get_config_request = 5;\n     */\n    value: AdminMessage_ConfigType;\n    case: \"getConfigRequest\";\n  } | {\n    /**\n     *\n     * Send the current Config in the response to this message.\n     *\n     * @generated from field: meshtastic.Config get_config_response = 6;\n     */\n    value: Config;\n    case: \"getConfigResponse\";\n  } | {\n    /**\n     *\n     * Ask for the following config data to be sent\n     *\n     * @generated from field: meshtastic.AdminMessage.ModuleConfigType get_module_config_request = 7;\n     */\n    value: AdminMessage_ModuleConfigType;\n    case: \"getModuleConfigRequest\";\n  } | {\n    /**\n     *\n     * Send the current Config in the response to this message.\n     *\n     * @generated from field: meshtastic.ModuleConfig get_module_config_response = 8;\n     */\n    value: ModuleConfig;\n    case: \"getModuleConfigResponse\";\n  } | {\n    /**\n     *\n     * Get the Canned Message Module messages in the response to this message.\n     *\n     * @generated from field: bool get_canned_message_module_messages_request = 10;\n     */\n    value: boolean;\n    case: \"getCannedMessageModuleMessagesRequest\";\n  } | {\n    /**\n     *\n     * Get the Canned Message Module messages in the response to this message.\n     *\n     * @generated from field: string get_canned_message_module_messages_response = 11;\n     */\n    value: string;\n    case: \"getCannedMessageModuleMessagesResponse\";\n  } | {\n    /**\n     *\n     * Request the node to send device metadata (firmware, protobuf version, etc)\n     *\n     * @generated from field: bool get_device_metadata_request = 12;\n     */\n    value: boolean;\n    case: \"getDeviceMetadataRequest\";\n  } | {\n    /**\n     *\n     * Device metadata response\n     *\n     * @generated from field: meshtastic.DeviceMetadata get_device_metadata_response = 13;\n     */\n    value: DeviceMetadata;\n    case: \"getDeviceMetadataResponse\";\n  } | {\n    /**\n     *\n     * Get the Ringtone in the response to this message.\n     *\n     * @generated from field: bool get_ringtone_request = 14;\n     */\n    value: boolean;\n    case: \"getRingtoneRequest\";\n  } | {\n    /**\n     *\n     * Get the Ringtone in the response to this message.\n     *\n     * @generated from field: string get_ringtone_response = 15;\n     */\n    value: string;\n    case: \"getRingtoneResponse\";\n  } | {\n    /**\n     *\n     * Request the node to send it's connection status\n     *\n     * @generated from field: bool get_device_connection_status_request = 16;\n     */\n    value: boolean;\n    case: \"getDeviceConnectionStatusRequest\";\n  } | {\n    /**\n     *\n     * Device connection status response\n     *\n     * @generated from field: meshtastic.DeviceConnectionStatus get_device_connection_status_response = 17;\n     */\n    value: DeviceConnectionStatus;\n    case: \"getDeviceConnectionStatusResponse\";\n  } | {\n    /**\n     *\n     * Setup a node for licensed amateur (ham) radio operation\n     *\n     * @generated from field: meshtastic.HamParameters set_ham_mode = 18;\n     */\n    value: HamParameters;\n    case: \"setHamMode\";\n  } | {\n    /**\n     *\n     * Get the mesh's nodes with their available gpio pins for RemoteHardware module use\n     *\n     * @generated from field: bool get_node_remote_hardware_pins_request = 19;\n     */\n    value: boolean;\n    case: \"getNodeRemoteHardwarePinsRequest\";\n  } | {\n    /**\n     *\n     * Respond with the mesh's nodes with their available gpio pins for RemoteHardware module use\n     *\n     * @generated from field: meshtastic.NodeRemoteHardwarePinsResponse get_node_remote_hardware_pins_response = 20;\n     */\n    value: NodeRemoteHardwarePinsResponse;\n    case: \"getNodeRemoteHardwarePinsResponse\";\n  } | {\n    /**\n     *\n     * Enter (UF2) DFU mode\n     * Only implemented on NRF52 currently\n     *\n     * @generated from field: bool enter_dfu_mode_request = 21;\n     */\n    value: boolean;\n    case: \"enterDfuModeRequest\";\n  } | {\n    /**\n     *\n     * Delete the file by the specified path from the device\n     *\n     * @generated from field: string delete_file_request = 22;\n     */\n    value: string;\n    case: \"deleteFileRequest\";\n  } | {\n    /**\n     *\n     * Set zero and offset for scale chips\n     *\n     * @generated from field: uint32 set_scale = 23;\n     */\n    value: number;\n    case: \"setScale\";\n  } | {\n    /**\n     *\n     * Set the owner for this node\n     *\n     * @generated from field: meshtastic.User set_owner = 32;\n     */\n    value: User;\n    case: \"setOwner\";\n  } | {\n    /**\n     *\n     * Set channels (using the new API).\n     * A special channel is the \"primary channel\".\n     * The other records are secondary channels.\n     * Note: only one channel can be marked as primary.\n     * If the client sets a particular channel to be primary, the previous channel will be set to SECONDARY automatically.\n     *\n     * @generated from field: meshtastic.Channel set_channel = 33;\n     */\n    value: Channel;\n    case: \"setChannel\";\n  } | {\n    /**\n     *\n     * Set the current Config\n     *\n     * @generated from field: meshtastic.Config set_config = 34;\n     */\n    value: Config;\n    case: \"setConfig\";\n  } | {\n    /**\n     *\n     * Set the current Config\n     *\n     * @generated from field: meshtastic.ModuleConfig set_module_config = 35;\n     */\n    value: ModuleConfig;\n    case: \"setModuleConfig\";\n  } | {\n    /**\n     *\n     * Set the Canned Message Module messages text.\n     *\n     * @generated from field: string set_canned_message_module_messages = 36;\n     */\n    value: string;\n    case: \"setCannedMessageModuleMessages\";\n  } | {\n    /**\n     *\n     * Set the ringtone for ExternalNotification.\n     *\n     * @generated from field: string set_ringtone_message = 37;\n     */\n    value: string;\n    case: \"setRingtoneMessage\";\n  } | {\n    /**\n     *\n     * Remove the node by the specified node-num from the NodeDB on the device\n     *\n     * @generated from field: uint32 remove_by_nodenum = 38;\n     */\n    value: number;\n    case: \"removeByNodenum\";\n  } | {\n    /**\n     *\n     * Set specified node-num to be favorited on the NodeDB on the device\n     *\n     * @generated from field: uint32 set_favorite_node = 39;\n     */\n    value: number;\n    case: \"setFavoriteNode\";\n  } | {\n    /**\n     *\n     * Set specified node-num to be un-favorited on the NodeDB on the device\n     *\n     * @generated from field: uint32 remove_favorite_node = 40;\n     */\n    value: number;\n    case: \"removeFavoriteNode\";\n  } | {\n    /**\n     *\n     * Set fixed position data on the node and then set the position.fixed_position = true\n     *\n     * @generated from field: meshtastic.Position set_fixed_position = 41;\n     */\n    value: Position;\n    case: \"setFixedPosition\";\n  } | {\n    /**\n     *\n     * Clear fixed position coordinates and then set position.fixed_position = false\n     *\n     * @generated from field: bool remove_fixed_position = 42;\n     */\n    value: boolean;\n    case: \"removeFixedPosition\";\n  } | {\n    /**\n     *\n     * Set time only on the node\n     * Convenience method to set the time on the node (as Net quality) without any other position data\n     *\n     * @generated from field: fixed32 set_time_only = 43;\n     */\n    value: number;\n    case: \"setTimeOnly\";\n  } | {\n    /**\n     *\n     * Tell the node to send the stored ui data.\n     *\n     * @generated from field: bool get_ui_config_request = 44;\n     */\n    value: boolean;\n    case: \"getUiConfigRequest\";\n  } | {\n    /**\n     *\n     * Reply stored device ui data.\n     *\n     * @generated from field: meshtastic.DeviceUIConfig get_ui_config_response = 45;\n     */\n    value: DeviceUIConfig;\n    case: \"getUiConfigResponse\";\n  } | {\n    /**\n     *\n     * Tell the node to store UI data persistently.\n     *\n     * @generated from field: meshtastic.DeviceUIConfig store_ui_config = 46;\n     */\n    value: DeviceUIConfig;\n    case: \"storeUiConfig\";\n  } | {\n    /**\n     *\n     * Begins an edit transaction for config, module config, owner, and channel settings changes\n     * This will delay the standard *implicit* save to the file system and subsequent reboot behavior until committed (commit_edit_settings)\n     *\n     * @generated from field: bool begin_edit_settings = 64;\n     */\n    value: boolean;\n    case: \"beginEditSettings\";\n  } | {\n    /**\n     *\n     * Commits an open transaction for any edits made to config, module config, owner, and channel settings\n     *\n     * @generated from field: bool commit_edit_settings = 65;\n     */\n    value: boolean;\n    case: \"commitEditSettings\";\n  } | {\n    /**\n     *\n     * Tell the node to factory reset config everything; all device state and configuration will be returned to factory defaults and BLE bonds will be cleared.\n     *\n     * @generated from field: int32 factory_reset_device = 94;\n     */\n    value: number;\n    case: \"factoryResetDevice\";\n  } | {\n    /**\n     *\n     * Tell the node to reboot into the OTA Firmware in this many seconds (or <0 to cancel reboot)\n     * Only Implemented for ESP32 Devices. This needs to be issued to send a new main firmware via bluetooth.\n     *\n     * @generated from field: int32 reboot_ota_seconds = 95;\n     */\n    value: number;\n    case: \"rebootOtaSeconds\";\n  } | {\n    /**\n     *\n     * This message is only supported for the simulator Portduino build.\n     * If received the simulator will exit successfully.\n     *\n     * @generated from field: bool exit_simulator = 96;\n     */\n    value: boolean;\n    case: \"exitSimulator\";\n  } | {\n    /**\n     *\n     * Tell the node to reboot in this many seconds (or <0 to cancel reboot)\n     *\n     * @generated from field: int32 reboot_seconds = 97;\n     */\n    value: number;\n    case: \"rebootSeconds\";\n  } | {\n    /**\n     *\n     * Tell the node to shutdown in this many seconds (or <0 to cancel shutdown)\n     *\n     * @generated from field: int32 shutdown_seconds = 98;\n     */\n    value: number;\n    case: \"shutdownSeconds\";\n  } | {\n    /**\n     *\n     * Tell the node to factory reset config; all device state and configuration will be returned to factory defaults; BLE bonds will be preserved.\n     *\n     * @generated from field: int32 factory_reset_config = 99;\n     */\n    value: number;\n    case: \"factoryResetConfig\";\n  } | {\n    /**\n     *\n     * Tell the node to reset the nodedb.\n     *\n     * @generated from field: int32 nodedb_reset = 100;\n     */\n    value: number;\n    case: \"nodedbReset\";\n  } | { case: undefined; value?: undefined };\n};\n\n/**\n * Describes the message meshtastic.AdminMessage.\n * Use `create(AdminMessageSchema)` to create a new message.\n */\nexport const AdminMessageSchema: GenMessage<AdminMessage> = /*@__PURE__*/\n  messageDesc(file_admin, 0);\n\n/**\n *\n * TODO: REPLACE\n *\n * @generated from enum meshtastic.AdminMessage.ConfigType\n */\nexport enum AdminMessage_ConfigType {\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: DEVICE_CONFIG = 0;\n   */\n  DEVICE_CONFIG = 0,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: POSITION_CONFIG = 1;\n   */\n  POSITION_CONFIG = 1,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: POWER_CONFIG = 2;\n   */\n  POWER_CONFIG = 2,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: NETWORK_CONFIG = 3;\n   */\n  NETWORK_CONFIG = 3,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: DISPLAY_CONFIG = 4;\n   */\n  DISPLAY_CONFIG = 4,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: LORA_CONFIG = 5;\n   */\n  LORA_CONFIG = 5,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: BLUETOOTH_CONFIG = 6;\n   */\n  BLUETOOTH_CONFIG = 6,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: SECURITY_CONFIG = 7;\n   */\n  SECURITY_CONFIG = 7,\n\n  /**\n   *\n   *\n   *\n   * @generated from enum value: SESSIONKEY_CONFIG = 8;\n   */\n  SESSIONKEY_CONFIG = 8,\n\n  /**\n   *\n   * device-ui config\n   *\n   * @generated from enum value: DEVICEUI_CONFIG = 9;\n   */\n  DEVICEUI_CONFIG = 9,\n}\n\n/**\n * Describes the enum meshtastic.AdminMessage.ConfigType.\n */\nexport const AdminMessage_ConfigTypeSchema: GenEnum<AdminMessage_ConfigType> = /*@__PURE__*/\n  enumDesc(file_admin, 0, 0);\n\n/**\n *\n * TODO: REPLACE\n *\n * @generated from enum meshtastic.AdminMessage.ModuleConfigType\n */\nexport enum AdminMessage_ModuleConfigType {\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: MQTT_CONFIG = 0;\n   */\n  MQTT_CONFIG = 0,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: SERIAL_CONFIG = 1;\n   */\n  SERIAL_CONFIG = 1,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: EXTNOTIF_CONFIG = 2;\n   */\n  EXTNOTIF_CONFIG = 2,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: STOREFORWARD_CONFIG = 3;\n   */\n  STOREFORWARD_CONFIG = 3,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: RANGETEST_CONFIG = 4;\n   */\n  RANGETEST_CONFIG = 4,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: TELEMETRY_CONFIG = 5;\n   */\n  TELEMETRY_CONFIG = 5,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: CANNEDMSG_CONFIG = 6;\n   */\n  CANNEDMSG_CONFIG = 6,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: AUDIO_CONFIG = 7;\n   */\n  AUDIO_CONFIG = 7,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: REMOTEHARDWARE_CONFIG = 8;\n   */\n  REMOTEHARDWARE_CONFIG = 8,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: NEIGHBORINFO_CONFIG = 9;\n   */\n  NEIGHBORINFO_CONFIG = 9,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: AMBIENTLIGHTING_CONFIG = 10;\n   */\n  AMBIENTLIGHTING_CONFIG = 10,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: DETECTIONSENSOR_CONFIG = 11;\n   */\n  DETECTIONSENSOR_CONFIG = 11,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: PAXCOUNTER_CONFIG = 12;\n   */\n  PAXCOUNTER_CONFIG = 12,\n}\n\n/**\n * Describes the enum meshtastic.AdminMessage.ModuleConfigType.\n */\nexport const AdminMessage_ModuleConfigTypeSchema: GenEnum<AdminMessage_ModuleConfigType> = /*@__PURE__*/\n  enumDesc(file_admin, 0, 1);\n\n/**\n *\n * Parameters for setting up Meshtastic for ameteur radio usage\n *\n * @generated from message meshtastic.HamParameters\n */\nexport type HamParameters = Message<\"meshtastic.HamParameters\"> & {\n  /**\n   *\n   * Amateur radio call sign, eg. KD2ABC\n   *\n   * @generated from field: string call_sign = 1;\n   */\n  callSign: string;\n\n  /**\n   *\n   * Transmit power in dBm at the LoRA transceiver, not including any amplification\n   *\n   * @generated from field: int32 tx_power = 2;\n   */\n  txPower: number;\n\n  /**\n   *\n   * The selected frequency of LoRA operation\n   * Please respect your local laws, regulations, and band plans.\n   * Ensure your radio is capable of operating of the selected frequency before setting this.\n   *\n   * @generated from field: float frequency = 3;\n   */\n  frequency: number;\n\n  /**\n   *\n   * Optional short name of user\n   *\n   * @generated from field: string short_name = 4;\n   */\n  shortName: string;\n};\n\n/**\n * Describes the message meshtastic.HamParameters.\n * Use `create(HamParametersSchema)` to create a new message.\n */\nexport const HamParametersSchema: GenMessage<HamParameters> = /*@__PURE__*/\n  messageDesc(file_admin, 1);\n\n/**\n *\n * Response envelope for node_remote_hardware_pins\n *\n * @generated from message meshtastic.NodeRemoteHardwarePinsResponse\n */\nexport type NodeRemoteHardwarePinsResponse = Message<\"meshtastic.NodeRemoteHardwarePinsResponse\"> & {\n  /**\n   *\n   * Nodes and their respective remote hardware GPIO pins\n   *\n   * @generated from field: repeated meshtastic.NodeRemoteHardwarePin node_remote_hardware_pins = 1;\n   */\n  nodeRemoteHardwarePins: NodeRemoteHardwarePin[];\n};\n\n/**\n * Describes the message meshtastic.NodeRemoteHardwarePinsResponse.\n * Use `create(NodeRemoteHardwarePinsResponseSchema)` to create a new message.\n */\nexport const NodeRemoteHardwarePinsResponseSchema: GenMessage<NodeRemoteHardwarePinsResponse> = /*@__PURE__*/\n  messageDesc(file_admin, 2);\n\n","// @generated by protoc-gen-es v2.1.0 with parameter \"target=ts\"\n// @generated from file channel.proto (package meshtastic, syntax proto3)\n/* eslint-disable */\n\nimport type { GenEnum, GenFile, GenMessage } from \"@bufbuild/protobuf/codegenv1\";\nimport { enumDesc, fileDesc, messageDesc } from \"@bufbuild/protobuf/codegenv1\";\nimport type { Message } from \"npm:@bufbuild/protobuf@^2.1.0\";\n\n/**\n * Describes the file channel.proto.\n */\nexport const file_channel: GenFile = /*@__PURE__*/\n  fileDesc(\"Cg1jaGFubmVsLnByb3RvEgptZXNodGFzdGljIrgBCg9DaGFubmVsU2V0dGluZ3MSFwoLY2hhbm5lbF9udW0YASABKA1CAhgBEgsKA3BzaxgCIAEoDBIMCgRuYW1lGAMgASgJEgoKAmlkGAQgASgHEhYKDnVwbGlua19lbmFibGVkGAUgASgIEhgKEGRvd25saW5rX2VuYWJsZWQYBiABKAgSMwoPbW9kdWxlX3NldHRpbmdzGAcgASgLMhoubWVzaHRhc3RpYy5Nb2R1bGVTZXR0aW5ncyJFCg5Nb2R1bGVTZXR0aW5ncxIaChJwb3NpdGlvbl9wcmVjaXNpb24YASABKA0SFwoPaXNfY2xpZW50X211dGVkGAIgASgIIqEBCgdDaGFubmVsEg0KBWluZGV4GAEgASgFEi0KCHNldHRpbmdzGAIgASgLMhsubWVzaHRhc3RpYy5DaGFubmVsU2V0dGluZ3MSJgoEcm9sZRgDIAEoDjIYLm1lc2h0YXN0aWMuQ2hhbm5lbC5Sb2xlIjAKBFJvbGUSDAoIRElTQUJMRUQQABILCgdQUklNQVJZEAESDQoJU0VDT05EQVJZEAJCYgoTY29tLmdlZWtzdmlsbGUubWVzaEINQ2hhbm5lbFByb3Rvc1oiZ2l0aHViLmNvbS9tZXNodGFzdGljL2dvL2dlbmVyYXRlZKoCFE1lc2h0YXN0aWMuUHJvdG9idWZzugIAYgZwcm90bzM\");\n\n/**\n *\n * This information can be encoded as a QRcode/url so that other users can configure\n * their radio to join the same channel.\n * A note about how channel names are shown to users: channelname-X\n * poundsymbol is a prefix used to indicate this is a channel name (idea from @professr).\n * Where X is a letter from A-Z (base 26) representing a hash of the PSK for this\n * channel - so that if the user changes anything about the channel (which does\n * force a new PSK) this letter will also change. Thus preventing user confusion if\n * two friends try to type in a channel name of \"BobsChan\" and then can't talk\n * because their PSKs will be different.\n * The PSK is hashed into this letter by \"0x41 + [xor all bytes of the psk ] modulo 26\"\n * This also allows the option of someday if people have the PSK off (zero), the\n * users COULD type in a channel name and be able to talk.\n * FIXME: Add description of multi-channel support and how primary vs secondary channels are used.\n * FIXME: explain how apps use channels for security.\n * explain how remote settings and remote gpio are managed as an example\n *\n * @generated from message meshtastic.ChannelSettings\n */\nexport type ChannelSettings = Message<\"meshtastic.ChannelSettings\"> & {\n  /**\n   *\n   * Deprecated in favor of LoraConfig.channel_num\n   *\n   * @generated from field: uint32 channel_num = 1 [deprecated = true];\n   * @deprecated\n   */\n  channelNum: number;\n\n  /**\n   *\n   * A simple pre-shared key for now for crypto.\n   * Must be either 0 bytes (no crypto), 16 bytes (AES128), or 32 bytes (AES256).\n   * A special shorthand is used for 1 byte long psks.\n   * These psks should be treated as only minimally secure,\n   * because they are listed in this source code.\n   * Those bytes are mapped using the following scheme:\n   * `0` = No crypto\n   * `1` = The special \"default\" channel key: {0xd4, 0xf1, 0xbb, 0x3a, 0x20, 0x29, 0x07, 0x59, 0xf0, 0xbc, 0xff, 0xab, 0xcf, 0x4e, 0x69, 0x01}\n   * `2` through 10 = The default channel key, except with 1 through 9 added to the last byte.\n   * Shown to user as simple1 through 10\n   *\n   * @generated from field: bytes psk = 2;\n   */\n  psk: Uint8Array;\n\n  /**\n   *\n   * A SHORT name that will be packed into the URL.\n   * Less than 12 bytes.\n   * Something for end users to call the channel\n   * If this is the empty string it is assumed that this channel\n   * is the special (minimally secure) \"Default\"channel.\n   * In user interfaces it should be rendered as a local language translation of \"X\".\n   * For channel_num hashing empty string will be treated as \"X\".\n   * Where \"X\" is selected based on the English words listed above for ModemPreset\n   *\n   * @generated from field: string name = 3;\n   */\n  name: string;\n\n  /**\n   *\n   * Used to construct a globally unique channel ID.\n   * The full globally unique ID will be: \"name.id\" where ID is shown as base36.\n   * Assuming that the number of meshtastic users is below 20K (true for a long time)\n   * the chance of this 64 bit random number colliding with anyone else is super low.\n   * And the penalty for collision is low as well, it just means that anyone trying to decrypt channel messages might need to\n   * try multiple candidate channels.\n   * Any time a non wire compatible change is made to a channel, this field should be regenerated.\n   * There are a small number of 'special' globally known (and fairly) insecure standard channels.\n   * Those channels do not have a numeric id included in the settings, but instead it is pulled from\n   * a table of well known IDs.\n   * (see Well Known Channels FIXME)\n   *\n   * @generated from field: fixed32 id = 4;\n   */\n  id: number;\n\n  /**\n   *\n   * If true, messages on the mesh will be sent to the *public* internet by any gateway ndoe\n   *\n   * @generated from field: bool uplink_enabled = 5;\n   */\n  uplinkEnabled: boolean;\n\n  /**\n   *\n   * If true, messages seen on the internet will be forwarded to the local mesh.\n   *\n   * @generated from field: bool downlink_enabled = 6;\n   */\n  downlinkEnabled: boolean;\n\n  /**\n   *\n   * Per-channel module settings.\n   *\n   * @generated from field: meshtastic.ModuleSettings module_settings = 7;\n   */\n  moduleSettings?: ModuleSettings;\n};\n\n/**\n * Describes the message meshtastic.ChannelSettings.\n * Use `create(ChannelSettingsSchema)` to create a new message.\n */\nexport const ChannelSettingsSchema: GenMessage<ChannelSettings> = /*@__PURE__*/\n  messageDesc(file_channel, 0);\n\n/**\n *\n * This message is specifically for modules to store per-channel configuration data.\n *\n * @generated from message meshtastic.ModuleSettings\n */\nexport type ModuleSettings = Message<\"meshtastic.ModuleSettings\"> & {\n  /**\n   *\n   * Bits of precision for the location sent in position packets.\n   *\n   * @generated from field: uint32 position_precision = 1;\n   */\n  positionPrecision: number;\n\n  /**\n   *\n   * Controls whether or not the phone / clients should mute the current channel\n   * Useful for noisy public channels you don't necessarily want to disable\n   *\n   * @generated from field: bool is_client_muted = 2;\n   */\n  isClientMuted: boolean;\n};\n\n/**\n * Describes the message meshtastic.ModuleSettings.\n * Use `create(ModuleSettingsSchema)` to create a new message.\n */\nexport const ModuleSettingsSchema: GenMessage<ModuleSettings> = /*@__PURE__*/\n  messageDesc(file_channel, 1);\n\n/**\n *\n * A pair of a channel number, mode and the (sharable) settings for that channel\n *\n * @generated from message meshtastic.Channel\n */\nexport type Channel = Message<\"meshtastic.Channel\"> & {\n  /**\n   *\n   * The index of this channel in the channel table (from 0 to MAX_NUM_CHANNELS-1)\n   * (Someday - not currently implemented) An index of -1 could be used to mean \"set by name\",\n   * in which case the target node will find and set the channel by settings.name.\n   *\n   * @generated from field: int32 index = 1;\n   */\n  index: number;\n\n  /**\n   *\n   * The new settings, or NULL to disable that channel\n   *\n   * @generated from field: meshtastic.ChannelSettings settings = 2;\n   */\n  settings?: ChannelSettings;\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from field: meshtastic.Channel.Role role = 3;\n   */\n  role: Channel_Role;\n};\n\n/**\n * Describes the message meshtastic.Channel.\n * Use `create(ChannelSchema)` to create a new message.\n */\nexport const ChannelSchema: GenMessage<Channel> = /*@__PURE__*/\n  messageDesc(file_channel, 2);\n\n/**\n *\n * How this channel is being used (or not).\n * Note: this field is an enum to give us options for the future.\n * In particular, someday we might make a 'SCANNING' option.\n * SCANNING channels could have different frequencies and the radio would\n * occasionally check that freq to see if anything is being transmitted.\n * For devices that have multiple physical radios attached, we could keep multiple PRIMARY/SCANNING channels active at once to allow\n * cross band routing as needed.\n * If a device has only a single radio (the common case) only one channel can be PRIMARY at a time\n * (but any number of SECONDARY channels can't be sent received on that common frequency)\n *\n * @generated from enum meshtastic.Channel.Role\n */\nexport enum Channel_Role {\n  /**\n   *\n   * This channel is not in use right now\n   *\n   * @generated from enum value: DISABLED = 0;\n   */\n  DISABLED = 0,\n\n  /**\n   *\n   * This channel is used to set the frequency for the radio - all other enabled channels must be SECONDARY\n   *\n   * @generated from enum value: PRIMARY = 1;\n   */\n  PRIMARY = 1,\n\n  /**\n   *\n   * Secondary channels are only used for encryption/decryption/authentication purposes.\n   * Their radio settings (freq etc) are ignored, only psk is used.\n   *\n   * @generated from enum value: SECONDARY = 2;\n   */\n  SECONDARY = 2,\n}\n\n/**\n * Describes the enum meshtastic.Channel.Role.\n */\nexport const Channel_RoleSchema: GenEnum<Channel_Role> = /*@__PURE__*/\n  enumDesc(file_channel, 2, 0);\n\n","// @generated by protoc-gen-es v2.1.0 with parameter \"target=ts\"\n// @generated from file config.proto (package meshtastic, syntax proto3)\n/* eslint-disable */\n\nimport type { GenEnum, GenFile, GenMessage } from \"@bufbuild/protobuf/codegenv1\";\nimport { enumDesc, fileDesc, messageDesc } from \"@bufbuild/protobuf/codegenv1\";\nimport type { DeviceUIConfig } from \"./device_ui_pb.js\";\nimport { file_device_ui } from \"./device_ui_pb.js\";\nimport type { Message } from \"npm:@bufbuild/protobuf@^2.1.0\";\n\n/**\n * Describes the file config.proto.\n */\nexport const file_config: GenFile = /*@__PURE__*/\n  fileDesc(\"Cgxjb25maWcucHJvdG8SCm1lc2h0YXN0aWMi2yUKBkNvbmZpZxIxCgZkZXZpY2UYASABKAsyHy5tZXNodGFzdGljLkNvbmZpZy5EZXZpY2VDb25maWdIABI1Cghwb3NpdGlvbhgCIAEoCzIhLm1lc2h0YXN0aWMuQ29uZmlnLlBvc2l0aW9uQ29uZmlnSAASLwoFcG93ZXIYAyABKAsyHi5tZXNodGFzdGljLkNvbmZpZy5Qb3dlckNvbmZpZ0gAEjMKB25ldHdvcmsYBCABKAsyIC5tZXNodGFzdGljLkNvbmZpZy5OZXR3b3JrQ29uZmlnSAASMwoHZGlzcGxheRgFIAEoCzIgLm1lc2h0YXN0aWMuQ29uZmlnLkRpc3BsYXlDb25maWdIABItCgRsb3JhGAYgASgLMh0ubWVzaHRhc3RpYy5Db25maWcuTG9SYUNvbmZpZ0gAEjcKCWJsdWV0b290aBgHIAEoCzIiLm1lc2h0YXN0aWMuQ29uZmlnLkJsdWV0b290aENvbmZpZ0gAEjUKCHNlY3VyaXR5GAggASgLMiEubWVzaHRhc3RpYy5Db25maWcuU2VjdXJpdHlDb25maWdIABI5CgpzZXNzaW9ua2V5GAkgASgLMiMubWVzaHRhc3RpYy5Db25maWcuU2Vzc2lvbmtleUNvbmZpZ0gAEi8KCWRldmljZV91aRgKIAEoCzIaLm1lc2h0YXN0aWMuRGV2aWNlVUlDb25maWdIABqkBQoMRGV2aWNlQ29uZmlnEjIKBHJvbGUYASABKA4yJC5tZXNodGFzdGljLkNvbmZpZy5EZXZpY2VDb25maWcuUm9sZRIaCg5zZXJpYWxfZW5hYmxlZBgCIAEoCEICGAESEwoLYnV0dG9uX2dwaW8YBCABKA0SEwoLYnV6emVyX2dwaW8YBSABKA0SSQoQcmVicm9hZGNhc3RfbW9kZRgGIAEoDjIvLm1lc2h0YXN0aWMuQ29uZmlnLkRldmljZUNvbmZpZy5SZWJyb2FkY2FzdE1vZGUSIAoYbm9kZV9pbmZvX2Jyb2FkY2FzdF9zZWNzGAcgASgNEiIKGmRvdWJsZV90YXBfYXNfYnV0dG9uX3ByZXNzGAggASgIEhYKCmlzX21hbmFnZWQYCSABKAhCAhgBEhwKFGRpc2FibGVfdHJpcGxlX2NsaWNrGAogASgIEg0KBXR6ZGVmGAsgASgJEh4KFmxlZF9oZWFydGJlYXRfZGlzYWJsZWQYDCABKAgirgEKBFJvbGUSCgoGQ0xJRU5UEAASDwoLQ0xJRU5UX01VVEUQARIKCgZST1VURVIQAhIVCg1ST1VURVJfQ0xJRU5UEAMaAggBEgwKCFJFUEVBVEVSEAQSCwoHVFJBQ0tFUhAFEgoKBlNFTlNPUhAGEgcKA1RBSxAHEhEKDUNMSUVOVF9ISURERU4QCBISCg5MT1NUX0FORF9GT1VORBAJEg8KC1RBS19UUkFDS0VSEAoicwoPUmVicm9hZGNhc3RNb2RlEgcKA0FMTBAAEhUKEUFMTF9TS0lQX0RFQ09ESU5HEAESDgoKTE9DQUxfT05MWRACEg4KCktOT1dOX09OTFkQAxIICgROT05FEAQSFgoSQ09SRV9QT1JUTlVNU19PTkxZEAUakQUKDlBvc2l0aW9uQ29uZmlnEh8KF3Bvc2l0aW9uX2Jyb2FkY2FzdF9zZWNzGAEgASgNEigKIHBvc2l0aW9uX2Jyb2FkY2FzdF9zbWFydF9lbmFibGVkGAIgASgIEhYKDmZpeGVkX3Bvc2l0aW9uGAMgASgIEhcKC2dwc19lbmFibGVkGAQgASgIQgIYARIbChNncHNfdXBkYXRlX2ludGVydmFsGAUgASgNEhwKEGdwc19hdHRlbXB0X3RpbWUYBiABKA1CAhgBEhYKDnBvc2l0aW9uX2ZsYWdzGAcgASgNEg8KB3J4X2dwaW8YCCABKA0SDwoHdHhfZ3BpbxgJIAEoDRIoCiBicm9hZGNhc3Rfc21hcnRfbWluaW11bV9kaXN0YW5jZRgKIAEoDRItCiVicm9hZGNhc3Rfc21hcnRfbWluaW11bV9pbnRlcnZhbF9zZWNzGAsgASgNEhMKC2dwc19lbl9ncGlvGAwgASgNEjsKCGdwc19tb2RlGA0gASgOMikubWVzaHRhc3RpYy5Db25maWcuUG9zaXRpb25Db25maWcuR3BzTW9kZSKrAQoNUG9zaXRpb25GbGFncxIJCgVVTlNFVBAAEgwKCEFMVElUVURFEAESEAoMQUxUSVRVREVfTVNMEAISFgoSR0VPSURBTF9TRVBBUkFUSU9OEAQSBwoDRE9QEAgSCQoFSFZET1AQEBINCglTQVRJTlZJRVcQIBIKCgZTRVFfTk8QQBIOCglUSU1FU1RBTVAQgAESDAoHSEVBRElORxCAAhIKCgVTUEVFRBCABCI1CgdHcHNNb2RlEgwKCERJU0FCTEVEEAASCwoHRU5BQkxFRBABEg8KC05PVF9QUkVTRU5UEAIahAIKC1Bvd2VyQ29uZmlnEhcKD2lzX3Bvd2VyX3NhdmluZxgBIAEoCBImCh5vbl9iYXR0ZXJ5X3NodXRkb3duX2FmdGVyX3NlY3MYAiABKA0SHwoXYWRjX211bHRpcGxpZXJfb3ZlcnJpZGUYAyABKAISGwoTd2FpdF9ibHVldG9vdGhfc2VjcxgEIAEoDRIQCghzZHNfc2VjcxgGIAEoDRIPCgdsc19zZWNzGAcgASgNEhUKDW1pbl93YWtlX3NlY3MYCCABKA0SIgoaZGV2aWNlX2JhdHRlcnlfaW5hX2FkZHJlc3MYCSABKA0SGAoQcG93ZXJtb25fZW5hYmxlcxggIAEoBBr+AgoNTmV0d29ya0NvbmZpZxIUCgx3aWZpX2VuYWJsZWQYASABKAgSEQoJd2lmaV9zc2lkGAMgASgJEhAKCHdpZmlfcHNrGAQgASgJEhIKCm50cF9zZXJ2ZXIYBSABKAkSEwoLZXRoX2VuYWJsZWQYBiABKAgSQgoMYWRkcmVzc19tb2RlGAcgASgOMiwubWVzaHRhc3RpYy5Db25maWcuTmV0d29ya0NvbmZpZy5BZGRyZXNzTW9kZRJACgtpcHY0X2NvbmZpZxgIIAEoCzIrLm1lc2h0YXN0aWMuQ29uZmlnLk5ldHdvcmtDb25maWcuSXBWNENvbmZpZxIWCg5yc3lzbG9nX3NlcnZlchgJIAEoCRpGCgpJcFY0Q29uZmlnEgoKAmlwGAEgASgHEg8KB2dhdGV3YXkYAiABKAcSDgoGc3VibmV0GAMgASgHEgsKA2RucxgEIAEoByIjCgtBZGRyZXNzTW9kZRIICgRESENQEAASCgoGU1RBVElDEAEazQcKDURpc3BsYXlDb25maWcSFgoOc2NyZWVuX29uX3NlY3MYASABKA0SSAoKZ3BzX2Zvcm1hdBgCIAEoDjI0Lm1lc2h0YXN0aWMuQ29uZmlnLkRpc3BsYXlDb25maWcuR3BzQ29vcmRpbmF0ZUZvcm1hdBIhChlhdXRvX3NjcmVlbl9jYXJvdXNlbF9zZWNzGAMgASgNEhkKEWNvbXBhc3Nfbm9ydGhfdG9wGAQgASgIEhMKC2ZsaXBfc2NyZWVuGAUgASgIEjwKBXVuaXRzGAYgASgOMi0ubWVzaHRhc3RpYy5Db25maWcuRGlzcGxheUNvbmZpZy5EaXNwbGF5VW5pdHMSNwoEb2xlZBgHIAEoDjIpLm1lc2h0YXN0aWMuQ29uZmlnLkRpc3BsYXlDb25maWcuT2xlZFR5cGUSQQoLZGlzcGxheW1vZGUYCCABKA4yLC5tZXNodGFzdGljLkNvbmZpZy5EaXNwbGF5Q29uZmlnLkRpc3BsYXlNb2RlEhQKDGhlYWRpbmdfYm9sZBgJIAEoCBIdChV3YWtlX29uX3RhcF9vcl9tb3Rpb24YCiABKAgSUAoTY29tcGFzc19vcmllbnRhdGlvbhgLIAEoDjIzLm1lc2h0YXN0aWMuQ29uZmlnLkRpc3BsYXlDb25maWcuQ29tcGFzc09yaWVudGF0aW9uIk0KE0dwc0Nvb3JkaW5hdGVGb3JtYXQSBwoDREVDEAASBwoDRE1TEAESBwoDVVRNEAISCAoETUdSUxADEgcKA09MQxAEEggKBE9TR1IQBSIoCgxEaXNwbGF5VW5pdHMSCgoGTUVUUklDEAASDAoISU1QRVJJQUwQASJNCghPbGVkVHlwZRINCglPTEVEX0FVVE8QABIQCgxPTEVEX1NTRDEzMDYQARIPCgtPTEVEX1NIMTEwNhACEg8KC09MRURfU0gxMTA3EAMiQQoLRGlzcGxheU1vZGUSCwoHREVGQVVMVBAAEgwKCFRXT0NPTE9SEAESDAoISU5WRVJURUQQAhIJCgVDT0xPUhADIroBChJDb21wYXNzT3JpZW50YXRpb24SDQoJREVHUkVFU18wEAASDgoKREVHUkVFU185MBABEg8KC0RFR1JFRVNfMTgwEAISDwoLREVHUkVFU18yNzAQAxIWChJERUdSRUVTXzBfSU5WRVJURUQQBBIXChNERUdSRUVTXzkwX0lOVkVSVEVEEAUSGAoUREVHUkVFU18xODBfSU5WRVJURUQQBhIYChRERUdSRUVTXzI3MF9JTlZFUlRFRBAHGp0HCgpMb1JhQ29uZmlnEhIKCnVzZV9wcmVzZXQYASABKAgSPwoMbW9kZW1fcHJlc2V0GAIgASgOMikubWVzaHRhc3RpYy5Db25maWcuTG9SYUNvbmZpZy5Nb2RlbVByZXNldBIRCgliYW5kd2lkdGgYAyABKA0SFQoNc3ByZWFkX2ZhY3RvchgEIAEoDRITCgtjb2RpbmdfcmF0ZRgFIAEoDRIYChBmcmVxdWVuY3lfb2Zmc2V0GAYgASgCEjgKBnJlZ2lvbhgHIAEoDjIoLm1lc2h0YXN0aWMuQ29uZmlnLkxvUmFDb25maWcuUmVnaW9uQ29kZRIRCglob3BfbGltaXQYCCABKA0SEgoKdHhfZW5hYmxlZBgJIAEoCBIQCgh0eF9wb3dlchgKIAEoBRITCgtjaGFubmVsX251bRgLIAEoDRIbChNvdmVycmlkZV9kdXR5X2N5Y2xlGAwgASgIEh4KFnN4MTI2eF9yeF9ib29zdGVkX2dhaW4YDSABKAgSGgoSb3ZlcnJpZGVfZnJlcXVlbmN5GA4gASgCEhcKD3BhX2Zhbl9kaXNhYmxlZBgPIAEoCBIXCg9pZ25vcmVfaW5jb21pbmcYZyADKA0SEwoLaWdub3JlX21xdHQYaCABKAgSGQoRY29uZmlnX29rX3RvX21xdHQYaSABKAgi8QEKClJlZ2lvbkNvZGUSCQoFVU5TRVQQABIGCgJVUxABEgoKBkVVXzQzMxACEgoKBkVVXzg2OBADEgYKAkNOEAQSBgoCSlAQBRIHCgNBTloQBhIGCgJLUhAHEgYKAlRXEAgSBgoCUlUQCRIGCgJJThAKEgoKBk5aXzg2NRALEgYKAlRIEAwSCwoHTE9SQV8yNBANEgoKBlVBXzQzMxAOEgoKBlVBXzg2OBAPEgoKBk1ZXzQzMxAQEgoKBk1ZXzkxORAREgoKBlNHXzkyMxASEgoKBlBIXzQzMxATEgoKBlBIXzg2OBAUEgoKBlBIXzkxNRAVIqkBCgtNb2RlbVByZXNldBINCglMT05HX0ZBU1QQABINCglMT05HX1NMT1cQARIWCg5WRVJZX0xPTkdfU0xPVxACGgIIARIPCgtNRURJVU1fU0xPVxADEg8KC01FRElVTV9GQVNUEAQSDgoKU0hPUlRfU0xPVxAFEg4KClNIT1JUX0ZBU1QQBhIRCg1MT05HX01PREVSQVRFEAcSDwoLU0hPUlRfVFVSQk8QCBqtAQoPQmx1ZXRvb3RoQ29uZmlnEg8KB2VuYWJsZWQYASABKAgSPAoEbW9kZRgCIAEoDjIuLm1lc2h0YXN0aWMuQ29uZmlnLkJsdWV0b290aENvbmZpZy5QYWlyaW5nTW9kZRIRCglmaXhlZF9waW4YAyABKA0iOAoLUGFpcmluZ01vZGUSDgoKUkFORE9NX1BJThAAEg0KCUZJWEVEX1BJThABEgoKBk5PX1BJThACGrYBCg5TZWN1cml0eUNvbmZpZxISCgpwdWJsaWNfa2V5GAEgASgMEhMKC3ByaXZhdGVfa2V5GAIgASgMEhEKCWFkbWluX2tleRgDIAMoDBISCgppc19tYW5hZ2VkGAQgASgIEhYKDnNlcmlhbF9lbmFibGVkGAUgASgIEh0KFWRlYnVnX2xvZ19hcGlfZW5hYmxlZBgGIAEoCBIdChVhZG1pbl9jaGFubmVsX2VuYWJsZWQYCCABKAgaEgoQU2Vzc2lvbmtleUNvbmZpZ0IRCg9wYXlsb2FkX3ZhcmlhbnRCYQoTY29tLmdlZWtzdmlsbGUubWVzaEIMQ29uZmlnUHJvdG9zWiJnaXRodWIuY29tL21lc2h0YXN0aWMvZ28vZ2VuZXJhdGVkqgIUTWVzaHRhc3RpYy5Qcm90b2J1ZnO6AgBiBnByb3RvMw\", [file_device_ui]);\n\n/**\n * @generated from message meshtastic.Config\n */\nexport type Config = Message<\"meshtastic.Config\"> & {\n  /**\n   *\n   * Payload Variant\n   *\n   * @generated from oneof meshtastic.Config.payload_variant\n   */\n  payloadVariant: {\n    /**\n     * @generated from field: meshtastic.Config.DeviceConfig device = 1;\n     */\n    value: Config_DeviceConfig;\n    case: \"device\";\n  } | {\n    /**\n     * @generated from field: meshtastic.Config.PositionConfig position = 2;\n     */\n    value: Config_PositionConfig;\n    case: \"position\";\n  } | {\n    /**\n     * @generated from field: meshtastic.Config.PowerConfig power = 3;\n     */\n    value: Config_PowerConfig;\n    case: \"power\";\n  } | {\n    /**\n     * @generated from field: meshtastic.Config.NetworkConfig network = 4;\n     */\n    value: Config_NetworkConfig;\n    case: \"network\";\n  } | {\n    /**\n     * @generated from field: meshtastic.Config.DisplayConfig display = 5;\n     */\n    value: Config_DisplayConfig;\n    case: \"display\";\n  } | {\n    /**\n     * @generated from field: meshtastic.Config.LoRaConfig lora = 6;\n     */\n    value: Config_LoRaConfig;\n    case: \"lora\";\n  } | {\n    /**\n     * @generated from field: meshtastic.Config.BluetoothConfig bluetooth = 7;\n     */\n    value: Config_BluetoothConfig;\n    case: \"bluetooth\";\n  } | {\n    /**\n     * @generated from field: meshtastic.Config.SecurityConfig security = 8;\n     */\n    value: Config_SecurityConfig;\n    case: \"security\";\n  } | {\n    /**\n     * @generated from field: meshtastic.Config.SessionkeyConfig sessionkey = 9;\n     */\n    value: Config_SessionkeyConfig;\n    case: \"sessionkey\";\n  } | {\n    /**\n     * @generated from field: meshtastic.DeviceUIConfig device_ui = 10;\n     */\n    value: DeviceUIConfig;\n    case: \"deviceUi\";\n  } | { case: undefined; value?: undefined };\n};\n\n/**\n * Describes the message meshtastic.Config.\n * Use `create(ConfigSchema)` to create a new message.\n */\nexport const ConfigSchema: GenMessage<Config> = /*@__PURE__*/\n  messageDesc(file_config, 0);\n\n/**\n *\n * Configuration\n *\n * @generated from message meshtastic.Config.DeviceConfig\n */\nexport type Config_DeviceConfig = Message<\"meshtastic.Config.DeviceConfig\"> & {\n  /**\n   *\n   * Sets the role of node\n   *\n   * @generated from field: meshtastic.Config.DeviceConfig.Role role = 1;\n   */\n  role: Config_DeviceConfig_Role;\n\n  /**\n   *\n   * Disabling this will disable the SerialConsole by not initilizing the StreamAPI\n   * Moved to SecurityConfig\n   *\n   * @generated from field: bool serial_enabled = 2 [deprecated = true];\n   * @deprecated\n   */\n  serialEnabled: boolean;\n\n  /**\n   *\n   * For boards without a hard wired button, this is the pin number that will be used\n   * Boards that have more than one button can swap the function with this one. defaults to BUTTON_PIN if defined.\n   *\n   * @generated from field: uint32 button_gpio = 4;\n   */\n  buttonGpio: number;\n\n  /**\n   *\n   * For boards without a PWM buzzer, this is the pin number that will be used\n   * Defaults to PIN_BUZZER if defined.\n   *\n   * @generated from field: uint32 buzzer_gpio = 5;\n   */\n  buzzerGpio: number;\n\n  /**\n   *\n   * Sets the role of node\n   *\n   * @generated from field: meshtastic.Config.DeviceConfig.RebroadcastMode rebroadcast_mode = 6;\n   */\n  rebroadcastMode: Config_DeviceConfig_RebroadcastMode;\n\n  /**\n   *\n   * Send our nodeinfo this often\n   * Defaults to 900 Seconds (15 minutes)\n   *\n   * @generated from field: uint32 node_info_broadcast_secs = 7;\n   */\n  nodeInfoBroadcastSecs: number;\n\n  /**\n   *\n   * Treat double tap interrupt on supported accelerometers as a button press if set to true\n   *\n   * @generated from field: bool double_tap_as_button_press = 8;\n   */\n  doubleTapAsButtonPress: boolean;\n\n  /**\n   *\n   * If true, device is considered to be \"managed\" by a mesh administrator\n   * Clients should then limit available configuration and administrative options inside the user interface\n   * Moved to SecurityConfig\n   *\n   * @generated from field: bool is_managed = 9 [deprecated = true];\n   * @deprecated\n   */\n  isManaged: boolean;\n\n  /**\n   *\n   * Disables the triple-press of user button to enable or disable GPS\n   *\n   * @generated from field: bool disable_triple_click = 10;\n   */\n  disableTripleClick: boolean;\n\n  /**\n   *\n   * POSIX Timezone definition string from https://github.com/nayarsystems/posix_tz_db/blob/master/zones.csv.\n   *\n   * @generated from field: string tzdef = 11;\n   */\n  tzdef: string;\n\n  /**\n   *\n   * If true, disable the default blinking LED (LED_PIN) behavior on the device \n   *\n   * @generated from field: bool led_heartbeat_disabled = 12;\n   */\n  ledHeartbeatDisabled: boolean;\n};\n\n/**\n * Describes the message meshtastic.Config.DeviceConfig.\n * Use `create(Config_DeviceConfigSchema)` to create a new message.\n */\nexport const Config_DeviceConfigSchema: GenMessage<Config_DeviceConfig> = /*@__PURE__*/\n  messageDesc(file_config, 0, 0);\n\n/**\n *\n * Defines the device's role on the Mesh network\n *\n * @generated from enum meshtastic.Config.DeviceConfig.Role\n */\nexport enum Config_DeviceConfig_Role {\n  /**\n   *\n   * Description: App connected or stand alone messaging device.\n   * Technical Details: Default Role\n   *\n   * @generated from enum value: CLIENT = 0;\n   */\n  CLIENT = 0,\n\n  /**\n   *\n   *  Description: Device that does not forward packets from other devices.\n   *\n   * @generated from enum value: CLIENT_MUTE = 1;\n   */\n  CLIENT_MUTE = 1,\n\n  /**\n   *\n   * Description: Infrastructure node for extending network coverage by relaying messages. Visible in Nodes list.\n   * Technical Details: Mesh packets will prefer to be routed over this node. This node will not be used by client apps.\n   *   The wifi radio and the oled screen will be put to sleep.\n   *   This mode may still potentially have higher power usage due to it's preference in message rebroadcasting on the mesh.\n   *\n   * @generated from enum value: ROUTER = 2;\n   */\n  ROUTER = 2,\n\n  /**\n   * @generated from enum value: ROUTER_CLIENT = 3 [deprecated = true];\n   * @deprecated\n   */\n  ROUTER_CLIENT = 3,\n\n  /**\n   *\n   * Description: Infrastructure node for extending network coverage by relaying messages with minimal overhead. Not visible in Nodes list.\n   * Technical Details: Mesh packets will simply be rebroadcasted over this node. Nodes configured with this role will not originate NodeInfo, Position, Telemetry\n   *   or any other packet type. They will simply rebroadcast any mesh packets on the same frequency, channel num, spread factor, and coding rate.\n   *\n   * @generated from enum value: REPEATER = 4;\n   */\n  REPEATER = 4,\n\n  /**\n   *\n   * Description: Broadcasts GPS position packets as priority.\n   * Technical Details: Position Mesh packets will be prioritized higher and sent more frequently by default.\n   *   When used in conjunction with power.is_power_saving = true, nodes will wake up,\n   *   send position, and then sleep for position.position_broadcast_secs seconds.\n   *\n   * @generated from enum value: TRACKER = 5;\n   */\n  TRACKER = 5,\n\n  /**\n   *\n   * Description: Broadcasts telemetry packets as priority.\n   * Technical Details: Telemetry Mesh packets will be prioritized higher and sent more frequently by default.\n   *   When used in conjunction with power.is_power_saving = true, nodes will wake up,\n   *   send environment telemetry, and then sleep for telemetry.environment_update_interval seconds.\n   *\n   * @generated from enum value: SENSOR = 6;\n   */\n  SENSOR = 6,\n\n  /**\n   *\n   * Description: Optimized for ATAK system communication and reduces routine broadcasts.\n   * Technical Details: Used for nodes dedicated for connection to an ATAK EUD.\n   *    Turns off many of the routine broadcasts to favor CoT packet stream\n   *    from the Meshtastic ATAK plugin -> IMeshService -> Node\n   *\n   * @generated from enum value: TAK = 7;\n   */\n  TAK = 7,\n\n  /**\n   *\n   * Description: Device that only broadcasts as needed for stealth or power savings.\n   * Technical Details: Used for nodes that \"only speak when spoken to\"\n   *    Turns all of the routine broadcasts but allows for ad-hoc communication\n   *    Still rebroadcasts, but with local only rebroadcast mode (known meshes only)\n   *    Can be used for clandestine operation or to dramatically reduce airtime / power consumption\n   *\n   * @generated from enum value: CLIENT_HIDDEN = 8;\n   */\n  CLIENT_HIDDEN = 8,\n\n  /**\n   *\n   * Description: Broadcasts location as message to default channel regularly for to assist with device recovery.\n   * Technical Details: Used to automatically send a text message to the mesh\n   *    with the current position of the device on a frequent interval:\n   *    \"I'm lost! Position: lat / long\"\n   *\n   * @generated from enum value: LOST_AND_FOUND = 9;\n   */\n  LOST_AND_FOUND = 9,\n\n  /**\n   *\n   * Description: Enables automatic TAK PLI broadcasts and reduces routine broadcasts.\n   * Technical Details: Turns off many of the routine broadcasts to favor ATAK CoT packet stream\n   *    and automatic TAK PLI (position location information) broadcasts.\n   *    Uses position module configuration to determine TAK PLI broadcast interval.\n   *\n   * @generated from enum value: TAK_TRACKER = 10;\n   */\n  TAK_TRACKER = 10,\n}\n\n/**\n * Describes the enum meshtastic.Config.DeviceConfig.Role.\n */\nexport const Config_DeviceConfig_RoleSchema: GenEnum<Config_DeviceConfig_Role> = /*@__PURE__*/\n  enumDesc(file_config, 0, 0, 0);\n\n/**\n *\n * Defines the device's behavior for how messages are rebroadcast\n *\n * @generated from enum meshtastic.Config.DeviceConfig.RebroadcastMode\n */\nexport enum Config_DeviceConfig_RebroadcastMode {\n  /**\n   *\n   * Default behavior.\n   * Rebroadcast any observed message, if it was on our private channel or from another mesh with the same lora params.\n   *\n   * @generated from enum value: ALL = 0;\n   */\n  ALL = 0,\n\n  /**\n   *\n   * Same as behavior as ALL but skips packet decoding and simply rebroadcasts them.\n   * Only available in Repeater role. Setting this on any other roles will result in ALL behavior.\n   *\n   * @generated from enum value: ALL_SKIP_DECODING = 1;\n   */\n  ALL_SKIP_DECODING = 1,\n\n  /**\n   *\n   * Ignores observed messages from foreign meshes that are open or those which it cannot decrypt.\n   * Only rebroadcasts message on the nodes local primary / secondary channels.\n   *\n   * @generated from enum value: LOCAL_ONLY = 2;\n   */\n  LOCAL_ONLY = 2,\n\n  /**\n   *\n   * Ignores observed messages from foreign meshes like LOCAL_ONLY,\n   * but takes it step further by also ignoring messages from nodenums not in the node's known list (NodeDB)\n   *\n   * @generated from enum value: KNOWN_ONLY = 3;\n   */\n  KNOWN_ONLY = 3,\n\n  /**\n   *\n   * Only permitted for SENSOR, TRACKER and TAK_TRACKER roles, this will inhibit all rebroadcasts, not unlike CLIENT_MUTE role.\n   *\n   * @generated from enum value: NONE = 4;\n   */\n  NONE = 4,\n\n  /**\n   *\n   * Ignores packets from non-standard portnums such as: TAK, RangeTest, PaxCounter, etc.\n   * Only rebroadcasts packets with standard portnums: NodeInfo, Text, Position, Telemetry, and Routing.\n   *\n   * @generated from enum value: CORE_PORTNUMS_ONLY = 5;\n   */\n  CORE_PORTNUMS_ONLY = 5,\n}\n\n/**\n * Describes the enum meshtastic.Config.DeviceConfig.RebroadcastMode.\n */\nexport const Config_DeviceConfig_RebroadcastModeSchema: GenEnum<Config_DeviceConfig_RebroadcastMode> = /*@__PURE__*/\n  enumDesc(file_config, 0, 0, 1);\n\n/**\n *\n * Position Config\n *\n * @generated from message meshtastic.Config.PositionConfig\n */\nexport type Config_PositionConfig = Message<\"meshtastic.Config.PositionConfig\"> & {\n  /**\n   *\n   * We should send our position this often (but only if it has changed significantly)\n   * Defaults to 15 minutes\n   *\n   * @generated from field: uint32 position_broadcast_secs = 1;\n   */\n  positionBroadcastSecs: number;\n\n  /**\n   *\n   * Adaptive position braoadcast, which is now the default.\n   *\n   * @generated from field: bool position_broadcast_smart_enabled = 2;\n   */\n  positionBroadcastSmartEnabled: boolean;\n\n  /**\n   *\n   * If set, this node is at a fixed position.\n   * We will generate GPS position updates at the regular interval, but use whatever the last lat/lon/alt we have for the node.\n   * The lat/lon/alt can be set by an internal GPS or with the help of the app.\n   *\n   * @generated from field: bool fixed_position = 3;\n   */\n  fixedPosition: boolean;\n\n  /**\n   *\n   * Is GPS enabled for this node?\n   *\n   * @generated from field: bool gps_enabled = 4 [deprecated = true];\n   * @deprecated\n   */\n  gpsEnabled: boolean;\n\n  /**\n   *\n   * How often should we try to get GPS position (in seconds)\n   * or zero for the default of once every 30 seconds\n   * or a very large value (maxint) to update only once at boot.\n   *\n   * @generated from field: uint32 gps_update_interval = 5;\n   */\n  gpsUpdateInterval: number;\n\n  /**\n   *\n   * Deprecated in favor of using smart / regular broadcast intervals as implicit attempt time\n   *\n   * @generated from field: uint32 gps_attempt_time = 6 [deprecated = true];\n   * @deprecated\n   */\n  gpsAttemptTime: number;\n\n  /**\n   *\n   * Bit field of boolean configuration options for POSITION messages\n   * (bitwise OR of PositionFlags)\n   *\n   * @generated from field: uint32 position_flags = 7;\n   */\n  positionFlags: number;\n\n  /**\n   *\n   * (Re)define GPS_RX_PIN for your board.\n   *\n   * @generated from field: uint32 rx_gpio = 8;\n   */\n  rxGpio: number;\n\n  /**\n   *\n   * (Re)define GPS_TX_PIN for your board.\n   *\n   * @generated from field: uint32 tx_gpio = 9;\n   */\n  txGpio: number;\n\n  /**\n   *\n   * The minimum distance in meters traveled (since the last send) before we can send a position to the mesh if position_broadcast_smart_enabled\n   *\n   * @generated from field: uint32 broadcast_smart_minimum_distance = 10;\n   */\n  broadcastSmartMinimumDistance: number;\n\n  /**\n   *\n   * The minimum number of seconds (since the last send) before we can send a position to the mesh if position_broadcast_smart_enabled\n   *\n   * @generated from field: uint32 broadcast_smart_minimum_interval_secs = 11;\n   */\n  broadcastSmartMinimumIntervalSecs: number;\n\n  /**\n   *\n   * (Re)define PIN_GPS_EN for your board.\n   *\n   * @generated from field: uint32 gps_en_gpio = 12;\n   */\n  gpsEnGpio: number;\n\n  /**\n   *\n   * Set where GPS is enabled, disabled, or not present\n   *\n   * @generated from field: meshtastic.Config.PositionConfig.GpsMode gps_mode = 13;\n   */\n  gpsMode: Config_PositionConfig_GpsMode;\n};\n\n/**\n * Describes the message meshtastic.Config.PositionConfig.\n * Use `create(Config_PositionConfigSchema)` to create a new message.\n */\nexport const Config_PositionConfigSchema: GenMessage<Config_PositionConfig> = /*@__PURE__*/\n  messageDesc(file_config, 0, 1);\n\n/**\n *\n * Bit field of boolean configuration options, indicating which optional\n * fields to include when assembling POSITION messages.\n * Longitude, latitude, altitude, speed, heading, and DOP\n * are always included (also time if GPS-synced)\n * NOTE: the more fields are included, the larger the message will be -\n *   leading to longer airtime and a higher risk of packet loss\n *\n * @generated from enum meshtastic.Config.PositionConfig.PositionFlags\n */\nexport enum Config_PositionConfig_PositionFlags {\n  /**\n   *\n   * Required for compilation\n   *\n   * @generated from enum value: UNSET = 0;\n   */\n  UNSET = 0,\n\n  /**\n   *\n   * Include an altitude value (if available)\n   *\n   * @generated from enum value: ALTITUDE = 1;\n   */\n  ALTITUDE = 1,\n\n  /**\n   *\n   * Altitude value is MSL\n   *\n   * @generated from enum value: ALTITUDE_MSL = 2;\n   */\n  ALTITUDE_MSL = 2,\n\n  /**\n   *\n   * Include geoidal separation\n   *\n   * @generated from enum value: GEOIDAL_SEPARATION = 4;\n   */\n  GEOIDAL_SEPARATION = 4,\n\n  /**\n   *\n   * Include the DOP value ; PDOP used by default, see below\n   *\n   * @generated from enum value: DOP = 8;\n   */\n  DOP = 8,\n\n  /**\n   *\n   * If POS_DOP set, send separate HDOP / VDOP values instead of PDOP\n   *\n   * @generated from enum value: HVDOP = 16;\n   */\n  HVDOP = 16,\n\n  /**\n   *\n   * Include number of \"satellites in view\"\n   *\n   * @generated from enum value: SATINVIEW = 32;\n   */\n  SATINVIEW = 32,\n\n  /**\n   *\n   * Include a sequence number incremented per packet\n   *\n   * @generated from enum value: SEQ_NO = 64;\n   */\n  SEQ_NO = 64,\n\n  /**\n   *\n   * Include positional timestamp (from GPS solution)\n   *\n   * @generated from enum value: TIMESTAMP = 128;\n   */\n  TIMESTAMP = 128,\n\n  /**\n   *\n   * Include positional heading\n   * Intended for use with vehicle not walking speeds\n   * walking speeds are likely to be error prone like the compass\n   *\n   * @generated from enum value: HEADING = 256;\n   */\n  HEADING = 256,\n\n  /**\n   *\n   * Include positional speed\n   * Intended for use with vehicle not walking speeds\n   * walking speeds are likely to be error prone like the compass\n   *\n   * @generated from enum value: SPEED = 512;\n   */\n  SPEED = 512,\n}\n\n/**\n * Describes the enum meshtastic.Config.PositionConfig.PositionFlags.\n */\nexport const Config_PositionConfig_PositionFlagsSchema: GenEnum<Config_PositionConfig_PositionFlags> = /*@__PURE__*/\n  enumDesc(file_config, 0, 1, 0);\n\n/**\n * @generated from enum meshtastic.Config.PositionConfig.GpsMode\n */\nexport enum Config_PositionConfig_GpsMode {\n  /**\n   *\n   * GPS is present but disabled\n   *\n   * @generated from enum value: DISABLED = 0;\n   */\n  DISABLED = 0,\n\n  /**\n   *\n   * GPS is present and enabled\n   *\n   * @generated from enum value: ENABLED = 1;\n   */\n  ENABLED = 1,\n\n  /**\n   *\n   * GPS is not present on the device\n   *\n   * @generated from enum value: NOT_PRESENT = 2;\n   */\n  NOT_PRESENT = 2,\n}\n\n/**\n * Describes the enum meshtastic.Config.PositionConfig.GpsMode.\n */\nexport const Config_PositionConfig_GpsModeSchema: GenEnum<Config_PositionConfig_GpsMode> = /*@__PURE__*/\n  enumDesc(file_config, 0, 1, 1);\n\n/**\n *\n * Power Config\\\n * See [Power Config](/docs/settings/config/power) for additional power config details.\n *\n * @generated from message meshtastic.Config.PowerConfig\n */\nexport type Config_PowerConfig = Message<\"meshtastic.Config.PowerConfig\"> & {\n  /**\n   *\n   * Description: Will sleep everything as much as possible, for the tracker and sensor role this will also include the lora radio. \n   * Don't use this setting if you want to use your device with the phone apps or are using a device without a user button.\n   * Technical Details: Works for ESP32 devices and NRF52 devices in the Sensor or Tracker roles\n   *\n   * @generated from field: bool is_power_saving = 1;\n   */\n  isPowerSaving: boolean;\n\n  /**\n   *\n   *  Description: If non-zero, the device will fully power off this many seconds after external power is removed.\n   *\n   * @generated from field: uint32 on_battery_shutdown_after_secs = 2;\n   */\n  onBatteryShutdownAfterSecs: number;\n\n  /**\n   *\n   * Ratio of voltage divider for battery pin eg. 3.20 (R1=100k, R2=220k)\n   * Overrides the ADC_MULTIPLIER defined in variant for battery voltage calculation.\n   * https://meshtastic.org/docs/configuration/radio/power/#adc-multiplier-override\n   * Should be set to floating point value between 2 and 6\n   *\n   * @generated from field: float adc_multiplier_override = 3;\n   */\n  adcMultiplierOverride: number;\n\n  /**\n   *\n   *  Description: The number of seconds for to wait before turning off BLE in No Bluetooth states\n   *  Technical Details: ESP32 Only 0 for default of 1 minute\n   *\n   * @generated from field: uint32 wait_bluetooth_secs = 4;\n   */\n  waitBluetoothSecs: number;\n\n  /**\n   *\n   * Super Deep Sleep Seconds\n   * While in Light Sleep if mesh_sds_timeout_secs is exceeded we will lower into super deep sleep\n   * for this value (default 1 year) or a button press\n   * 0 for default of one year\n   *\n   * @generated from field: uint32 sds_secs = 6;\n   */\n  sdsSecs: number;\n\n  /**\n   *\n   * Description: In light sleep the CPU is suspended, LoRa radio is on, BLE is off an GPS is on\n   * Technical Details: ESP32 Only 0 for default of 300\n   *\n   * @generated from field: uint32 ls_secs = 7;\n   */\n  lsSecs: number;\n\n  /**\n   *\n   * Description: While in light sleep when we receive packets on the LoRa radio we will wake and handle them and stay awake in no BLE mode for this value\n   * Technical Details: ESP32 Only 0 for default of 10 seconds\n   *\n   * @generated from field: uint32 min_wake_secs = 8;\n   */\n  minWakeSecs: number;\n\n  /**\n   *\n   * I2C address of INA_2XX to use for reading device battery voltage\n   *\n   * @generated from field: uint32 device_battery_ina_address = 9;\n   */\n  deviceBatteryInaAddress: number;\n\n  /**\n   *\n   * If non-zero, we want powermon log outputs.  With the particular (bitfield) sources enabled.\n   * Note: we picked an ID of 32 so that lower more efficient IDs can be used for more frequently used options.\n   *\n   * @generated from field: uint64 powermon_enables = 32;\n   */\n  powermonEnables: bigint;\n};\n\n/**\n * Describes the message meshtastic.Config.PowerConfig.\n * Use `create(Config_PowerConfigSchema)` to create a new message.\n */\nexport const Config_PowerConfigSchema: GenMessage<Config_PowerConfig> = /*@__PURE__*/\n  messageDesc(file_config, 0, 2);\n\n/**\n *\n * Network Config\n *\n * @generated from message meshtastic.Config.NetworkConfig\n */\nexport type Config_NetworkConfig = Message<\"meshtastic.Config.NetworkConfig\"> & {\n  /**\n   *\n   * Enable WiFi (disables Bluetooth)\n   *\n   * @generated from field: bool wifi_enabled = 1;\n   */\n  wifiEnabled: boolean;\n\n  /**\n   *\n   * If set, this node will try to join the specified wifi network and\n   * acquire an address via DHCP\n   *\n   * @generated from field: string wifi_ssid = 3;\n   */\n  wifiSsid: string;\n\n  /**\n   *\n   * If set, will be use to authenticate to the named wifi\n   *\n   * @generated from field: string wifi_psk = 4;\n   */\n  wifiPsk: string;\n\n  /**\n   *\n   * NTP server to use if WiFi is conneced, defaults to `0.pool.ntp.org`\n   *\n   * @generated from field: string ntp_server = 5;\n   */\n  ntpServer: string;\n\n  /**\n   *\n   * Enable Ethernet\n   *\n   * @generated from field: bool eth_enabled = 6;\n   */\n  ethEnabled: boolean;\n\n  /**\n   *\n   * acquire an address via DHCP or assign static\n   *\n   * @generated from field: meshtastic.Config.NetworkConfig.AddressMode address_mode = 7;\n   */\n  addressMode: Config_NetworkConfig_AddressMode;\n\n  /**\n   *\n   * struct to keep static address\n   *\n   * @generated from field: meshtastic.Config.NetworkConfig.IpV4Config ipv4_config = 8;\n   */\n  ipv4Config?: Config_NetworkConfig_IpV4Config;\n\n  /**\n   *\n   * rsyslog Server and Port\n   *\n   * @generated from field: string rsyslog_server = 9;\n   */\n  rsyslogServer: string;\n};\n\n/**\n * Describes the message meshtastic.Config.NetworkConfig.\n * Use `create(Config_NetworkConfigSchema)` to create a new message.\n */\nexport const Config_NetworkConfigSchema: GenMessage<Config_NetworkConfig> = /*@__PURE__*/\n  messageDesc(file_config, 0, 3);\n\n/**\n * @generated from message meshtastic.Config.NetworkConfig.IpV4Config\n */\nexport type Config_NetworkConfig_IpV4Config = Message<\"meshtastic.Config.NetworkConfig.IpV4Config\"> & {\n  /**\n   *\n   * Static IP address\n   *\n   * @generated from field: fixed32 ip = 1;\n   */\n  ip: number;\n\n  /**\n   *\n   * Static gateway address\n   *\n   * @generated from field: fixed32 gateway = 2;\n   */\n  gateway: number;\n\n  /**\n   *\n   * Static subnet mask\n   *\n   * @generated from field: fixed32 subnet = 3;\n   */\n  subnet: number;\n\n  /**\n   *\n   * Static DNS server address\n   *\n   * @generated from field: fixed32 dns = 4;\n   */\n  dns: number;\n};\n\n/**\n * Describes the message meshtastic.Config.NetworkConfig.IpV4Config.\n * Use `create(Config_NetworkConfig_IpV4ConfigSchema)` to create a new message.\n */\nexport const Config_NetworkConfig_IpV4ConfigSchema: GenMessage<Config_NetworkConfig_IpV4Config> = /*@__PURE__*/\n  messageDesc(file_config, 0, 3, 0);\n\n/**\n * @generated from enum meshtastic.Config.NetworkConfig.AddressMode\n */\nexport enum Config_NetworkConfig_AddressMode {\n  /**\n   *\n   * obtain ip address via DHCP\n   *\n   * @generated from enum value: DHCP = 0;\n   */\n  DHCP = 0,\n\n  /**\n   *\n   * use static ip address\n   *\n   * @generated from enum value: STATIC = 1;\n   */\n  STATIC = 1,\n}\n\n/**\n * Describes the enum meshtastic.Config.NetworkConfig.AddressMode.\n */\nexport const Config_NetworkConfig_AddressModeSchema: GenEnum<Config_NetworkConfig_AddressMode> = /*@__PURE__*/\n  enumDesc(file_config, 0, 3, 0);\n\n/**\n *\n * Display Config\n *\n * @generated from message meshtastic.Config.DisplayConfig\n */\nexport type Config_DisplayConfig = Message<\"meshtastic.Config.DisplayConfig\"> & {\n  /**\n   *\n   * Number of seconds the screen stays on after pressing the user button or receiving a message\n   * 0 for default of one minute MAXUINT for always on\n   *\n   * @generated from field: uint32 screen_on_secs = 1;\n   */\n  screenOnSecs: number;\n\n  /**\n   *\n   * How the GPS coordinates are formatted on the OLED screen.\n   *\n   * @generated from field: meshtastic.Config.DisplayConfig.GpsCoordinateFormat gps_format = 2;\n   */\n  gpsFormat: Config_DisplayConfig_GpsCoordinateFormat;\n\n  /**\n   *\n   * Automatically toggles to the next page on the screen like a carousel, based the specified interval in seconds.\n   * Potentially useful for devices without user buttons.\n   *\n   * @generated from field: uint32 auto_screen_carousel_secs = 3;\n   */\n  autoScreenCarouselSecs: number;\n\n  /**\n   *\n   * If this is set, the displayed compass will always point north. if unset, the old behaviour\n   * (top of display is heading direction) is used.\n   *\n   * @generated from field: bool compass_north_top = 4;\n   */\n  compassNorthTop: boolean;\n\n  /**\n   *\n   * Flip screen vertically, for cases that mount the screen upside down\n   *\n   * @generated from field: bool flip_screen = 5;\n   */\n  flipScreen: boolean;\n\n  /**\n   *\n   * Perferred display units\n   *\n   * @generated from field: meshtastic.Config.DisplayConfig.DisplayUnits units = 6;\n   */\n  units: Config_DisplayConfig_DisplayUnits;\n\n  /**\n   *\n   * Override auto-detect in screen\n   *\n   * @generated from field: meshtastic.Config.DisplayConfig.OledType oled = 7;\n   */\n  oled: Config_DisplayConfig_OledType;\n\n  /**\n   *\n   * Display Mode\n   *\n   * @generated from field: meshtastic.Config.DisplayConfig.DisplayMode displaymode = 8;\n   */\n  displaymode: Config_DisplayConfig_DisplayMode;\n\n  /**\n   *\n   * Print first line in pseudo-bold? FALSE is original style, TRUE is bold\n   *\n   * @generated from field: bool heading_bold = 9;\n   */\n  headingBold: boolean;\n\n  /**\n   *\n   * Should we wake the screen up on accelerometer detected motion or tap\n   *\n   * @generated from field: bool wake_on_tap_or_motion = 10;\n   */\n  wakeOnTapOrMotion: boolean;\n\n  /**\n   *\n   * Indicates how to rotate or invert the compass output to accurate display on the display.\n   *\n   * @generated from field: meshtastic.Config.DisplayConfig.CompassOrientation compass_orientation = 11;\n   */\n  compassOrientation: Config_DisplayConfig_CompassOrientation;\n};\n\n/**\n * Describes the message meshtastic.Config.DisplayConfig.\n * Use `create(Config_DisplayConfigSchema)` to create a new message.\n */\nexport const Config_DisplayConfigSchema: GenMessage<Config_DisplayConfig> = /*@__PURE__*/\n  messageDesc(file_config, 0, 4);\n\n/**\n *\n * How the GPS coordinates are displayed on the OLED screen.\n *\n * @generated from enum meshtastic.Config.DisplayConfig.GpsCoordinateFormat\n */\nexport enum Config_DisplayConfig_GpsCoordinateFormat {\n  /**\n   *\n   * GPS coordinates are displayed in the normal decimal degrees format:\n   * DD.DDDDDD DDD.DDDDDD\n   *\n   * @generated from enum value: DEC = 0;\n   */\n  DEC = 0,\n\n  /**\n   *\n   * GPS coordinates are displayed in the degrees minutes seconds format:\n   * DD°MM'SS\"C DDD°MM'SS\"C, where C is the compass point representing the locations quadrant\n   *\n   * @generated from enum value: DMS = 1;\n   */\n  DMS = 1,\n\n  /**\n   *\n   * Universal Transverse Mercator format:\n   * ZZB EEEEEE NNNNNNN, where Z is zone, B is band, E is easting, N is northing\n   *\n   * @generated from enum value: UTM = 2;\n   */\n  UTM = 2,\n\n  /**\n   *\n   * Military Grid Reference System format:\n   * ZZB CD EEEEE NNNNN, where Z is zone, B is band, C is the east 100k square, D is the north 100k square,\n   * E is easting, N is northing\n   *\n   * @generated from enum value: MGRS = 3;\n   */\n  MGRS = 3,\n\n  /**\n   *\n   * Open Location Code (aka Plus Codes).\n   *\n   * @generated from enum value: OLC = 4;\n   */\n  OLC = 4,\n\n  /**\n   *\n   * Ordnance Survey Grid Reference (the National Grid System of the UK).\n   * Format: AB EEEEE NNNNN, where A is the east 100k square, B is the north 100k square,\n   * E is the easting, N is the northing\n   *\n   * @generated from enum value: OSGR = 5;\n   */\n  OSGR = 5,\n}\n\n/**\n * Describes the enum meshtastic.Config.DisplayConfig.GpsCoordinateFormat.\n */\nexport const Config_DisplayConfig_GpsCoordinateFormatSchema: GenEnum<Config_DisplayConfig_GpsCoordinateFormat> = /*@__PURE__*/\n  enumDesc(file_config, 0, 4, 0);\n\n/**\n *\n * Unit display preference\n *\n * @generated from enum meshtastic.Config.DisplayConfig.DisplayUnits\n */\nexport enum Config_DisplayConfig_DisplayUnits {\n  /**\n   *\n   * Metric (Default)\n   *\n   * @generated from enum value: METRIC = 0;\n   */\n  METRIC = 0,\n\n  /**\n   *\n   * Imperial\n   *\n   * @generated from enum value: IMPERIAL = 1;\n   */\n  IMPERIAL = 1,\n}\n\n/**\n * Describes the enum meshtastic.Config.DisplayConfig.DisplayUnits.\n */\nexport const Config_DisplayConfig_DisplayUnitsSchema: GenEnum<Config_DisplayConfig_DisplayUnits> = /*@__PURE__*/\n  enumDesc(file_config, 0, 4, 1);\n\n/**\n *\n * Override OLED outo detect with this if it fails.\n *\n * @generated from enum meshtastic.Config.DisplayConfig.OledType\n */\nexport enum Config_DisplayConfig_OledType {\n  /**\n   *\n   * Default / Auto\n   *\n   * @generated from enum value: OLED_AUTO = 0;\n   */\n  OLED_AUTO = 0,\n\n  /**\n   *\n   * Default / Auto\n   *\n   * @generated from enum value: OLED_SSD1306 = 1;\n   */\n  OLED_SSD1306 = 1,\n\n  /**\n   *\n   * Default / Auto\n   *\n   * @generated from enum value: OLED_SH1106 = 2;\n   */\n  OLED_SH1106 = 2,\n\n  /**\n   *\n   * Can not be auto detected but set by proto. Used for 128x128 screens\n   *\n   * @generated from enum value: OLED_SH1107 = 3;\n   */\n  OLED_SH1107 = 3,\n}\n\n/**\n * Describes the enum meshtastic.Config.DisplayConfig.OledType.\n */\nexport const Config_DisplayConfig_OledTypeSchema: GenEnum<Config_DisplayConfig_OledType> = /*@__PURE__*/\n  enumDesc(file_config, 0, 4, 2);\n\n/**\n * @generated from enum meshtastic.Config.DisplayConfig.DisplayMode\n */\nexport enum Config_DisplayConfig_DisplayMode {\n  /**\n   *\n   * Default. The old style for the 128x64 OLED screen\n   *\n   * @generated from enum value: DEFAULT = 0;\n   */\n  DEFAULT = 0,\n\n  /**\n   *\n   * Rearrange display elements to cater for bicolor OLED displays\n   *\n   * @generated from enum value: TWOCOLOR = 1;\n   */\n  TWOCOLOR = 1,\n\n  /**\n   *\n   * Same as TwoColor, but with inverted top bar. Not so good for Epaper displays\n   *\n   * @generated from enum value: INVERTED = 2;\n   */\n  INVERTED = 2,\n\n  /**\n   *\n   * TFT Full Color Displays (not implemented yet)\n   *\n   * @generated from enum value: COLOR = 3;\n   */\n  COLOR = 3,\n}\n\n/**\n * Describes the enum meshtastic.Config.DisplayConfig.DisplayMode.\n */\nexport const Config_DisplayConfig_DisplayModeSchema: GenEnum<Config_DisplayConfig_DisplayMode> = /*@__PURE__*/\n  enumDesc(file_config, 0, 4, 3);\n\n/**\n * @generated from enum meshtastic.Config.DisplayConfig.CompassOrientation\n */\nexport enum Config_DisplayConfig_CompassOrientation {\n  /**\n   *\n   * The compass and the display are in the same orientation.\n   *\n   * @generated from enum value: DEGREES_0 = 0;\n   */\n  DEGREES_0 = 0,\n\n  /**\n   *\n   * Rotate the compass by 90 degrees.\n   *\n   * @generated from enum value: DEGREES_90 = 1;\n   */\n  DEGREES_90 = 1,\n\n  /**\n   *\n   * Rotate the compass by 180 degrees.\n   *\n   * @generated from enum value: DEGREES_180 = 2;\n   */\n  DEGREES_180 = 2,\n\n  /**\n   *\n   * Rotate the compass by 270 degrees.\n   *\n   * @generated from enum value: DEGREES_270 = 3;\n   */\n  DEGREES_270 = 3,\n\n  /**\n   *\n   * Don't rotate the compass, but invert the result.\n   *\n   * @generated from enum value: DEGREES_0_INVERTED = 4;\n   */\n  DEGREES_0_INVERTED = 4,\n\n  /**\n   *\n   * Rotate the compass by 90 degrees and invert.\n   *\n   * @generated from enum value: DEGREES_90_INVERTED = 5;\n   */\n  DEGREES_90_INVERTED = 5,\n\n  /**\n   *\n   * Rotate the compass by 180 degrees and invert.\n   *\n   * @generated from enum value: DEGREES_180_INVERTED = 6;\n   */\n  DEGREES_180_INVERTED = 6,\n\n  /**\n   *\n   * Rotate the compass by 270 degrees and invert.\n   *\n   * @generated from enum value: DEGREES_270_INVERTED = 7;\n   */\n  DEGREES_270_INVERTED = 7,\n}\n\n/**\n * Describes the enum meshtastic.Config.DisplayConfig.CompassOrientation.\n */\nexport const Config_DisplayConfig_CompassOrientationSchema: GenEnum<Config_DisplayConfig_CompassOrientation> = /*@__PURE__*/\n  enumDesc(file_config, 0, 4, 4);\n\n/**\n *\n * Lora Config\n *\n * @generated from message meshtastic.Config.LoRaConfig\n */\nexport type Config_LoRaConfig = Message<\"meshtastic.Config.LoRaConfig\"> & {\n  /**\n   *\n   * When enabled, the `modem_preset` fields will be adhered to, else the `bandwidth`/`spread_factor`/`coding_rate`\n   * will be taked from their respective manually defined fields\n   *\n   * @generated from field: bool use_preset = 1;\n   */\n  usePreset: boolean;\n\n  /**\n   *\n   * Either modem_config or bandwidth/spreading/coding will be specified - NOT BOTH.\n   * As a heuristic: If bandwidth is specified, do not use modem_config.\n   * Because protobufs take ZERO space when the value is zero this works out nicely.\n   * This value is replaced by bandwidth/spread_factor/coding_rate.\n   * If you'd like to experiment with other options add them to MeshRadio.cpp in the device code.\n   *\n   * @generated from field: meshtastic.Config.LoRaConfig.ModemPreset modem_preset = 2;\n   */\n  modemPreset: Config_LoRaConfig_ModemPreset;\n\n  /**\n   *\n   * Bandwidth in MHz\n   * Certain bandwidth numbers are 'special' and will be converted to the\n   * appropriate floating point value: 31 -> 31.25MHz\n   *\n   * @generated from field: uint32 bandwidth = 3;\n   */\n  bandwidth: number;\n\n  /**\n   *\n   * A number from 7 to 12.\n   * Indicates number of chirps per symbol as 1<<spread_factor.\n   *\n   * @generated from field: uint32 spread_factor = 4;\n   */\n  spreadFactor: number;\n\n  /**\n   *\n   * The denominator of the coding rate.\n   * ie for 4/5, the value is 5. 4/8 the value is 8.\n   *\n   * @generated from field: uint32 coding_rate = 5;\n   */\n  codingRate: number;\n\n  /**\n   *\n   * This parameter is for advanced users with advanced test equipment, we do not recommend most users use it.\n   * A frequency offset that is added to to the calculated band center frequency.\n   * Used to correct for crystal calibration errors.\n   *\n   * @generated from field: float frequency_offset = 6;\n   */\n  frequencyOffset: number;\n\n  /**\n   *\n   * The region code for the radio (US, CN, EU433, etc...)\n   *\n   * @generated from field: meshtastic.Config.LoRaConfig.RegionCode region = 7;\n   */\n  region: Config_LoRaConfig_RegionCode;\n\n  /**\n   *\n   * Maximum number of hops. This can't be greater than 7.\n   * Default of 3\n   * Attempting to set a value > 7 results in the default\n   *\n   * @generated from field: uint32 hop_limit = 8;\n   */\n  hopLimit: number;\n\n  /**\n   *\n   * Disable TX from the LoRa radio. Useful for hot-swapping antennas and other tests.\n   * Defaults to false\n   *\n   * @generated from field: bool tx_enabled = 9;\n   */\n  txEnabled: boolean;\n\n  /**\n   *\n   * If zero, then use default max legal continuous power (ie. something that won't\n   * burn out the radio hardware)\n   * In most cases you should use zero here.\n   * Units are in dBm.\n   *\n   * @generated from field: int32 tx_power = 10;\n   */\n  txPower: number;\n\n  /**\n   *\n   * This controls the actual hardware frequency the radio transmits on.\n   * Most users should never need to be exposed to this field/concept.\n   * A channel number between 1 and NUM_CHANNELS (whatever the max is in the current region).\n   * If ZERO then the rule is \"use the old channel name hash based\n   * algorithm to derive the channel number\")\n   * If using the hash algorithm the channel number will be: hash(channel_name) %\n   * NUM_CHANNELS (Where num channels depends on the regulatory region).\n   *\n   * @generated from field: uint32 channel_num = 11;\n   */\n  channelNum: number;\n\n  /**\n   *\n   * If true, duty cycle limits will be exceeded and thus you're possibly not following\n   * the local regulations if you're not a HAM.\n   * Has no effect if the duty cycle of the used region is 100%.\n   *\n   * @generated from field: bool override_duty_cycle = 12;\n   */\n  overrideDutyCycle: boolean;\n\n  /**\n   *\n   * If true, sets RX boosted gain mode on SX126X based radios\n   *\n   * @generated from field: bool sx126x_rx_boosted_gain = 13;\n   */\n  sx126xRxBoostedGain: boolean;\n\n  /**\n   *\n   * This parameter is for advanced users and licensed HAM radio operators.\n   * Ignore Channel Calculation and use this frequency instead. The frequency_offset\n   * will still be applied. This will allow you to use out-of-band frequencies.\n   * Please respect your local laws and regulations. If you are a HAM, make sure you\n   * enable HAM mode and turn off encryption.\n   *\n   * @generated from field: float override_frequency = 14;\n   */\n  overrideFrequency: number;\n\n  /**\n   *\n   * If true, disable the build-in PA FAN using pin define in RF95_FAN_EN.\n   *\n   * @generated from field: bool pa_fan_disabled = 15;\n   */\n  paFanDisabled: boolean;\n\n  /**\n   *\n   * For testing it is useful sometimes to force a node to never listen to\n   * particular other nodes (simulating radio out of range). All nodenums listed\n   * in ignore_incoming will have packets they send dropped on receive (by router.cpp)\n   *\n   * @generated from field: repeated uint32 ignore_incoming = 103;\n   */\n  ignoreIncoming: number[];\n\n  /**\n   *\n   * If true, the device will not process any packets received via LoRa that passed via MQTT anywhere on the path towards it.\n   *\n   * @generated from field: bool ignore_mqtt = 104;\n   */\n  ignoreMqtt: boolean;\n\n  /**\n   *\n   * Sets the ok_to_mqtt bit on outgoing packets\n   *\n   * @generated from field: bool config_ok_to_mqtt = 105;\n   */\n  configOkToMqtt: boolean;\n};\n\n/**\n * Describes the message meshtastic.Config.LoRaConfig.\n * Use `create(Config_LoRaConfigSchema)` to create a new message.\n */\nexport const Config_LoRaConfigSchema: GenMessage<Config_LoRaConfig> = /*@__PURE__*/\n  messageDesc(file_config, 0, 5);\n\n/**\n * @generated from enum meshtastic.Config.LoRaConfig.RegionCode\n */\nexport enum Config_LoRaConfig_RegionCode {\n  /**\n   *\n   * Region is not set\n   *\n   * @generated from enum value: UNSET = 0;\n   */\n  UNSET = 0,\n\n  /**\n   *\n   * United States\n   *\n   * @generated from enum value: US = 1;\n   */\n  US = 1,\n\n  /**\n   *\n   * European Union 433mhz\n   *\n   * @generated from enum value: EU_433 = 2;\n   */\n  EU_433 = 2,\n\n  /**\n   *\n   * European Union 868mhz\n   *\n   * @generated from enum value: EU_868 = 3;\n   */\n  EU_868 = 3,\n\n  /**\n   *\n   * China\n   *\n   * @generated from enum value: CN = 4;\n   */\n  CN = 4,\n\n  /**\n   *\n   * Japan\n   *\n   * @generated from enum value: JP = 5;\n   */\n  JP = 5,\n\n  /**\n   *\n   * Australia / New Zealand\n   *\n   * @generated from enum value: ANZ = 6;\n   */\n  ANZ = 6,\n\n  /**\n   *\n   * Korea\n   *\n   * @generated from enum value: KR = 7;\n   */\n  KR = 7,\n\n  /**\n   *\n   * Taiwan\n   *\n   * @generated from enum value: TW = 8;\n   */\n  TW = 8,\n\n  /**\n   *\n   * Russia\n   *\n   * @generated from enum value: RU = 9;\n   */\n  RU = 9,\n\n  /**\n   *\n   * India\n   *\n   * @generated from enum value: IN = 10;\n   */\n  IN = 10,\n\n  /**\n   *\n   * New Zealand 865mhz\n   *\n   * @generated from enum value: NZ_865 = 11;\n   */\n  NZ_865 = 11,\n\n  /**\n   *\n   * Thailand\n   *\n   * @generated from enum value: TH = 12;\n   */\n  TH = 12,\n\n  /**\n   *\n   * WLAN Band\n   *\n   * @generated from enum value: LORA_24 = 13;\n   */\n  LORA_24 = 13,\n\n  /**\n   *\n   * Ukraine 433mhz\n   *\n   * @generated from enum value: UA_433 = 14;\n   */\n  UA_433 = 14,\n\n  /**\n   *\n   * Ukraine 868mhz\n   *\n   * @generated from enum value: UA_868 = 15;\n   */\n  UA_868 = 15,\n\n  /**\n   *\n   * Malaysia 433mhz\n   *\n   * @generated from enum value: MY_433 = 16;\n   */\n  MY_433 = 16,\n\n  /**\n   *\n   * Malaysia 919mhz\n   *\n   * @generated from enum value: MY_919 = 17;\n   */\n  MY_919 = 17,\n\n  /**\n   *\n   * Singapore 923mhz\n   *\n   * @generated from enum value: SG_923 = 18;\n   */\n  SG_923 = 18,\n\n  /**\n   *\n   * Philippines 433mhz\n   *\n   * @generated from enum value: PH_433 = 19;\n   */\n  PH_433 = 19,\n\n  /**\n   *\n   * Philippines 868mhz\n   *\n   * @generated from enum value: PH_868 = 20;\n   */\n  PH_868 = 20,\n\n  /**\n   *\n   * Philippines 915mhz\n   *\n   * @generated from enum value: PH_915 = 21;\n   */\n  PH_915 = 21,\n}\n\n/**\n * Describes the enum meshtastic.Config.LoRaConfig.RegionCode.\n */\nexport const Config_LoRaConfig_RegionCodeSchema: GenEnum<Config_LoRaConfig_RegionCode> = /*@__PURE__*/\n  enumDesc(file_config, 0, 5, 0);\n\n/**\n *\n * Standard predefined channel settings\n * Note: these mappings must match ModemPreset Choice in the device code.\n *\n * @generated from enum meshtastic.Config.LoRaConfig.ModemPreset\n */\nexport enum Config_LoRaConfig_ModemPreset {\n  /**\n   *\n   * Long Range - Fast\n   *\n   * @generated from enum value: LONG_FAST = 0;\n   */\n  LONG_FAST = 0,\n\n  /**\n   *\n   * Long Range - Slow\n   *\n   * @generated from enum value: LONG_SLOW = 1;\n   */\n  LONG_SLOW = 1,\n\n  /**\n   *\n   * Very Long Range - Slow\n   * Deprecated in 2.5: Works only with txco and is unusably slow\n   *\n   * @generated from enum value: VERY_LONG_SLOW = 2 [deprecated = true];\n   * @deprecated\n   */\n  VERY_LONG_SLOW = 2,\n\n  /**\n   *\n   * Medium Range - Slow\n   *\n   * @generated from enum value: MEDIUM_SLOW = 3;\n   */\n  MEDIUM_SLOW = 3,\n\n  /**\n   *\n   * Medium Range - Fast\n   *\n   * @generated from enum value: MEDIUM_FAST = 4;\n   */\n  MEDIUM_FAST = 4,\n\n  /**\n   *\n   * Short Range - Slow\n   *\n   * @generated from enum value: SHORT_SLOW = 5;\n   */\n  SHORT_SLOW = 5,\n\n  /**\n   *\n   * Short Range - Fast\n   *\n   * @generated from enum value: SHORT_FAST = 6;\n   */\n  SHORT_FAST = 6,\n\n  /**\n   *\n   * Long Range - Moderately Fast\n   *\n   * @generated from enum value: LONG_MODERATE = 7;\n   */\n  LONG_MODERATE = 7,\n\n  /**\n   *\n   * Short Range - Turbo\n   * This is the fastest preset and the only one with 500kHz bandwidth.\n   * It is not legal to use in all regions due to this wider bandwidth.\n   *\n   * @generated from enum value: SHORT_TURBO = 8;\n   */\n  SHORT_TURBO = 8,\n}\n\n/**\n * Describes the enum meshtastic.Config.LoRaConfig.ModemPreset.\n */\nexport const Config_LoRaConfig_ModemPresetSchema: GenEnum<Config_LoRaConfig_ModemPreset> = /*@__PURE__*/\n  enumDesc(file_config, 0, 5, 1);\n\n/**\n * @generated from message meshtastic.Config.BluetoothConfig\n */\nexport type Config_BluetoothConfig = Message<\"meshtastic.Config.BluetoothConfig\"> & {\n  /**\n   *\n   * Enable Bluetooth on the device\n   *\n   * @generated from field: bool enabled = 1;\n   */\n  enabled: boolean;\n\n  /**\n   *\n   * Determines the pairing strategy for the device\n   *\n   * @generated from field: meshtastic.Config.BluetoothConfig.PairingMode mode = 2;\n   */\n  mode: Config_BluetoothConfig_PairingMode;\n\n  /**\n   *\n   * Specified PIN for PairingMode.FixedPin\n   *\n   * @generated from field: uint32 fixed_pin = 3;\n   */\n  fixedPin: number;\n};\n\n/**\n * Describes the message meshtastic.Config.BluetoothConfig.\n * Use `create(Config_BluetoothConfigSchema)` to create a new message.\n */\nexport const Config_BluetoothConfigSchema: GenMessage<Config_BluetoothConfig> = /*@__PURE__*/\n  messageDesc(file_config, 0, 6);\n\n/**\n * @generated from enum meshtastic.Config.BluetoothConfig.PairingMode\n */\nexport enum Config_BluetoothConfig_PairingMode {\n  /**\n   *\n   * Device generates a random PIN that will be shown on the screen of the device for pairing\n   *\n   * @generated from enum value: RANDOM_PIN = 0;\n   */\n  RANDOM_PIN = 0,\n\n  /**\n   *\n   * Device requires a specified fixed PIN for pairing\n   *\n   * @generated from enum value: FIXED_PIN = 1;\n   */\n  FIXED_PIN = 1,\n\n  /**\n   *\n   * Device requires no PIN for pairing\n   *\n   * @generated from enum value: NO_PIN = 2;\n   */\n  NO_PIN = 2,\n}\n\n/**\n * Describes the enum meshtastic.Config.BluetoothConfig.PairingMode.\n */\nexport const Config_BluetoothConfig_PairingModeSchema: GenEnum<Config_BluetoothConfig_PairingMode> = /*@__PURE__*/\n  enumDesc(file_config, 0, 6, 0);\n\n/**\n * @generated from message meshtastic.Config.SecurityConfig\n */\nexport type Config_SecurityConfig = Message<\"meshtastic.Config.SecurityConfig\"> & {\n  /**\n   *\n   * The public key of the user's device.\n   * Sent out to other nodes on the mesh to allow them to compute a shared secret key.\n   *\n   * @generated from field: bytes public_key = 1;\n   */\n  publicKey: Uint8Array;\n\n  /**\n   *\n   * The private key of the device.\n   * Used to create a shared key with a remote device.\n   *\n   * @generated from field: bytes private_key = 2;\n   */\n  privateKey: Uint8Array;\n\n  /**\n   *\n   * The public key authorized to send admin messages to this node.\n   *\n   * @generated from field: repeated bytes admin_key = 3;\n   */\n  adminKey: Uint8Array[];\n\n  /**\n   *\n   * If true, device is considered to be \"managed\" by a mesh administrator via admin messages\n   * Device is managed by a mesh administrator.\n   *\n   * @generated from field: bool is_managed = 4;\n   */\n  isManaged: boolean;\n\n  /**\n   *\n   * Serial Console over the Stream API.\"\n   *\n   * @generated from field: bool serial_enabled = 5;\n   */\n  serialEnabled: boolean;\n\n  /**\n   *\n   * By default we turn off logging as soon as an API client connects (to keep shared serial link quiet).\n   * Output live debug logging over serial or bluetooth is set to true.\n   *\n   * @generated from field: bool debug_log_api_enabled = 6;\n   */\n  debugLogApiEnabled: boolean;\n\n  /**\n   *\n   * Allow incoming device control over the insecure legacy admin channel.\n   *\n   * @generated from field: bool admin_channel_enabled = 8;\n   */\n  adminChannelEnabled: boolean;\n};\n\n/**\n * Describes the message meshtastic.Config.SecurityConfig.\n * Use `create(Config_SecurityConfigSchema)` to create a new message.\n */\nexport const Config_SecurityConfigSchema: GenMessage<Config_SecurityConfig> = /*@__PURE__*/\n  messageDesc(file_config, 0, 7);\n\n/**\n *\n * Blank config request, strictly for getting the session key\n *\n * @generated from message meshtastic.Config.SessionkeyConfig\n */\nexport type Config_SessionkeyConfig = Message<\"meshtastic.Config.SessionkeyConfig\"> & {\n};\n\n/**\n * Describes the message meshtastic.Config.SessionkeyConfig.\n * Use `create(Config_SessionkeyConfigSchema)` to create a new message.\n */\nexport const Config_SessionkeyConfigSchema: GenMessage<Config_SessionkeyConfig> = /*@__PURE__*/\n  messageDesc(file_config, 0, 8);\n\n","// @generated by protoc-gen-es v2.1.0 with parameter \"target=ts\"\n// @generated from file device_ui.proto (package meshtastic, syntax proto3)\n/* eslint-disable */\n\nimport type { GenEnum, GenFile, GenMessage } from \"@bufbuild/protobuf/codegenv1\";\nimport { enumDesc, fileDesc, messageDesc } from \"@bufbuild/protobuf/codegenv1\";\nimport type { Message } from \"npm:@bufbuild/protobuf@^2.1.0\";\n\n/**\n * Describes the file device_ui.proto.\n */\nexport const file_device_ui: GenFile = /*@__PURE__*/\n  fileDesc(\"Cg9kZXZpY2VfdWkucHJvdG8SCm1lc2h0YXN0aWMigQMKDkRldmljZVVJQ29uZmlnEg8KB3ZlcnNpb24YASABKA0SGQoRc2NyZWVuX2JyaWdodG5lc3MYAiABKA0SFgoOc2NyZWVuX3RpbWVvdXQYAyABKA0SEwoLc2NyZWVuX2xvY2sYBCABKAgSFQoNc2V0dGluZ3NfbG9jaxgFIAEoCBIQCghwaW5fY29kZRgGIAEoDRIgCgV0aGVtZRgHIAEoDjIRLm1lc2h0YXN0aWMuVGhlbWUSFQoNYWxlcnRfZW5hYmxlZBgIIAEoCBIWCg5iYW5uZXJfZW5hYmxlZBgJIAEoCBIUCgxyaW5nX3RvbmVfaWQYCiABKA0SJgoIbGFuZ3VhZ2UYCyABKA4yFC5tZXNodGFzdGljLkxhbmd1YWdlEisKC25vZGVfZmlsdGVyGAwgASgLMhYubWVzaHRhc3RpYy5Ob2RlRmlsdGVyEjEKDm5vZGVfaGlnaGxpZ2h0GA0gASgLMhkubWVzaHRhc3RpYy5Ob2RlSGlnaGxpZ2h0IpYBCgpOb2RlRmlsdGVyEhYKDnVua25vd25fc3dpdGNoGAEgASgIEhYKDm9mZmxpbmVfc3dpdGNoGAIgASgIEhkKEXB1YmxpY19rZXlfc3dpdGNoGAMgASgIEhEKCWhvcHNfYXdheRgEIAEoBRIXCg9wb3NpdGlvbl9zd2l0Y2gYBSABKAgSEQoJbm9kZV9uYW1lGAYgASgJIn4KDU5vZGVIaWdobGlnaHQSEwoLY2hhdF9zd2l0Y2gYASABKAgSFwoPcG9zaXRpb25fc3dpdGNoGAIgASgIEhgKEHRlbGVtZXRyeV9zd2l0Y2gYAyABKAgSEgoKaWFxX3N3aXRjaBgEIAEoCBIRCglub2RlX25hbWUYBSABKAkqJQoFVGhlbWUSCAoEREFSSxAAEgkKBUxJR0hUEAESBwoDUkVEEAIq7QEKCExhbmd1YWdlEgsKB0VOR0xJU0gQABIKCgZGUkVOQ0gQARIKCgZHRVJNQU4QAhILCgdJVEFMSUFOEAMSDgoKUE9SVFVHVUVTRRAEEgsKB1NQQU5JU0gQBRILCgdTV0VESVNIEAYSCwoHRklOTklTSBAHEgoKBlBPTElTSBAIEgsKB1RVUktJU0gQCRILCgdTRVJCSUFOEAoSCwoHUlVTU0lBThALEgkKBURVVENIEAwSCQoFR1JFRUsQDRIWChJTSU1QTElGSUVEX0NISU5FU0UQHhIXChNUUkFESVRJT05BTF9DSElORVNFEB9CYwoTY29tLmdlZWtzdmlsbGUubWVzaEIORGV2aWNlVUlQcm90b3NaImdpdGh1Yi5jb20vbWVzaHRhc3RpYy9nby9nZW5lcmF0ZWSqAhRNZXNodGFzdGljLlByb3RvYnVmc7oCAGIGcHJvdG8z\");\n\n/**\n * @generated from message meshtastic.DeviceUIConfig\n */\nexport type DeviceUIConfig = Message<\"meshtastic.DeviceUIConfig\"> & {\n  /**\n   *\n   * A version integer used to invalidate saved files when we make incompatible changes.\n   *\n   * @generated from field: uint32 version = 1;\n   */\n  version: number;\n\n  /**\n   *\n   * TFT display brightness 1..255 \n   *\n   * @generated from field: uint32 screen_brightness = 2;\n   */\n  screenBrightness: number;\n\n  /**\n   *\n   * Screen timeout 0..900 \n   *\n   * @generated from field: uint32 screen_timeout = 3;\n   */\n  screenTimeout: number;\n\n  /**\n   *\n   * Screen/Settings lock enabled \n   *\n   * @generated from field: bool screen_lock = 4;\n   */\n  screenLock: boolean;\n\n  /**\n   * @generated from field: bool settings_lock = 5;\n   */\n  settingsLock: boolean;\n\n  /**\n   * @generated from field: uint32 pin_code = 6;\n   */\n  pinCode: number;\n\n  /**\n   *\n   * Color theme \n   *\n   * @generated from field: meshtastic.Theme theme = 7;\n   */\n  theme: Theme;\n\n  /**\n   *\n   * Audible message, banner and ring tone\n   *\n   * @generated from field: bool alert_enabled = 8;\n   */\n  alertEnabled: boolean;\n\n  /**\n   * @generated from field: bool banner_enabled = 9;\n   */\n  bannerEnabled: boolean;\n\n  /**\n   * @generated from field: uint32 ring_tone_id = 10;\n   */\n  ringToneId: number;\n\n  /**\n   *\n   * Localization \n   *\n   * @generated from field: meshtastic.Language language = 11;\n   */\n  language: Language;\n\n  /**\n   *\n   * Node list filter \n   *\n   * @generated from field: meshtastic.NodeFilter node_filter = 12;\n   */\n  nodeFilter?: NodeFilter;\n\n  /**\n   *\n   * Node list highlightening\n   *\n   * @generated from field: meshtastic.NodeHighlight node_highlight = 13;\n   */\n  nodeHighlight?: NodeHighlight;\n};\n\n/**\n * Describes the message meshtastic.DeviceUIConfig.\n * Use `create(DeviceUIConfigSchema)` to create a new message.\n */\nexport const DeviceUIConfigSchema: GenMessage<DeviceUIConfig> = /*@__PURE__*/\n  messageDesc(file_device_ui, 0);\n\n/**\n * @generated from message meshtastic.NodeFilter\n */\nexport type NodeFilter = Message<\"meshtastic.NodeFilter\"> & {\n  /**\n   *\n   * Filter unknown nodes\n   *\n   * @generated from field: bool unknown_switch = 1;\n   */\n  unknownSwitch: boolean;\n\n  /**\n   *\n   * Filter offline nodes\n   *\n   * @generated from field: bool offline_switch = 2;\n   */\n  offlineSwitch: boolean;\n\n  /**\n   *\n   * Filter nodes w/o public key\n   *\n   * @generated from field: bool public_key_switch = 3;\n   */\n  publicKeySwitch: boolean;\n\n  /**\n   *\n   * Filter based on hops away\n   *\n   * @generated from field: int32 hops_away = 4;\n   */\n  hopsAway: number;\n\n  /**\n   *\n   * Filter nodes w/o position\n   *\n   * @generated from field: bool position_switch = 5;\n   */\n  positionSwitch: boolean;\n\n  /**\n   *\n   * Filter nodes by matching name string\n   *\n   * @generated from field: string node_name = 6;\n   */\n  nodeName: string;\n};\n\n/**\n * Describes the message meshtastic.NodeFilter.\n * Use `create(NodeFilterSchema)` to create a new message.\n */\nexport const NodeFilterSchema: GenMessage<NodeFilter> = /*@__PURE__*/\n  messageDesc(file_device_ui, 1);\n\n/**\n * @generated from message meshtastic.NodeHighlight\n */\nexport type NodeHighlight = Message<\"meshtastic.NodeHighlight\"> & {\n  /**\n   *\n   * Hightlight nodes w/ active chat\n   *\n   * @generated from field: bool chat_switch = 1;\n   */\n  chatSwitch: boolean;\n\n  /**\n   *\n   * Highlight nodes w/ position\n   *\n   * @generated from field: bool position_switch = 2;\n   */\n  positionSwitch: boolean;\n\n  /**\n   *\n   * Highlight nodes w/ telemetry data\n   *\n   * @generated from field: bool telemetry_switch = 3;\n   */\n  telemetrySwitch: boolean;\n\n  /**\n   *\n   * Highlight nodes w/ iaq data\n   *\n   * @generated from field: bool iaq_switch = 4;\n   */\n  iaqSwitch: boolean;\n\n  /**\n   *\n   * Highlight nodes by matching name string\n   *\n   * @generated from field: string node_name = 5;\n   */\n  nodeName: string;\n};\n\n/**\n * Describes the message meshtastic.NodeHighlight.\n * Use `create(NodeHighlightSchema)` to create a new message.\n */\nexport const NodeHighlightSchema: GenMessage<NodeHighlight> = /*@__PURE__*/\n  messageDesc(file_device_ui, 2);\n\n/**\n * @generated from enum meshtastic.Theme\n */\nexport enum Theme {\n  /**\n   *\n   * Dark\n   *\n   * @generated from enum value: DARK = 0;\n   */\n  DARK = 0,\n\n  /**\n   *\n   * Light\n   *\n   * @generated from enum value: LIGHT = 1;\n   */\n  LIGHT = 1,\n\n  /**\n   *\n   * Red\n   *\n   * @generated from enum value: RED = 2;\n   */\n  RED = 2,\n}\n\n/**\n * Describes the enum meshtastic.Theme.\n */\nexport const ThemeSchema: GenEnum<Theme> = /*@__PURE__*/\n  enumDesc(file_device_ui, 0);\n\n/**\n *\n * Localization\n *\n * @generated from enum meshtastic.Language\n */\nexport enum Language {\n  /**\n   *\n   * English\n   *\n   * @generated from enum value: ENGLISH = 0;\n   */\n  ENGLISH = 0,\n\n  /**\n   *\n   * French\n   *\n   * @generated from enum value: FRENCH = 1;\n   */\n  FRENCH = 1,\n\n  /**\n   *\n   * German\n   *\n   * @generated from enum value: GERMAN = 2;\n   */\n  GERMAN = 2,\n\n  /**\n   *\n   * Italian\n   *\n   * @generated from enum value: ITALIAN = 3;\n   */\n  ITALIAN = 3,\n\n  /**\n   *\n   * Portuguese\n   *\n   * @generated from enum value: PORTUGUESE = 4;\n   */\n  PORTUGUESE = 4,\n\n  /**\n   *\n   * Spanish\n   *\n   * @generated from enum value: SPANISH = 5;\n   */\n  SPANISH = 5,\n\n  /**\n   *\n   * Swedish\n   *\n   * @generated from enum value: SWEDISH = 6;\n   */\n  SWEDISH = 6,\n\n  /**\n   *\n   * Finnish\n   *\n   * @generated from enum value: FINNISH = 7;\n   */\n  FINNISH = 7,\n\n  /**\n   *\n   * Polish\n   *\n   * @generated from enum value: POLISH = 8;\n   */\n  POLISH = 8,\n\n  /**\n   *\n   * Turkish\n   *\n   * @generated from enum value: TURKISH = 9;\n   */\n  TURKISH = 9,\n\n  /**\n   *\n   * Serbian\n   *\n   * @generated from enum value: SERBIAN = 10;\n   */\n  SERBIAN = 10,\n\n  /**\n   *\n   * Russian\n   *\n   * @generated from enum value: RUSSIAN = 11;\n   */\n  RUSSIAN = 11,\n\n  /**\n   *\n   * Dutch\n   *\n   * @generated from enum value: DUTCH = 12;\n   */\n  DUTCH = 12,\n\n  /**\n   *\n   * Greek\n   *\n   * @generated from enum value: GREEK = 13;\n   */\n  GREEK = 13,\n\n  /**\n   *\n   * Simplified Chinese (experimental)\n   *\n   * @generated from enum value: SIMPLIFIED_CHINESE = 30;\n   */\n  SIMPLIFIED_CHINESE = 30,\n\n  /**\n   *\n   * Traditional Chinese (experimental)\n   *\n   * @generated from enum value: TRADITIONAL_CHINESE = 31;\n   */\n  TRADITIONAL_CHINESE = 31,\n}\n\n/**\n * Describes the enum meshtastic.Language.\n */\nexport const LanguageSchema: GenEnum<Language> = /*@__PURE__*/\n  enumDesc(file_device_ui, 1);\n\n","// @generated by protoc-gen-es v2.1.0 with parameter \"target=ts\"\n// @generated from file connection_status.proto (package meshtastic, syntax proto3)\n/* eslint-disable */\n\nimport type { GenFile, GenMessage } from \"@bufbuild/protobuf/codegenv1\";\nimport { fileDesc, messageDesc } from \"@bufbuild/protobuf/codegenv1\";\nimport type { Message } from \"npm:@bufbuild/protobuf@^2.1.0\";\n\n/**\n * Describes the file connection_status.proto.\n */\nexport const file_connection_status: GenFile = /*@__PURE__*/\n  fileDesc(\"Chdjb25uZWN0aW9uX3N0YXR1cy5wcm90bxIKbWVzaHRhc3RpYyKxAgoWRGV2aWNlQ29ubmVjdGlvblN0YXR1cxIzCgR3aWZpGAEgASgLMiAubWVzaHRhc3RpYy5XaWZpQ29ubmVjdGlvblN0YXR1c0gAiAEBEjsKCGV0aGVybmV0GAIgASgLMiQubWVzaHRhc3RpYy5FdGhlcm5ldENvbm5lY3Rpb25TdGF0dXNIAYgBARI9CglibHVldG9vdGgYAyABKAsyJS5tZXNodGFzdGljLkJsdWV0b290aENvbm5lY3Rpb25TdGF0dXNIAogBARI3CgZzZXJpYWwYBCABKAsyIi5tZXNodGFzdGljLlNlcmlhbENvbm5lY3Rpb25TdGF0dXNIA4gBAUIHCgVfd2lmaUILCglfZXRoZXJuZXRCDAoKX2JsdWV0b290aEIJCgdfc2VyaWFsImcKFFdpZmlDb25uZWN0aW9uU3RhdHVzEjMKBnN0YXR1cxgBIAEoCzIjLm1lc2h0YXN0aWMuTmV0d29ya0Nvbm5lY3Rpb25TdGF0dXMSDAoEc3NpZBgCIAEoCRIMCgRyc3NpGAMgASgFIk8KGEV0aGVybmV0Q29ubmVjdGlvblN0YXR1cxIzCgZzdGF0dXMYASABKAsyIy5tZXNodGFzdGljLk5ldHdvcmtDb25uZWN0aW9uU3RhdHVzInsKF05ldHdvcmtDb25uZWN0aW9uU3RhdHVzEhIKCmlwX2FkZHJlc3MYASABKAcSFAoMaXNfY29ubmVjdGVkGAIgASgIEhkKEWlzX21xdHRfY29ubmVjdGVkGAMgASgIEhsKE2lzX3N5c2xvZ19jb25uZWN0ZWQYBCABKAgiTAoZQmx1ZXRvb3RoQ29ubmVjdGlvblN0YXR1cxILCgNwaW4YASABKA0SDAoEcnNzaRgCIAEoBRIUCgxpc19jb25uZWN0ZWQYAyABKAgiPAoWU2VyaWFsQ29ubmVjdGlvblN0YXR1cxIMCgRiYXVkGAEgASgNEhQKDGlzX2Nvbm5lY3RlZBgCIAEoCEJlChNjb20uZ2Vla3N2aWxsZS5tZXNoQhBDb25uU3RhdHVzUHJvdG9zWiJnaXRodWIuY29tL21lc2h0YXN0aWMvZ28vZ2VuZXJhdGVkqgIUTWVzaHRhc3RpYy5Qcm90b2J1ZnO6AgBiBnByb3RvMw\");\n\n/**\n * @generated from message meshtastic.DeviceConnectionStatus\n */\nexport type DeviceConnectionStatus = Message<\"meshtastic.DeviceConnectionStatus\"> & {\n  /**\n   *\n   * WiFi Status\n   *\n   * @generated from field: optional meshtastic.WifiConnectionStatus wifi = 1;\n   */\n  wifi?: WifiConnectionStatus;\n\n  /**\n   *\n   * WiFi Status\n   *\n   * @generated from field: optional meshtastic.EthernetConnectionStatus ethernet = 2;\n   */\n  ethernet?: EthernetConnectionStatus;\n\n  /**\n   *\n   * Bluetooth Status\n   *\n   * @generated from field: optional meshtastic.BluetoothConnectionStatus bluetooth = 3;\n   */\n  bluetooth?: BluetoothConnectionStatus;\n\n  /**\n   *\n   * Serial Status\n   *\n   * @generated from field: optional meshtastic.SerialConnectionStatus serial = 4;\n   */\n  serial?: SerialConnectionStatus;\n};\n\n/**\n * Describes the message meshtastic.DeviceConnectionStatus.\n * Use `create(DeviceConnectionStatusSchema)` to create a new message.\n */\nexport const DeviceConnectionStatusSchema: GenMessage<DeviceConnectionStatus> = /*@__PURE__*/\n  messageDesc(file_connection_status, 0);\n\n/**\n *\n * WiFi connection status\n *\n * @generated from message meshtastic.WifiConnectionStatus\n */\nexport type WifiConnectionStatus = Message<\"meshtastic.WifiConnectionStatus\"> & {\n  /**\n   *\n   * Connection status\n   *\n   * @generated from field: meshtastic.NetworkConnectionStatus status = 1;\n   */\n  status?: NetworkConnectionStatus;\n\n  /**\n   *\n   * WiFi access point SSID\n   *\n   * @generated from field: string ssid = 2;\n   */\n  ssid: string;\n\n  /**\n   *\n   * RSSI of wireless connection\n   *\n   * @generated from field: int32 rssi = 3;\n   */\n  rssi: number;\n};\n\n/**\n * Describes the message meshtastic.WifiConnectionStatus.\n * Use `create(WifiConnectionStatusSchema)` to create a new message.\n */\nexport const WifiConnectionStatusSchema: GenMessage<WifiConnectionStatus> = /*@__PURE__*/\n  messageDesc(file_connection_status, 1);\n\n/**\n *\n * Ethernet connection status\n *\n * @generated from message meshtastic.EthernetConnectionStatus\n */\nexport type EthernetConnectionStatus = Message<\"meshtastic.EthernetConnectionStatus\"> & {\n  /**\n   *\n   * Connection status\n   *\n   * @generated from field: meshtastic.NetworkConnectionStatus status = 1;\n   */\n  status?: NetworkConnectionStatus;\n};\n\n/**\n * Describes the message meshtastic.EthernetConnectionStatus.\n * Use `create(EthernetConnectionStatusSchema)` to create a new message.\n */\nexport const EthernetConnectionStatusSchema: GenMessage<EthernetConnectionStatus> = /*@__PURE__*/\n  messageDesc(file_connection_status, 2);\n\n/**\n *\n * Ethernet or WiFi connection status\n *\n * @generated from message meshtastic.NetworkConnectionStatus\n */\nexport type NetworkConnectionStatus = Message<\"meshtastic.NetworkConnectionStatus\"> & {\n  /**\n   *\n   * IP address of device\n   *\n   * @generated from field: fixed32 ip_address = 1;\n   */\n  ipAddress: number;\n\n  /**\n   *\n   * Whether the device has an active connection or not\n   *\n   * @generated from field: bool is_connected = 2;\n   */\n  isConnected: boolean;\n\n  /**\n   *\n   * Whether the device has an active connection to an MQTT broker or not\n   *\n   * @generated from field: bool is_mqtt_connected = 3;\n   */\n  isMqttConnected: boolean;\n\n  /**\n   *\n   * Whether the device is actively remote syslogging or not\n   *\n   * @generated from field: bool is_syslog_connected = 4;\n   */\n  isSyslogConnected: boolean;\n};\n\n/**\n * Describes the message meshtastic.NetworkConnectionStatus.\n * Use `create(NetworkConnectionStatusSchema)` to create a new message.\n */\nexport const NetworkConnectionStatusSchema: GenMessage<NetworkConnectionStatus> = /*@__PURE__*/\n  messageDesc(file_connection_status, 3);\n\n/**\n *\n * Bluetooth connection status\n *\n * @generated from message meshtastic.BluetoothConnectionStatus\n */\nexport type BluetoothConnectionStatus = Message<\"meshtastic.BluetoothConnectionStatus\"> & {\n  /**\n   *\n   * The pairing PIN for bluetooth\n   *\n   * @generated from field: uint32 pin = 1;\n   */\n  pin: number;\n\n  /**\n   *\n   * RSSI of bluetooth connection\n   *\n   * @generated from field: int32 rssi = 2;\n   */\n  rssi: number;\n\n  /**\n   *\n   * Whether the device has an active connection or not\n   *\n   * @generated from field: bool is_connected = 3;\n   */\n  isConnected: boolean;\n};\n\n/**\n * Describes the message meshtastic.BluetoothConnectionStatus.\n * Use `create(BluetoothConnectionStatusSchema)` to create a new message.\n */\nexport const BluetoothConnectionStatusSchema: GenMessage<BluetoothConnectionStatus> = /*@__PURE__*/\n  messageDesc(file_connection_status, 4);\n\n/**\n *\n * Serial connection status\n *\n * @generated from message meshtastic.SerialConnectionStatus\n */\nexport type SerialConnectionStatus = Message<\"meshtastic.SerialConnectionStatus\"> & {\n  /**\n   *\n   * Serial baud rate\n   *\n   * @generated from field: uint32 baud = 1;\n   */\n  baud: number;\n\n  /**\n   *\n   * Whether the device has an active connection or not\n   *\n   * @generated from field: bool is_connected = 2;\n   */\n  isConnected: boolean;\n};\n\n/**\n * Describes the message meshtastic.SerialConnectionStatus.\n * Use `create(SerialConnectionStatusSchema)` to create a new message.\n */\nexport const SerialConnectionStatusSchema: GenMessage<SerialConnectionStatus> = /*@__PURE__*/\n  messageDesc(file_connection_status, 5);\n\n","// @generated by protoc-gen-es v2.1.0 with parameter \"target=ts\"\n// @generated from file mesh.proto (package meshtastic, syntax proto3)\n/* eslint-disable */\n\nimport type { GenEnum, GenFile, GenMessage } from \"@bufbuild/protobuf/codegenv1\";\nimport { enumDesc, fileDesc, messageDesc } from \"@bufbuild/protobuf/codegenv1\";\nimport type { Channel } from \"./channel_pb.js\";\nimport { file_channel } from \"./channel_pb.js\";\nimport type { Config, Config_DeviceConfig_Role } from \"./config_pb.js\";\nimport { file_config } from \"./config_pb.js\";\nimport type { ModuleConfig, RemoteHardwarePin } from \"./module_config_pb.js\";\nimport { file_module_config } from \"./module_config_pb.js\";\nimport type { PortNum } from \"./portnums_pb.js\";\nimport { file_portnums } from \"./portnums_pb.js\";\nimport type { DeviceMetrics } from \"./telemetry_pb.js\";\nimport { file_telemetry } from \"./telemetry_pb.js\";\nimport type { XModem } from \"./xmodem_pb.js\";\nimport { file_xmodem } from \"./xmodem_pb.js\";\nimport type { DeviceUIConfig } from \"./device_ui_pb.js\";\nimport { file_device_ui } from \"./device_ui_pb.js\";\nimport type { Message } from \"npm:@bufbuild/protobuf@^2.1.0\";\n\n/**\n * Describes the file mesh.proto.\n */\nexport const file_mesh: GenFile = /*@__PURE__*/\n  fileDesc(\"CgptZXNoLnByb3RvEgptZXNodGFzdGljIocHCghQb3NpdGlvbhIXCgpsYXRpdHVkZV9pGAEgASgPSACIAQESGAoLbG9uZ2l0dWRlX2kYAiABKA9IAYgBARIVCghhbHRpdHVkZRgDIAEoBUgCiAEBEgwKBHRpbWUYBCABKAcSNwoPbG9jYXRpb25fc291cmNlGAUgASgOMh4ubWVzaHRhc3RpYy5Qb3NpdGlvbi5Mb2NTb3VyY2USNwoPYWx0aXR1ZGVfc291cmNlGAYgASgOMh4ubWVzaHRhc3RpYy5Qb3NpdGlvbi5BbHRTb3VyY2USEQoJdGltZXN0YW1wGAcgASgHEh8KF3RpbWVzdGFtcF9taWxsaXNfYWRqdXN0GAggASgFEhkKDGFsdGl0dWRlX2hhZRgJIAEoEUgDiAEBEigKG2FsdGl0dWRlX2dlb2lkYWxfc2VwYXJhdGlvbhgKIAEoEUgEiAEBEgwKBFBET1AYCyABKA0SDAoESERPUBgMIAEoDRIMCgRWRE9QGA0gASgNEhQKDGdwc19hY2N1cmFjeRgOIAEoDRIZCgxncm91bmRfc3BlZWQYDyABKA1IBYgBARIZCgxncm91bmRfdHJhY2sYECABKA1IBogBARITCgtmaXhfcXVhbGl0eRgRIAEoDRIQCghmaXhfdHlwZRgSIAEoDRIUCgxzYXRzX2luX3ZpZXcYEyABKA0SEQoJc2Vuc29yX2lkGBQgASgNEhMKC25leHRfdXBkYXRlGBUgASgNEhIKCnNlcV9udW1iZXIYFiABKA0SFgoOcHJlY2lzaW9uX2JpdHMYFyABKA0iTgoJTG9jU291cmNlEg0KCUxPQ19VTlNFVBAAEg4KCkxPQ19NQU5VQUwQARIQCgxMT0NfSU5URVJOQUwQAhIQCgxMT0NfRVhURVJOQUwQAyJiCglBbHRTb3VyY2USDQoJQUxUX1VOU0VUEAASDgoKQUxUX01BTlVBTBABEhAKDEFMVF9JTlRFUk5BTBACEhAKDEFMVF9FWFRFUk5BTBADEhIKDkFMVF9CQVJPTUVUUklDEARCDQoLX2xhdGl0dWRlX2lCDgoMX2xvbmdpdHVkZV9pQgsKCV9hbHRpdHVkZUIPCg1fYWx0aXR1ZGVfaGFlQh4KHF9hbHRpdHVkZV9nZW9pZGFsX3NlcGFyYXRpb25CDwoNX2dyb3VuZF9zcGVlZEIPCg1fZ3JvdW5kX3RyYWNrItgBCgRVc2VyEgoKAmlkGAEgASgJEhEKCWxvbmdfbmFtZRgCIAEoCRISCgpzaG9ydF9uYW1lGAMgASgJEhMKB21hY2FkZHIYBCABKAxCAhgBEisKCGh3X21vZGVsGAUgASgOMhkubWVzaHRhc3RpYy5IYXJkd2FyZU1vZGVsEhMKC2lzX2xpY2Vuc2VkGAYgASgIEjIKBHJvbGUYByABKA4yJC5tZXNodGFzdGljLkNvbmZpZy5EZXZpY2VDb25maWcuUm9sZRISCgpwdWJsaWNfa2V5GAggASgMIloKDlJvdXRlRGlzY292ZXJ5Eg0KBXJvdXRlGAEgAygHEhMKC3Nucl90b3dhcmRzGAIgAygFEhIKCnJvdXRlX2JhY2sYAyADKAcSEAoIc25yX2JhY2sYBCADKAUi4gMKB1JvdXRpbmcSMwoNcm91dGVfcmVxdWVzdBgBIAEoCzIaLm1lc2h0YXN0aWMuUm91dGVEaXNjb3ZlcnlIABIxCgtyb3V0ZV9yZXBseRgCIAEoCzIaLm1lc2h0YXN0aWMuUm91dGVEaXNjb3ZlcnlIABIxCgxlcnJvcl9yZWFzb24YAyABKA4yGS5tZXNodGFzdGljLlJvdXRpbmcuRXJyb3JIACKwAgoFRXJyb3ISCAoETk9ORRAAEgwKCE5PX1JPVVRFEAESCwoHR09UX05BSxACEgsKB1RJTUVPVVQQAxIQCgxOT19JTlRFUkZBQ0UQBBISCg5NQVhfUkVUUkFOU01JVBAFEg4KCk5PX0NIQU5ORUwQBhINCglUT09fTEFSR0UQBxIPCgtOT19SRVNQT05TRRAIEhQKEERVVFlfQ1lDTEVfTElNSVQQCRIPCgtCQURfUkVRVUVTVBAgEhIKDk5PVF9BVVRIT1JJWkVEECESDgoKUEtJX0ZBSUxFRBAiEhYKElBLSV9VTktOT1dOX1BVQktFWRAjEhkKFUFETUlOX0JBRF9TRVNTSU9OX0tFWRAkEiEKHUFETUlOX1BVQkxJQ19LRVlfVU5BVVRIT1JJWkVEECVCCQoHdmFyaWFudCLLAQoERGF0YRIkCgdwb3J0bnVtGAEgASgOMhMubWVzaHRhc3RpYy5Qb3J0TnVtEg8KB3BheWxvYWQYAiABKAwSFQoNd2FudF9yZXNwb25zZRgDIAEoCBIMCgRkZXN0GAQgASgHEg4KBnNvdXJjZRgFIAEoBxISCgpyZXF1ZXN0X2lkGAYgASgHEhAKCHJlcGx5X2lkGAcgASgHEg0KBWVtb2ppGAggASgHEhUKCGJpdGZpZWxkGAkgASgNSACIAQFCCwoJX2JpdGZpZWxkIrwBCghXYXlwb2ludBIKCgJpZBgBIAEoDRIXCgpsYXRpdHVkZV9pGAIgASgPSACIAQESGAoLbG9uZ2l0dWRlX2kYAyABKA9IAYgBARIOCgZleHBpcmUYBCABKA0SEQoJbG9ja2VkX3RvGAUgASgNEgwKBG5hbWUYBiABKAkSEwoLZGVzY3JpcHRpb24YByABKAkSDAoEaWNvbhgIIAEoB0INCgtfbGF0aXR1ZGVfaUIOCgxfbG9uZ2l0dWRlX2kibAoWTXF0dENsaWVudFByb3h5TWVzc2FnZRINCgV0b3BpYxgBIAEoCRIOCgRkYXRhGAIgASgMSAASDgoEdGV4dBgDIAEoCUgAEhAKCHJldGFpbmVkGAQgASgIQhEKD3BheWxvYWRfdmFyaWFudCLYBAoKTWVzaFBhY2tldBIMCgRmcm9tGAEgASgHEgoKAnRvGAIgASgHEg8KB2NoYW5uZWwYAyABKA0SIwoHZGVjb2RlZBgEIAEoCzIQLm1lc2h0YXN0aWMuRGF0YUgAEhMKCWVuY3J5cHRlZBgFIAEoDEgAEgoKAmlkGAYgASgHEg8KB3J4X3RpbWUYByABKAcSDgoGcnhfc25yGAggASgCEhEKCWhvcF9saW1pdBgJIAEoDRIQCgh3YW50X2FjaxgKIAEoCBIxCghwcmlvcml0eRgLIAEoDjIfLm1lc2h0YXN0aWMuTWVzaFBhY2tldC5Qcmlvcml0eRIPCgdyeF9yc3NpGAwgASgFEjMKB2RlbGF5ZWQYDSABKA4yHi5tZXNodGFzdGljLk1lc2hQYWNrZXQuRGVsYXllZEICGAESEAoIdmlhX21xdHQYDiABKAgSEQoJaG9wX3N0YXJ0GA8gASgNEhIKCnB1YmxpY19rZXkYECABKAwSFQoNcGtpX2VuY3J5cHRlZBgRIAEoCCJzCghQcmlvcml0eRIJCgVVTlNFVBAAEgcKA01JThABEg4KCkJBQ0tHUk9VTkQQChILCgdERUZBVUxUEEASDAoIUkVMSUFCTEUQRhIMCghSRVNQT05TRRBQEggKBEhJR0gQZBIHCgNBQ0sQeBIHCgNNQVgQfyJCCgdEZWxheWVkEgwKCE5PX0RFTEFZEAASFQoRREVMQVlFRF9CUk9BRENBU1QQARISCg5ERUxBWUVEX0RJUkVDVBACQhEKD3BheWxvYWRfdmFyaWFudCKRAgoITm9kZUluZm8SCwoDbnVtGAEgASgNEh4KBHVzZXIYAiABKAsyEC5tZXNodGFzdGljLlVzZXISJgoIcG9zaXRpb24YAyABKAsyFC5tZXNodGFzdGljLlBvc2l0aW9uEgsKA3NuchgEIAEoAhISCgpsYXN0X2hlYXJkGAUgASgHEjEKDmRldmljZV9tZXRyaWNzGAYgASgLMhkubWVzaHRhc3RpYy5EZXZpY2VNZXRyaWNzEg8KB2NoYW5uZWwYByABKA0SEAoIdmlhX21xdHQYCCABKAgSFgoJaG9wc19hd2F5GAkgASgNSACIAQESEwoLaXNfZmF2b3JpdGUYCiABKAhCDAoKX2hvcHNfYXdheSJjCgpNeU5vZGVJbmZvEhMKC215X25vZGVfbnVtGAEgASgNEhQKDHJlYm9vdF9jb3VudBgIIAEoDRIXCg9taW5fYXBwX3ZlcnNpb24YCyABKA0SEQoJZGV2aWNlX2lkGAwgASgMIsABCglMb2dSZWNvcmQSDwoHbWVzc2FnZRgBIAEoCRIMCgR0aW1lGAIgASgHEg4KBnNvdXJjZRgDIAEoCRIqCgVsZXZlbBgEIAEoDjIbLm1lc2h0YXN0aWMuTG9nUmVjb3JkLkxldmVsIlgKBUxldmVsEgkKBVVOU0VUEAASDAoIQ1JJVElDQUwQMhIJCgVFUlJPUhAoEgsKB1dBUk5JTkcQHhIICgRJTkZPEBQSCQoFREVCVUcQChIJCgVUUkFDRRAFIlAKC1F1ZXVlU3RhdHVzEgsKA3JlcxgBIAEoBRIMCgRmcmVlGAIgASgNEg4KBm1heGxlbhgDIAEoDRIWCg5tZXNoX3BhY2tldF9pZBgEIAEoDSL5BQoJRnJvbVJhZGlvEgoKAmlkGAEgASgNEigKBnBhY2tldBgCIAEoCzIWLm1lc2h0YXN0aWMuTWVzaFBhY2tldEgAEikKB215X2luZm8YAyABKAsyFi5tZXNodGFzdGljLk15Tm9kZUluZm9IABIpCglub2RlX2luZm8YBCABKAsyFC5tZXNodGFzdGljLk5vZGVJbmZvSAASJAoGY29uZmlnGAUgASgLMhIubWVzaHRhc3RpYy5Db25maWdIABIrCgpsb2dfcmVjb3JkGAYgASgLMhUubWVzaHRhc3RpYy5Mb2dSZWNvcmRIABIcChJjb25maWdfY29tcGxldGVfaWQYByABKA1IABISCghyZWJvb3RlZBgIIAEoCEgAEjAKDG1vZHVsZUNvbmZpZxgJIAEoCzIYLm1lc2h0YXN0aWMuTW9kdWxlQ29uZmlnSAASJgoHY2hhbm5lbBgKIAEoCzITLm1lc2h0YXN0aWMuQ2hhbm5lbEgAEi4KC3F1ZXVlU3RhdHVzGAsgASgLMhcubWVzaHRhc3RpYy5RdWV1ZVN0YXR1c0gAEioKDHhtb2RlbVBhY2tldBgMIAEoCzISLm1lc2h0YXN0aWMuWE1vZGVtSAASLgoIbWV0YWRhdGEYDSABKAsyGi5tZXNodGFzdGljLkRldmljZU1ldGFkYXRhSAASRAoWbXF0dENsaWVudFByb3h5TWVzc2FnZRgOIAEoCzIiLm1lc2h0YXN0aWMuTXF0dENsaWVudFByb3h5TWVzc2FnZUgAEigKCGZpbGVJbmZvGA8gASgLMhQubWVzaHRhc3RpYy5GaWxlSW5mb0gAEjwKEmNsaWVudE5vdGlmaWNhdGlvbhgQIAEoCzIeLm1lc2h0YXN0aWMuQ2xpZW50Tm90aWZpY2F0aW9uSAASNAoOZGV2aWNldWlDb25maWcYESABKAsyGi5tZXNodGFzdGljLkRldmljZVVJQ29uZmlnSABCEQoPcGF5bG9hZF92YXJpYW50IoMBChJDbGllbnROb3RpZmljYXRpb24SFQoIcmVwbHlfaWQYASABKA1IAIgBARIMCgR0aW1lGAIgASgHEioKBWxldmVsGAMgASgOMhsubWVzaHRhc3RpYy5Mb2dSZWNvcmQuTGV2ZWwSDwoHbWVzc2FnZRgEIAEoCUILCglfcmVwbHlfaWQiMQoIRmlsZUluZm8SEQoJZmlsZV9uYW1lGAEgASgJEhIKCnNpemVfYnl0ZXMYAiABKA0ilAIKB1RvUmFkaW8SKAoGcGFja2V0GAEgASgLMhYubWVzaHRhc3RpYy5NZXNoUGFja2V0SAASGAoOd2FudF9jb25maWdfaWQYAyABKA1IABIUCgpkaXNjb25uZWN0GAQgASgISAASKgoMeG1vZGVtUGFja2V0GAUgASgLMhIubWVzaHRhc3RpYy5YTW9kZW1IABJEChZtcXR0Q2xpZW50UHJveHlNZXNzYWdlGAYgASgLMiIubWVzaHRhc3RpYy5NcXR0Q2xpZW50UHJveHlNZXNzYWdlSAASKgoJaGVhcnRiZWF0GAcgASgLMhUubWVzaHRhc3RpYy5IZWFydGJlYXRIAEIRCg9wYXlsb2FkX3ZhcmlhbnQiQAoKQ29tcHJlc3NlZBIkCgdwb3J0bnVtGAEgASgOMhMubWVzaHRhc3RpYy5Qb3J0TnVtEgwKBGRhdGEYAiABKAwihwEKDE5laWdoYm9ySW5mbxIPCgdub2RlX2lkGAEgASgNEhcKD2xhc3Rfc2VudF9ieV9pZBgCIAEoDRIkChxub2RlX2Jyb2FkY2FzdF9pbnRlcnZhbF9zZWNzGAMgASgNEicKCW5laWdoYm9ycxgEIAMoCzIULm1lc2h0YXN0aWMuTmVpZ2hib3IiZAoITmVpZ2hib3ISDwoHbm9kZV9pZBgBIAEoDRILCgNzbnIYAiABKAISFAoMbGFzdF9yeF90aW1lGAMgASgHEiQKHG5vZGVfYnJvYWRjYXN0X2ludGVydmFsX3NlY3MYBCABKA0ivQIKDkRldmljZU1ldGFkYXRhEhgKEGZpcm13YXJlX3ZlcnNpb24YASABKAkSHAoUZGV2aWNlX3N0YXRlX3ZlcnNpb24YAiABKA0SEwoLY2FuU2h1dGRvd24YAyABKAgSDwoHaGFzV2lmaRgEIAEoCBIUCgxoYXNCbHVldG9vdGgYBSABKAgSEwoLaGFzRXRoZXJuZXQYBiABKAgSMgoEcm9sZRgHIAEoDjIkLm1lc2h0YXN0aWMuQ29uZmlnLkRldmljZUNvbmZpZy5Sb2xlEhYKDnBvc2l0aW9uX2ZsYWdzGAggASgNEisKCGh3X21vZGVsGAkgASgOMhkubWVzaHRhc3RpYy5IYXJkd2FyZU1vZGVsEhkKEWhhc1JlbW90ZUhhcmR3YXJlGAogASgIEg4KBmhhc1BLQxgLIAEoCCILCglIZWFydGJlYXQiVQoVTm9kZVJlbW90ZUhhcmR3YXJlUGluEhAKCG5vZGVfbnVtGAEgASgNEioKA3BpbhgCIAEoCzIdLm1lc2h0YXN0aWMuUmVtb3RlSGFyZHdhcmVQaW4iZQoOQ2h1bmtlZFBheWxvYWQSEgoKcGF5bG9hZF9pZBgBIAEoDRITCgtjaHVua19jb3VudBgCIAEoDRITCgtjaHVua19pbmRleBgDIAEoDRIVCg1wYXlsb2FkX2NodW5rGAQgASgMIh8KDXJlc2VuZF9jaHVua3MSDgoGY2h1bmtzGAEgAygNIqoBChZDaHVua2VkUGF5bG9hZFJlc3BvbnNlEhIKCnBheWxvYWRfaWQYASABKA0SGgoQcmVxdWVzdF90cmFuc2ZlchgCIAEoCEgAEhkKD2FjY2VwdF90cmFuc2ZlchgDIAEoCEgAEjIKDXJlc2VuZF9jaHVua3MYBCABKAsyGS5tZXNodGFzdGljLnJlc2VuZF9jaHVua3NIAEIRCg9wYXlsb2FkX3ZhcmlhbnQqywwKDUhhcmR3YXJlTW9kZWwSCQoFVU5TRVQQABIMCghUTE9SQV9WMhABEgwKCFRMT1JBX1YxEAISEgoOVExPUkFfVjJfMV8xUDYQAxIJCgVUQkVBTRAEEg8KC0hFTFRFQ19WMl8wEAUSDgoKVEJFQU1fVjBQNxAGEgoKBlRfRUNITxAHEhAKDFRMT1JBX1YxXzFQMxAIEgsKB1JBSzQ2MzEQCRIPCgtIRUxURUNfVjJfMRAKEg0KCUhFTFRFQ19WMRALEhgKFExJTFlHT19UQkVBTV9TM19DT1JFEAwSDAoIUkFLMTEyMDAQDRILCgdOQU5PX0cxEA4SEgoOVExPUkFfVjJfMV8xUDgQDxIPCgtUTE9SQV9UM19TMxAQEhQKEE5BTk9fRzFfRVhQTE9SRVIQERIRCg1OQU5PX0cyX1VMVFJBEBISDQoJTE9SQV9UWVBFEBMSCwoHV0lQSE9ORRAUEg4KCldJT19XTTExMTAQFRILCgdSQUsyNTYwEBYSEwoPSEVMVEVDX0hSVV8zNjAxEBcSGgoWSEVMVEVDX1dJUkVMRVNTX0JSSURHRRAYEg4KClNUQVRJT05fRzEQGRIMCghSQUsxMTMxMBAaEhQKEFNFTlNFTE9SQV9SUDIwNDAQGxIQCgxTRU5TRUxPUkFfUzMQHBINCglDQU5BUllPTkUQHRIPCgtSUDIwNDBfTE9SQRAeEg4KClNUQVRJT05fRzIQHxIRCg1MT1JBX1JFTEFZX1YxECASDgoKTlJGNTI4NDBESxAhEgcKA1BQUhAiEg8KC0dFTklFQkxPQ0tTECMSEQoNTlJGNTJfVU5LTk9XThAkEg0KCVBPUlREVUlOTxAlEg8KC0FORFJPSURfU0lNECYSCgoGRElZX1YxECcSFQoRTlJGNTI4NDBfUENBMTAwNTkQKBIKCgZEUl9ERVYQKRILCgdNNVNUQUNLECoSDQoJSEVMVEVDX1YzECsSEQoNSEVMVEVDX1dTTF9WMxAsEhMKD0JFVEFGUFZfMjQwMF9UWBAtEhcKE0JFVEFGUFZfOTAwX05BTk9fVFgQLhIMCghSUElfUElDTxAvEhsKF0hFTFRFQ19XSVJFTEVTU19UUkFDS0VSEDASGQoVSEVMVEVDX1dJUkVMRVNTX1BBUEVSEDESCgoGVF9ERUNLEDISDgoKVF9XQVRDSF9TMxAzEhEKDVBJQ09NUFVURVJfUzMQNBIPCgtIRUxURUNfSFQ2MhA1EhIKDkVCWVRFX0VTUDMyX1MzEDYSEQoNRVNQMzJfUzNfUElDTxA3Eg0KCUNIQVRURVJfMhA4Eh4KGkhFTFRFQ19XSVJFTEVTU19QQVBFUl9WMV8wEDkSIAocSEVMVEVDX1dJUkVMRVNTX1RSQUNLRVJfVjFfMBA6EgsKB1VOUEhPTkUQOxIMCghURF9MT1JBQxA8EhMKD0NERUJZVEVfRU9SQV9TMxA9Eg8KC1RXQ19NRVNIX1Y0ED4SFgoSTlJGNTJfUFJPTUlDUk9fRElZED8SHwobUkFESU9NQVNURVJfOTAwX0JBTkRJVF9OQU5PEEASHAoYSEVMVEVDX0NBUFNVTEVfU0VOU09SX1YzEEESHQoZSEVMVEVDX1ZJU0lPTl9NQVNURVJfVDE5MBBCEh0KGUhFTFRFQ19WSVNJT05fTUFTVEVSX0UyMTMQQxIdChlIRUxURUNfVklTSU9OX01BU1RFUl9FMjkwEEQSGQoVSEVMVEVDX01FU0hfTk9ERV9UMTE0EEUSFgoSU0VOU0VDQVBfSU5ESUNBVE9SEEYSEwoPVFJBQ0tFUl9UMTAwMF9FEEcSCwoHUkFLMzE3MhBIEgoKBldJT19FNRBJEhoKFlJBRElPTUFTVEVSXzkwMF9CQU5ESVQQShITCg9NRTI1TFMwMV80WTEwVEQQSxIYChRSUDIwNDBfRkVBVEhFUl9SRk05NRBMEhUKEU01U1RBQ0tfQ09SRUJBU0lDEE0SEQoNTTVTVEFDS19DT1JFMhBOEg0KCVJQSV9QSUNPMhBPEhIKDk01U1RBQ0tfQ09SRVMzEFASEQoNU0VFRURfWElBT19TMxBREgsKB01TMjRTRjEQUhIMCghUTE9SQV9DNhBTEg8KClBSSVZBVEVfSFcQ/wEqLAoJQ29uc3RhbnRzEggKBFpFUk8QABIVChBEQVRBX1BBWUxPQURfTEVOEO0BKrQCChFDcml0aWNhbEVycm9yQ29kZRIICgROT05FEAASDwoLVFhfV0FUQ0hET0cQARIUChBTTEVFUF9FTlRFUl9XQUlUEAISDAoITk9fUkFESU8QAxIPCgtVTlNQRUNJRklFRBAEEhUKEVVCTE9YX1VOSVRfRkFJTEVEEAUSDQoJTk9fQVhQMTkyEAYSGQoVSU5WQUxJRF9SQURJT19TRVRUSU5HEAcSEwoPVFJBTlNNSVRfRkFJTEVEEAgSDAoIQlJPV05PVVQQCRISCg5TWDEyNjJfRkFJTFVSRRAKEhEKDVJBRElPX1NQSV9CVUcQCxIgChxGTEFTSF9DT1JSVVBUSU9OX1JFQ09WRVJBQkxFEAwSIgoeRkxBU0hfQ09SUlVQVElPTl9VTlJFQ09WRVJBQkxFEA1CXwoTY29tLmdlZWtzdmlsbGUubWVzaEIKTWVzaFByb3Rvc1oiZ2l0aHViLmNvbS9tZXNodGFzdGljL2dvL2dlbmVyYXRlZKoCFE1lc2h0YXN0aWMuUHJvdG9idWZzugIAYgZwcm90bzM\", [file_channel, file_config, file_module_config, file_portnums, file_telemetry, file_xmodem, file_device_ui]);\n\n/**\n *\n * a gps position\n *\n * @generated from message meshtastic.Position\n */\nexport type Position = Message<\"meshtastic.Position\"> & {\n  /**\n   *\n   * The new preferred location encoding, multiply by 1e-7 to get degrees\n   * in floating point\n   *\n   * @generated from field: optional sfixed32 latitude_i = 1;\n   */\n  latitudeI?: number;\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from field: optional sfixed32 longitude_i = 2;\n   */\n  longitudeI?: number;\n\n  /**\n   *\n   * In meters above MSL (but see issue #359)\n   *\n   * @generated from field: optional int32 altitude = 3;\n   */\n  altitude?: number;\n\n  /**\n   *\n   * This is usually not sent over the mesh (to save space), but it is sent\n   * from the phone so that the local device can set its time if it is sent over\n   * the mesh (because there are devices on the mesh without GPS or RTC).\n   * seconds since 1970\n   *\n   * @generated from field: fixed32 time = 4;\n   */\n  time: number;\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from field: meshtastic.Position.LocSource location_source = 5;\n   */\n  locationSource: Position_LocSource;\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from field: meshtastic.Position.AltSource altitude_source = 6;\n   */\n  altitudeSource: Position_AltSource;\n\n  /**\n   *\n   * Positional timestamp (actual timestamp of GPS solution) in integer epoch seconds\n   *\n   * @generated from field: fixed32 timestamp = 7;\n   */\n  timestamp: number;\n\n  /**\n   *\n   * Pos. timestamp milliseconds adjustment (rarely available or required)\n   *\n   * @generated from field: int32 timestamp_millis_adjust = 8;\n   */\n  timestampMillisAdjust: number;\n\n  /**\n   *\n   * HAE altitude in meters - can be used instead of MSL altitude\n   *\n   * @generated from field: optional sint32 altitude_hae = 9;\n   */\n  altitudeHae?: number;\n\n  /**\n   *\n   * Geoidal separation in meters\n   *\n   * @generated from field: optional sint32 altitude_geoidal_separation = 10;\n   */\n  altitudeGeoidalSeparation?: number;\n\n  /**\n   *\n   * Horizontal, Vertical and Position Dilution of Precision, in 1/100 units\n   * - PDOP is sufficient for most cases\n   * - for higher precision scenarios, HDOP and VDOP can be used instead,\n   *   in which case PDOP becomes redundant (PDOP=sqrt(HDOP^2 + VDOP^2))\n   * TODO: REMOVE/INTEGRATE\n   *\n   * @generated from field: uint32 PDOP = 11;\n   */\n  PDOP: number;\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from field: uint32 HDOP = 12;\n   */\n  HDOP: number;\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from field: uint32 VDOP = 13;\n   */\n  VDOP: number;\n\n  /**\n   *\n   * GPS accuracy (a hardware specific constant) in mm\n   *   multiplied with DOP to calculate positional accuracy\n   * Default: \"'bout three meters-ish\" :)\n   *\n   * @generated from field: uint32 gps_accuracy = 14;\n   */\n  gpsAccuracy: number;\n\n  /**\n   *\n   * Ground speed in m/s and True North TRACK in 1/100 degrees\n   * Clarification of terms:\n   * - \"track\" is the direction of motion (measured in horizontal plane)\n   * - \"heading\" is where the fuselage points (measured in horizontal plane)\n   * - \"yaw\" indicates a relative rotation about the vertical axis\n   * TODO: REMOVE/INTEGRATE\n   *\n   * @generated from field: optional uint32 ground_speed = 15;\n   */\n  groundSpeed?: number;\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from field: optional uint32 ground_track = 16;\n   */\n  groundTrack?: number;\n\n  /**\n   *\n   * GPS fix quality (from NMEA GxGGA statement or similar)\n   *\n   * @generated from field: uint32 fix_quality = 17;\n   */\n  fixQuality: number;\n\n  /**\n   *\n   * GPS fix type 2D/3D (from NMEA GxGSA statement)\n   *\n   * @generated from field: uint32 fix_type = 18;\n   */\n  fixType: number;\n\n  /**\n   *\n   * GPS \"Satellites in View\" number\n   *\n   * @generated from field: uint32 sats_in_view = 19;\n   */\n  satsInView: number;\n\n  /**\n   *\n   * Sensor ID - in case multiple positioning sensors are being used\n   *\n   * @generated from field: uint32 sensor_id = 20;\n   */\n  sensorId: number;\n\n  /**\n   *\n   * Estimated/expected time (in seconds) until next update:\n   * - if we update at fixed intervals of X seconds, use X\n   * - if we update at dynamic intervals (based on relative movement etc),\n   *   but \"AT LEAST every Y seconds\", use Y\n   *\n   * @generated from field: uint32 next_update = 21;\n   */\n  nextUpdate: number;\n\n  /**\n   *\n   * A sequence number, incremented with each Position message to help\n   *   detect lost updates if needed\n   *\n   * @generated from field: uint32 seq_number = 22;\n   */\n  seqNumber: number;\n\n  /**\n   *\n   * Indicates the bits of precision set by the sending node\n   *\n   * @generated from field: uint32 precision_bits = 23;\n   */\n  precisionBits: number;\n};\n\n/**\n * Describes the message meshtastic.Position.\n * Use `create(PositionSchema)` to create a new message.\n */\nexport const PositionSchema: GenMessage<Position> = /*@__PURE__*/\n  messageDesc(file_mesh, 0);\n\n/**\n *\n * How the location was acquired: manual, onboard GPS, external (EUD) GPS\n *\n * @generated from enum meshtastic.Position.LocSource\n */\nexport enum Position_LocSource {\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: LOC_UNSET = 0;\n   */\n  LOC_UNSET = 0,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: LOC_MANUAL = 1;\n   */\n  LOC_MANUAL = 1,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: LOC_INTERNAL = 2;\n   */\n  LOC_INTERNAL = 2,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: LOC_EXTERNAL = 3;\n   */\n  LOC_EXTERNAL = 3,\n}\n\n/**\n * Describes the enum meshtastic.Position.LocSource.\n */\nexport const Position_LocSourceSchema: GenEnum<Position_LocSource> = /*@__PURE__*/\n  enumDesc(file_mesh, 0, 0);\n\n/**\n *\n * How the altitude was acquired: manual, GPS int/ext, etc\n * Default: same as location_source if present\n *\n * @generated from enum meshtastic.Position.AltSource\n */\nexport enum Position_AltSource {\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: ALT_UNSET = 0;\n   */\n  ALT_UNSET = 0,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: ALT_MANUAL = 1;\n   */\n  ALT_MANUAL = 1,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: ALT_INTERNAL = 2;\n   */\n  ALT_INTERNAL = 2,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: ALT_EXTERNAL = 3;\n   */\n  ALT_EXTERNAL = 3,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: ALT_BAROMETRIC = 4;\n   */\n  ALT_BAROMETRIC = 4,\n}\n\n/**\n * Describes the enum meshtastic.Position.AltSource.\n */\nexport const Position_AltSourceSchema: GenEnum<Position_AltSource> = /*@__PURE__*/\n  enumDesc(file_mesh, 0, 1);\n\n/**\n *\n * Broadcast when a newly powered mesh node wants to find a node num it can use\n * Sent from the phone over bluetooth to set the user id for the owner of this node.\n * Also sent from nodes to each other when a new node signs on (so all clients can have this info)\n * The algorithm is as follows:\n * when a node starts up, it broadcasts their user and the normal flow is for all\n * other nodes to reply with their User as well (so the new node can build its nodedb)\n * If a node ever receives a User (not just the first broadcast) message where\n * the sender node number equals our node number, that indicates a collision has\n * occurred and the following steps should happen:\n * If the receiving node (that was already in the mesh)'s macaddr is LOWER than the\n * new User who just tried to sign in: it gets to keep its nodenum.\n * We send a broadcast message of OUR User (we use a broadcast so that the other node can\n * receive our message, considering we have the same id - it also serves to let\n * observers correct their nodedb) - this case is rare so it should be okay.\n * If any node receives a User where the macaddr is GTE than their local macaddr,\n * they have been vetoed and should pick a new random nodenum (filtering against\n * whatever it knows about the nodedb) and rebroadcast their User.\n * A few nodenums are reserved and will never be requested:\n * 0xff - broadcast\n * 0 through 3 - for future use\n *\n * @generated from message meshtastic.User\n */\nexport type User = Message<\"meshtastic.User\"> & {\n  /**\n   *\n   * A globally unique ID string for this user.\n   * In the case of Signal that would mean +16504442323, for the default macaddr derived id it would be !<8 hexidecimal bytes>.\n   * Note: app developers are encouraged to also use the following standard\n   * node IDs \"^all\" (for broadcast), \"^local\" (for the locally connected node)\n   *\n   * @generated from field: string id = 1;\n   */\n  id: string;\n\n  /**\n   *\n   * A full name for this user, i.e. \"Kevin Hester\"\n   *\n   * @generated from field: string long_name = 2;\n   */\n  longName: string;\n\n  /**\n   *\n   * A VERY short name, ideally two characters.\n   * Suitable for a tiny OLED screen\n   *\n   * @generated from field: string short_name = 3;\n   */\n  shortName: string;\n\n  /**\n   *\n   * Deprecated in Meshtastic 2.1.x\n   * This is the addr of the radio.\n   * Not populated by the phone, but added by the esp32 when broadcasting\n   *\n   * @generated from field: bytes macaddr = 4 [deprecated = true];\n   * @deprecated\n   */\n  macaddr: Uint8Array;\n\n  /**\n   *\n   * TBEAM, HELTEC, etc...\n   * Starting in 1.2.11 moved to hw_model enum in the NodeInfo object.\n   * Apps will still need the string here for older builds\n   * (so OTA update can find the right image), but if the enum is available it will be used instead.\n   *\n   * @generated from field: meshtastic.HardwareModel hw_model = 5;\n   */\n  hwModel: HardwareModel;\n\n  /**\n   *\n   * In some regions Ham radio operators have different bandwidth limitations than others.\n   * If this user is a licensed operator, set this flag.\n   * Also, \"long_name\" should be their licence number.\n   *\n   * @generated from field: bool is_licensed = 6;\n   */\n  isLicensed: boolean;\n\n  /**\n   *\n   * Indicates that the user's role in the mesh\n   *\n   * @generated from field: meshtastic.Config.DeviceConfig.Role role = 7;\n   */\n  role: Config_DeviceConfig_Role;\n\n  /**\n   *\n   * The public key of the user's device.\n   * This is sent out to other nodes on the mesh to allow them to compute a shared secret key.\n   *\n   * @generated from field: bytes public_key = 8;\n   */\n  publicKey: Uint8Array;\n};\n\n/**\n * Describes the message meshtastic.User.\n * Use `create(UserSchema)` to create a new message.\n */\nexport const UserSchema: GenMessage<User> = /*@__PURE__*/\n  messageDesc(file_mesh, 1);\n\n/**\n *\n * A message used in a traceroute\n *\n * @generated from message meshtastic.RouteDiscovery\n */\nexport type RouteDiscovery = Message<\"meshtastic.RouteDiscovery\"> & {\n  /**\n   *\n   * The list of nodenums this packet has visited so far to the destination.\n   *\n   * @generated from field: repeated fixed32 route = 1;\n   */\n  route: number[];\n\n  /**\n   *\n   * The list of SNRs (in dB, scaled by 4) in the route towards the destination.\n   *\n   * @generated from field: repeated int32 snr_towards = 2;\n   */\n  snrTowards: number[];\n\n  /**\n   *\n   * The list of nodenums the packet has visited on the way back from the destination.\n   *\n   * @generated from field: repeated fixed32 route_back = 3;\n   */\n  routeBack: number[];\n\n  /**\n   *\n   * The list of SNRs (in dB, scaled by 4) in the route back from the destination.\n   *\n   * @generated from field: repeated int32 snr_back = 4;\n   */\n  snrBack: number[];\n};\n\n/**\n * Describes the message meshtastic.RouteDiscovery.\n * Use `create(RouteDiscoverySchema)` to create a new message.\n */\nexport const RouteDiscoverySchema: GenMessage<RouteDiscovery> = /*@__PURE__*/\n  messageDesc(file_mesh, 2);\n\n/**\n *\n * A Routing control Data packet handled by the routing module\n *\n * @generated from message meshtastic.Routing\n */\nexport type Routing = Message<\"meshtastic.Routing\"> & {\n  /**\n   * @generated from oneof meshtastic.Routing.variant\n   */\n  variant: {\n    /**\n     *\n     * A route request going from the requester\n     *\n     * @generated from field: meshtastic.RouteDiscovery route_request = 1;\n     */\n    value: RouteDiscovery;\n    case: \"routeRequest\";\n  } | {\n    /**\n     *\n     * A route reply\n     *\n     * @generated from field: meshtastic.RouteDiscovery route_reply = 2;\n     */\n    value: RouteDiscovery;\n    case: \"routeReply\";\n  } | {\n    /**\n     *\n     * A failure in delivering a message (usually used for routing control messages, but might be provided\n     * in addition to ack.fail_id to provide details on the type of failure).\n     *\n     * @generated from field: meshtastic.Routing.Error error_reason = 3;\n     */\n    value: Routing_Error;\n    case: \"errorReason\";\n  } | { case: undefined; value?: undefined };\n};\n\n/**\n * Describes the message meshtastic.Routing.\n * Use `create(RoutingSchema)` to create a new message.\n */\nexport const RoutingSchema: GenMessage<Routing> = /*@__PURE__*/\n  messageDesc(file_mesh, 3);\n\n/**\n *\n * A failure in delivering a message (usually used for routing control messages, but might be provided in addition to ack.fail_id to provide\n * details on the type of failure).\n *\n * @generated from enum meshtastic.Routing.Error\n */\nexport enum Routing_Error {\n  /**\n   *\n   * This message is not a failure\n   *\n   * @generated from enum value: NONE = 0;\n   */\n  NONE = 0,\n\n  /**\n   *\n   * Our node doesn't have a route to the requested destination anymore.\n   *\n   * @generated from enum value: NO_ROUTE = 1;\n   */\n  NO_ROUTE = 1,\n\n  /**\n   *\n   * We received a nak while trying to forward on your behalf\n   *\n   * @generated from enum value: GOT_NAK = 2;\n   */\n  GOT_NAK = 2,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: TIMEOUT = 3;\n   */\n  TIMEOUT = 3,\n\n  /**\n   *\n   * No suitable interface could be found for delivering this packet\n   *\n   * @generated from enum value: NO_INTERFACE = 4;\n   */\n  NO_INTERFACE = 4,\n\n  /**\n   *\n   * We reached the max retransmission count (typically for naive flood routing)\n   *\n   * @generated from enum value: MAX_RETRANSMIT = 5;\n   */\n  MAX_RETRANSMIT = 5,\n\n  /**\n   *\n   * No suitable channel was found for sending this packet (i.e. was requested channel index disabled?)\n   *\n   * @generated from enum value: NO_CHANNEL = 6;\n   */\n  NO_CHANNEL = 6,\n\n  /**\n   *\n   * The packet was too big for sending (exceeds interface MTU after encoding)\n   *\n   * @generated from enum value: TOO_LARGE = 7;\n   */\n  TOO_LARGE = 7,\n\n  /**\n   *\n   * The request had want_response set, the request reached the destination node, but no service on that node wants to send a response\n   * (possibly due to bad channel permissions)\n   *\n   * @generated from enum value: NO_RESPONSE = 8;\n   */\n  NO_RESPONSE = 8,\n\n  /**\n   *\n   * Cannot send currently because duty cycle regulations will be violated.\n   *\n   * @generated from enum value: DUTY_CYCLE_LIMIT = 9;\n   */\n  DUTY_CYCLE_LIMIT = 9,\n\n  /**\n   *\n   * The application layer service on the remote node received your request, but considered your request somehow invalid\n   *\n   * @generated from enum value: BAD_REQUEST = 32;\n   */\n  BAD_REQUEST = 32,\n\n  /**\n   *\n   * The application layer service on the remote node received your request, but considered your request not authorized\n   * (i.e you did not send the request on the required bound channel)\n   *\n   * @generated from enum value: NOT_AUTHORIZED = 33;\n   */\n  NOT_AUTHORIZED = 33,\n\n  /**\n   *\n   * The client specified a PKI transport, but the node was unable to send the packet using PKI (and did not send the message at all)\n   *\n   * @generated from enum value: PKI_FAILED = 34;\n   */\n  PKI_FAILED = 34,\n\n  /**\n   *\n   * The receiving node does not have a Public Key to decode with\n   *\n   * @generated from enum value: PKI_UNKNOWN_PUBKEY = 35;\n   */\n  PKI_UNKNOWN_PUBKEY = 35,\n\n  /**\n   *\n   * Admin packet otherwise checks out, but uses a bogus or expired session key\n   *\n   * @generated from enum value: ADMIN_BAD_SESSION_KEY = 36;\n   */\n  ADMIN_BAD_SESSION_KEY = 36,\n\n  /**\n   *\n   * Admin packet sent using PKC, but not from a public key on the admin key list\n   *\n   * @generated from enum value: ADMIN_PUBLIC_KEY_UNAUTHORIZED = 37;\n   */\n  ADMIN_PUBLIC_KEY_UNAUTHORIZED = 37,\n}\n\n/**\n * Describes the enum meshtastic.Routing.Error.\n */\nexport const Routing_ErrorSchema: GenEnum<Routing_Error> = /*@__PURE__*/\n  enumDesc(file_mesh, 3, 0);\n\n/**\n *\n * (Formerly called SubPacket)\n * The payload portion fo a packet, this is the actual bytes that are sent\n * inside a radio packet (because from/to are broken out by the comms library)\n *\n * @generated from message meshtastic.Data\n */\nexport type Data = Message<\"meshtastic.Data\"> & {\n  /**\n   *\n   * Formerly named typ and of type Type\n   *\n   * @generated from field: meshtastic.PortNum portnum = 1;\n   */\n  portnum: PortNum;\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from field: bytes payload = 2;\n   */\n  payload: Uint8Array;\n\n  /**\n   *\n   * Not normally used, but for testing a sender can request that recipient\n   * responds in kind (i.e. if it received a position, it should unicast back it's position).\n   * Note: that if you set this on a broadcast you will receive many replies.\n   *\n   * @generated from field: bool want_response = 3;\n   */\n  wantResponse: boolean;\n\n  /**\n   *\n   * The address of the destination node.\n   * This field is is filled in by the mesh radio device software, application\n   * layer software should never need it.\n   * RouteDiscovery messages _must_ populate this.\n   * Other message types might need to if they are doing multihop routing.\n   *\n   * @generated from field: fixed32 dest = 4;\n   */\n  dest: number;\n\n  /**\n   *\n   * The address of the original sender for this message.\n   * This field should _only_ be populated for reliable multihop packets (to keep\n   * packets small).\n   *\n   * @generated from field: fixed32 source = 5;\n   */\n  source: number;\n\n  /**\n   *\n   * Only used in routing or response messages.\n   * Indicates the original message ID that this message is reporting failure on. (formerly called original_id)\n   *\n   * @generated from field: fixed32 request_id = 6;\n   */\n  requestId: number;\n\n  /**\n   *\n   * If set, this message is intened to be a reply to a previously sent message with the defined id.\n   *\n   * @generated from field: fixed32 reply_id = 7;\n   */\n  replyId: number;\n\n  /**\n   *\n   * Defaults to false. If true, then what is in the payload should be treated as an emoji like giving\n   * a message a heart or poop emoji.\n   *\n   * @generated from field: fixed32 emoji = 8;\n   */\n  emoji: number;\n\n  /**\n   *\n   * Bitfield for extra flags. First use is to indicate that user approves the packet being uploaded to MQTT.\n   *\n   * @generated from field: optional uint32 bitfield = 9;\n   */\n  bitfield?: number;\n};\n\n/**\n * Describes the message meshtastic.Data.\n * Use `create(DataSchema)` to create a new message.\n */\nexport const DataSchema: GenMessage<Data> = /*@__PURE__*/\n  messageDesc(file_mesh, 4);\n\n/**\n *\n * Waypoint message, used to share arbitrary locations across the mesh\n *\n * @generated from message meshtastic.Waypoint\n */\nexport type Waypoint = Message<\"meshtastic.Waypoint\"> & {\n  /**\n   *\n   * Id of the waypoint\n   *\n   * @generated from field: uint32 id = 1;\n   */\n  id: number;\n\n  /**\n   *\n   * latitude_i\n   *\n   * @generated from field: optional sfixed32 latitude_i = 2;\n   */\n  latitudeI?: number;\n\n  /**\n   *\n   * longitude_i\n   *\n   * @generated from field: optional sfixed32 longitude_i = 3;\n   */\n  longitudeI?: number;\n\n  /**\n   *\n   * Time the waypoint is to expire (epoch)\n   *\n   * @generated from field: uint32 expire = 4;\n   */\n  expire: number;\n\n  /**\n   *\n   * If greater than zero, treat the value as a nodenum only allowing them to update the waypoint.\n   * If zero, the waypoint is open to be edited by any member of the mesh.\n   *\n   * @generated from field: uint32 locked_to = 5;\n   */\n  lockedTo: number;\n\n  /**\n   *\n   * Name of the waypoint - max 30 chars\n   *\n   * @generated from field: string name = 6;\n   */\n  name: string;\n\n  /**\n   *\n   * Description of the waypoint - max 100 chars\n   *\n   * @generated from field: string description = 7;\n   */\n  description: string;\n\n  /**\n   *\n   * Designator icon for the waypoint in the form of a unicode emoji\n   *\n   * @generated from field: fixed32 icon = 8;\n   */\n  icon: number;\n};\n\n/**\n * Describes the message meshtastic.Waypoint.\n * Use `create(WaypointSchema)` to create a new message.\n */\nexport const WaypointSchema: GenMessage<Waypoint> = /*@__PURE__*/\n  messageDesc(file_mesh, 5);\n\n/**\n *\n * This message will be proxied over the PhoneAPI for the client to deliver to the MQTT server\n *\n * @generated from message meshtastic.MqttClientProxyMessage\n */\nexport type MqttClientProxyMessage = Message<\"meshtastic.MqttClientProxyMessage\"> & {\n  /**\n   *\n   * The MQTT topic this message will be sent /received on\n   *\n   * @generated from field: string topic = 1;\n   */\n  topic: string;\n\n  /**\n   *\n   * The actual service envelope payload or text for mqtt pub / sub\n   *\n   * @generated from oneof meshtastic.MqttClientProxyMessage.payload_variant\n   */\n  payloadVariant: {\n    /**\n     *\n     * Bytes\n     *\n     * @generated from field: bytes data = 2;\n     */\n    value: Uint8Array;\n    case: \"data\";\n  } | {\n    /**\n     *\n     * Text\n     *\n     * @generated from field: string text = 3;\n     */\n    value: string;\n    case: \"text\";\n  } | { case: undefined; value?: undefined };\n\n  /**\n   *\n   * Whether the message should be retained (or not)\n   *\n   * @generated from field: bool retained = 4;\n   */\n  retained: boolean;\n};\n\n/**\n * Describes the message meshtastic.MqttClientProxyMessage.\n * Use `create(MqttClientProxyMessageSchema)` to create a new message.\n */\nexport const MqttClientProxyMessageSchema: GenMessage<MqttClientProxyMessage> = /*@__PURE__*/\n  messageDesc(file_mesh, 6);\n\n/**\n *\n * A packet envelope sent/received over the mesh\n * only payload_variant is sent in the payload portion of the LORA packet.\n * The other fields are either not sent at all, or sent in the special 16 byte LORA header.\n *\n * @generated from message meshtastic.MeshPacket\n */\nexport type MeshPacket = Message<\"meshtastic.MeshPacket\"> & {\n  /**\n   *\n   * The sending node number.\n   * Note: Our crypto implementation uses this field as well.\n   * See [crypto](/docs/overview/encryption) for details.\n   *\n   * @generated from field: fixed32 from = 1;\n   */\n  from: number;\n\n  /**\n   *\n   * The (immediate) destination for this packet\n   *\n   * @generated from field: fixed32 to = 2;\n   */\n  to: number;\n\n  /**\n   *\n   * (Usually) If set, this indicates the index in the secondary_channels table that this packet was sent/received on.\n   * If unset, packet was on the primary channel.\n   * A particular node might know only a subset of channels in use on the mesh.\n   * Therefore channel_index is inherently a local concept and meaningless to send between nodes.\n   * Very briefly, while sending and receiving deep inside the device Router code, this field instead\n   * contains the 'channel hash' instead of the index.\n   * This 'trick' is only used while the payload_variant is an 'encrypted'.\n   *\n   * @generated from field: uint32 channel = 3;\n   */\n  channel: number;\n\n  /**\n   * @generated from oneof meshtastic.MeshPacket.payload_variant\n   */\n  payloadVariant: {\n    /**\n     *\n     * TODO: REPLACE\n     *\n     * @generated from field: meshtastic.Data decoded = 4;\n     */\n    value: Data;\n    case: \"decoded\";\n  } | {\n    /**\n     *\n     * TODO: REPLACE\n     *\n     * @generated from field: bytes encrypted = 5;\n     */\n    value: Uint8Array;\n    case: \"encrypted\";\n  } | { case: undefined; value?: undefined };\n\n  /**\n   *\n   * A unique ID for this packet.\n   * Always 0 for no-ack packets or non broadcast packets (and therefore take zero bytes of space).\n   * Otherwise a unique ID for this packet, useful for flooding algorithms.\n   * ID only needs to be unique on a _per sender_ basis, and it only\n   * needs to be unique for a few minutes (long enough to last for the length of\n   * any ACK or the completion of a mesh broadcast flood).\n   * Note: Our crypto implementation uses this id as well.\n   * See [crypto](/docs/overview/encryption) for details.\n   *\n   * @generated from field: fixed32 id = 6;\n   */\n  id: number;\n\n  /**\n   *\n   * The time this message was received by the esp32 (secs since 1970).\n   * Note: this field is _never_ sent on the radio link itself (to save space) Times\n   * are typically not sent over the mesh, but they will be added to any Packet\n   * (chain of SubPacket) sent to the phone (so the phone can know exact time of reception)\n   *\n   * @generated from field: fixed32 rx_time = 7;\n   */\n  rxTime: number;\n\n  /**\n   *\n   * *Never* sent over the radio links.\n   * Set during reception to indicate the SNR of this packet.\n   * Used to collect statistics on current link quality.\n   *\n   * @generated from field: float rx_snr = 8;\n   */\n  rxSnr: number;\n\n  /**\n   *\n   * If unset treated as zero (no forwarding, send to adjacent nodes only)\n   * if 1, allow hopping through one node, etc...\n   * For our usecase real world topologies probably have a max of about 3.\n   * This field is normally placed into a few of bits in the header.\n   *\n   * @generated from field: uint32 hop_limit = 9;\n   */\n  hopLimit: number;\n\n  /**\n   *\n   * This packet is being sent as a reliable message, we would prefer it to arrive at the destination.\n   * We would like to receive a ack packet in response.\n   * Broadcasts messages treat this flag specially: Since acks for broadcasts would\n   * rapidly flood the channel, the normal ack behavior is suppressed.\n   * Instead, the original sender listens to see if at least one node is rebroadcasting this packet (because naive flooding algorithm).\n   * If it hears that the odds (given typical LoRa topologies) the odds are very high that every node should eventually receive the message.\n   * So FloodingRouter.cpp generates an implicit ack which is delivered to the original sender.\n   * If after some time we don't hear anyone rebroadcast our packet, we will timeout and retransmit, using the regular resend logic.\n   * Note: This flag is normally sent in a flag bit in the header when sent over the wire\n   *\n   * @generated from field: bool want_ack = 10;\n   */\n  wantAck: boolean;\n\n  /**\n   *\n   * The priority of this message for sending.\n   * See MeshPacket.Priority description for more details.\n   *\n   * @generated from field: meshtastic.MeshPacket.Priority priority = 11;\n   */\n  priority: MeshPacket_Priority;\n\n  /**\n   *\n   * rssi of received packet. Only sent to phone for dispay purposes.\n   *\n   * @generated from field: int32 rx_rssi = 12;\n   */\n  rxRssi: number;\n\n  /**\n   *\n   * Describe if this message is delayed\n   *\n   * @generated from field: meshtastic.MeshPacket.Delayed delayed = 13 [deprecated = true];\n   * @deprecated\n   */\n  delayed: MeshPacket_Delayed;\n\n  /**\n   *\n   * Describes whether this packet passed via MQTT somewhere along the path it currently took.\n   *\n   * @generated from field: bool via_mqtt = 14;\n   */\n  viaMqtt: boolean;\n\n  /**\n   *\n   * Hop limit with which the original packet started. Sent via LoRa using three bits in the unencrypted header.\n   * When receiving a packet, the difference between hop_start and hop_limit gives how many hops it traveled.\n   *\n   * @generated from field: uint32 hop_start = 15;\n   */\n  hopStart: number;\n\n  /**\n   *\n   * Records the public key the packet was encrypted with, if applicable.\n   *\n   * @generated from field: bytes public_key = 16;\n   */\n  publicKey: Uint8Array;\n\n  /**\n   *\n   * Indicates whether the packet was en/decrypted using PKI\n   *\n   * @generated from field: bool pki_encrypted = 17;\n   */\n  pkiEncrypted: boolean;\n};\n\n/**\n * Describes the message meshtastic.MeshPacket.\n * Use `create(MeshPacketSchema)` to create a new message.\n */\nexport const MeshPacketSchema: GenMessage<MeshPacket> = /*@__PURE__*/\n  messageDesc(file_mesh, 7);\n\n/**\n *\n * The priority of this message for sending.\n * Higher priorities are sent first (when managing the transmit queue).\n * This field is never sent over the air, it is only used internally inside of a local device node.\n * API clients (either on the local node or connected directly to the node)\n * can set this parameter if necessary.\n * (values must be <= 127 to keep protobuf field to one byte in size.\n * Detailed background on this field:\n * I noticed a funny side effect of lora being so slow: Usually when making\n * a protocol there isn’t much need to use message priority to change the order\n * of transmission (because interfaces are fairly fast).\n * But for lora where packets can take a few seconds each, it is very important\n * to make sure that critical packets are sent ASAP.\n * In the case of meshtastic that means we want to send protocol acks as soon as possible\n * (to prevent unneeded retransmissions), we want routing messages to be sent next,\n * then messages marked as reliable and finally 'background' packets like periodic position updates.\n * So I bit the bullet and implemented a new (internal - not sent over the air)\n * field in MeshPacket called 'priority'.\n * And the transmission queue in the router object is now a priority queue.\n *\n * @generated from enum meshtastic.MeshPacket.Priority\n */\nexport enum MeshPacket_Priority {\n  /**\n   *\n   * Treated as Priority.DEFAULT\n   *\n   * @generated from enum value: UNSET = 0;\n   */\n  UNSET = 0,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: MIN = 1;\n   */\n  MIN = 1,\n\n  /**\n   *\n   * Background position updates are sent with very low priority -\n   * if the link is super congested they might not go out at all\n   *\n   * @generated from enum value: BACKGROUND = 10;\n   */\n  BACKGROUND = 10,\n\n  /**\n   *\n   * This priority is used for most messages that don't have a priority set\n   *\n   * @generated from enum value: DEFAULT = 64;\n   */\n  DEFAULT = 64,\n\n  /**\n   *\n   * If priority is unset but the message is marked as want_ack,\n   * assume it is important and use a slightly higher priority\n   *\n   * @generated from enum value: RELIABLE = 70;\n   */\n  RELIABLE = 70,\n\n  /**\n   *\n   * If priority is unset but the packet is a response to a request, we want it to get there relatively quickly.\n   * Furthermore, responses stop relaying packets directed to a node early.\n   *\n   * @generated from enum value: RESPONSE = 80;\n   */\n  RESPONSE = 80,\n\n  /**\n   *\n   * Higher priority for specific message types (portnums) to distinguish between other reliable packets.\n   *\n   * @generated from enum value: HIGH = 100;\n   */\n  HIGH = 100,\n\n  /**\n   *\n   * Ack/naks are sent with very high priority to ensure that retransmission\n   * stops as soon as possible\n   *\n   * @generated from enum value: ACK = 120;\n   */\n  ACK = 120,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: MAX = 127;\n   */\n  MAX = 127,\n}\n\n/**\n * Describes the enum meshtastic.MeshPacket.Priority.\n */\nexport const MeshPacket_PrioritySchema: GenEnum<MeshPacket_Priority> = /*@__PURE__*/\n  enumDesc(file_mesh, 7, 0);\n\n/**\n *\n * Identify if this is a delayed packet\n *\n * @generated from enum meshtastic.MeshPacket.Delayed\n */\nexport enum MeshPacket_Delayed {\n  /**\n   *\n   * If unset, the message is being sent in real time.\n   *\n   * @generated from enum value: NO_DELAY = 0;\n   */\n  NO_DELAY = 0,\n\n  /**\n   *\n   * The message is delayed and was originally a broadcast\n   *\n   * @generated from enum value: DELAYED_BROADCAST = 1;\n   */\n  DELAYED_BROADCAST = 1,\n\n  /**\n   *\n   * The message is delayed and was originally a direct message\n   *\n   * @generated from enum value: DELAYED_DIRECT = 2;\n   */\n  DELAYED_DIRECT = 2,\n}\n\n/**\n * Describes the enum meshtastic.MeshPacket.Delayed.\n */\nexport const MeshPacket_DelayedSchema: GenEnum<MeshPacket_Delayed> = /*@__PURE__*/\n  enumDesc(file_mesh, 7, 1);\n\n/**\n *\n * The bluetooth to device link:\n * Old BTLE protocol docs from TODO, merge in above and make real docs...\n * use protocol buffers, and NanoPB\n * messages from device to phone:\n * POSITION_UPDATE (..., time)\n * TEXT_RECEIVED(from, text, time)\n * OPAQUE_RECEIVED(from, payload, time) (for signal messages or other applications)\n * messages from phone to device:\n * SET_MYID(id, human readable long, human readable short) (send down the unique ID\n * string used for this node, a human readable string shown for that id, and a very\n * short human readable string suitable for oled screen) SEND_OPAQUE(dest, payload)\n * (for signal messages or other applications) SEND_TEXT(dest, text) Get all\n * nodes() (returns list of nodes, with full info, last time seen, loc, battery\n * level etc) SET_CONFIG (switches device to a new set of radio params and\n * preshared key, drops all existing nodes, force our node to rejoin this new group)\n * Full information about a node on the mesh\n *\n * @generated from message meshtastic.NodeInfo\n */\nexport type NodeInfo = Message<\"meshtastic.NodeInfo\"> & {\n  /**\n   *\n   * The node number\n   *\n   * @generated from field: uint32 num = 1;\n   */\n  num: number;\n\n  /**\n   *\n   * The user info for this node\n   *\n   * @generated from field: meshtastic.User user = 2;\n   */\n  user?: User;\n\n  /**\n   *\n   * This position data. Note: before 1.2.14 we would also store the last time we've heard from this node in position.time, that is no longer true.\n   * Position.time now indicates the last time we received a POSITION from that node.\n   *\n   * @generated from field: meshtastic.Position position = 3;\n   */\n  position?: Position;\n\n  /**\n   *\n   * Returns the Signal-to-noise ratio (SNR) of the last received message,\n   * as measured by the receiver. Return SNR of the last received message in dB\n   *\n   * @generated from field: float snr = 4;\n   */\n  snr: number;\n\n  /**\n   *\n   * Set to indicate the last time we received a packet from this node\n   *\n   * @generated from field: fixed32 last_heard = 5;\n   */\n  lastHeard: number;\n\n  /**\n   *\n   * The latest device metrics for the node.\n   *\n   * @generated from field: meshtastic.DeviceMetrics device_metrics = 6;\n   */\n  deviceMetrics?: DeviceMetrics;\n\n  /**\n   *\n   * local channel index we heard that node on. Only populated if its not the default channel.\n   *\n   * @generated from field: uint32 channel = 7;\n   */\n  channel: number;\n\n  /**\n   *\n   * True if we witnessed the node over MQTT instead of LoRA transport\n   *\n   * @generated from field: bool via_mqtt = 8;\n   */\n  viaMqtt: boolean;\n\n  /**\n   *\n   * Number of hops away from us this node is (0 if adjacent)\n   *\n   * @generated from field: optional uint32 hops_away = 9;\n   */\n  hopsAway?: number;\n\n  /**\n   *\n   * True if node is in our favorites list\n   * Persists between NodeDB internal clean ups\n   *\n   * @generated from field: bool is_favorite = 10;\n   */\n  isFavorite: boolean;\n};\n\n/**\n * Describes the message meshtastic.NodeInfo.\n * Use `create(NodeInfoSchema)` to create a new message.\n */\nexport const NodeInfoSchema: GenMessage<NodeInfo> = /*@__PURE__*/\n  messageDesc(file_mesh, 8);\n\n/**\n *\n * Unique local debugging info for this node\n * Note: we don't include position or the user info, because that will come in the\n * Sent to the phone in response to WantNodes.\n *\n * @generated from message meshtastic.MyNodeInfo\n */\nexport type MyNodeInfo = Message<\"meshtastic.MyNodeInfo\"> & {\n  /**\n   *\n   * Tells the phone what our node number is, default starting value is\n   * lowbyte of macaddr, but it will be fixed if that is already in use\n   *\n   * @generated from field: uint32 my_node_num = 1;\n   */\n  myNodeNum: number;\n\n  /**\n   *\n   * The total number of reboots this node has ever encountered\n   * (well - since the last time we discarded preferences)\n   *\n   * @generated from field: uint32 reboot_count = 8;\n   */\n  rebootCount: number;\n\n  /**\n   *\n   * The minimum app version that can talk to this device.\n   * Phone/PC apps should compare this to their build number and if too low tell the user they must update their app\n   *\n   * @generated from field: uint32 min_app_version = 11;\n   */\n  minAppVersion: number;\n\n  /**\n   *\n   * Unique hardware identifier for this device\n   *\n   * @generated from field: bytes device_id = 12;\n   */\n  deviceId: Uint8Array;\n};\n\n/**\n * Describes the message meshtastic.MyNodeInfo.\n * Use `create(MyNodeInfoSchema)` to create a new message.\n */\nexport const MyNodeInfoSchema: GenMessage<MyNodeInfo> = /*@__PURE__*/\n  messageDesc(file_mesh, 9);\n\n/**\n *\n * Debug output from the device.\n * To minimize the size of records inside the device code, if a time/source/level is not set\n * on the message it is assumed to be a continuation of the previously sent message.\n * This allows the device code to use fixed maxlen 64 byte strings for messages,\n * and then extend as needed by emitting multiple records.\n *\n * @generated from message meshtastic.LogRecord\n */\nexport type LogRecord = Message<\"meshtastic.LogRecord\"> & {\n  /**\n   *\n   * Log levels, chosen to match python logging conventions.\n   *\n   * @generated from field: string message = 1;\n   */\n  message: string;\n\n  /**\n   *\n   * Seconds since 1970 - or 0 for unknown/unset\n   *\n   * @generated from field: fixed32 time = 2;\n   */\n  time: number;\n\n  /**\n   *\n   * Usually based on thread name - if known\n   *\n   * @generated from field: string source = 3;\n   */\n  source: string;\n\n  /**\n   *\n   * Not yet set\n   *\n   * @generated from field: meshtastic.LogRecord.Level level = 4;\n   */\n  level: LogRecord_Level;\n};\n\n/**\n * Describes the message meshtastic.LogRecord.\n * Use `create(LogRecordSchema)` to create a new message.\n */\nexport const LogRecordSchema: GenMessage<LogRecord> = /*@__PURE__*/\n  messageDesc(file_mesh, 10);\n\n/**\n *\n * Log levels, chosen to match python logging conventions.\n *\n * @generated from enum meshtastic.LogRecord.Level\n */\nexport enum LogRecord_Level {\n  /**\n   *\n   * Log levels, chosen to match python logging conventions.\n   *\n   * @generated from enum value: UNSET = 0;\n   */\n  UNSET = 0,\n\n  /**\n   *\n   * Log levels, chosen to match python logging conventions.\n   *\n   * @generated from enum value: CRITICAL = 50;\n   */\n  CRITICAL = 50,\n\n  /**\n   *\n   * Log levels, chosen to match python logging conventions.\n   *\n   * @generated from enum value: ERROR = 40;\n   */\n  ERROR = 40,\n\n  /**\n   *\n   * Log levels, chosen to match python logging conventions.\n   *\n   * @generated from enum value: WARNING = 30;\n   */\n  WARNING = 30,\n\n  /**\n   *\n   * Log levels, chosen to match python logging conventions.\n   *\n   * @generated from enum value: INFO = 20;\n   */\n  INFO = 20,\n\n  /**\n   *\n   * Log levels, chosen to match python logging conventions.\n   *\n   * @generated from enum value: DEBUG = 10;\n   */\n  DEBUG = 10,\n\n  /**\n   *\n   * Log levels, chosen to match python logging conventions.\n   *\n   * @generated from enum value: TRACE = 5;\n   */\n  TRACE = 5,\n}\n\n/**\n * Describes the enum meshtastic.LogRecord.Level.\n */\nexport const LogRecord_LevelSchema: GenEnum<LogRecord_Level> = /*@__PURE__*/\n  enumDesc(file_mesh, 10, 0);\n\n/**\n * @generated from message meshtastic.QueueStatus\n */\nexport type QueueStatus = Message<\"meshtastic.QueueStatus\"> & {\n  /**\n   * Last attempt to queue status, ErrorCode \n   *\n   * @generated from field: int32 res = 1;\n   */\n  res: number;\n\n  /**\n   * Free entries in the outgoing queue \n   *\n   * @generated from field: uint32 free = 2;\n   */\n  free: number;\n\n  /**\n   * Maximum entries in the outgoing queue \n   *\n   * @generated from field: uint32 maxlen = 3;\n   */\n  maxlen: number;\n\n  /**\n   * What was mesh packet id that generated this response? \n   *\n   * @generated from field: uint32 mesh_packet_id = 4;\n   */\n  meshPacketId: number;\n};\n\n/**\n * Describes the message meshtastic.QueueStatus.\n * Use `create(QueueStatusSchema)` to create a new message.\n */\nexport const QueueStatusSchema: GenMessage<QueueStatus> = /*@__PURE__*/\n  messageDesc(file_mesh, 11);\n\n/**\n *\n * Packets from the radio to the phone will appear on the fromRadio characteristic.\n * It will support READ and NOTIFY. When a new packet arrives the device will BLE notify?\n * It will sit in that descriptor until consumed by the phone,\n * at which point the next item in the FIFO will be populated.\n *\n * @generated from message meshtastic.FromRadio\n */\nexport type FromRadio = Message<\"meshtastic.FromRadio\"> & {\n  /**\n   *\n   * The packet id, used to allow the phone to request missing read packets from the FIFO,\n   * see our bluetooth docs\n   *\n   * @generated from field: uint32 id = 1;\n   */\n  id: number;\n\n  /**\n   *\n   * Log levels, chosen to match python logging conventions.\n   *\n   * @generated from oneof meshtastic.FromRadio.payload_variant\n   */\n  payloadVariant: {\n    /**\n     *\n     * Log levels, chosen to match python logging conventions.\n     *\n     * @generated from field: meshtastic.MeshPacket packet = 2;\n     */\n    value: MeshPacket;\n    case: \"packet\";\n  } | {\n    /**\n     *\n     * Tells the phone what our node number is, can be -1 if we've not yet joined a mesh.\n     * NOTE: This ID must not change - to keep (minimal) compatibility with <1.2 version of android apps.\n     *\n     * @generated from field: meshtastic.MyNodeInfo my_info = 3;\n     */\n    value: MyNodeInfo;\n    case: \"myInfo\";\n  } | {\n    /**\n     *\n     * One packet is sent for each node in the on radio DB\n     * starts over with the first node in our DB\n     *\n     * @generated from field: meshtastic.NodeInfo node_info = 4;\n     */\n    value: NodeInfo;\n    case: \"nodeInfo\";\n  } | {\n    /**\n     *\n     * Include a part of the config (was: RadioConfig radio)\n     *\n     * @generated from field: meshtastic.Config config = 5;\n     */\n    value: Config;\n    case: \"config\";\n  } | {\n    /**\n     *\n     * Set to send debug console output over our protobuf stream\n     *\n     * @generated from field: meshtastic.LogRecord log_record = 6;\n     */\n    value: LogRecord;\n    case: \"logRecord\";\n  } | {\n    /**\n     *\n     * Sent as true once the device has finished sending all of the responses to want_config\n     * recipient should check if this ID matches our original request nonce, if\n     * not, it means your config responses haven't started yet.\n     * NOTE: This ID must not change - to keep (minimal) compatibility with <1.2 version of android apps.\n     *\n     * @generated from field: uint32 config_complete_id = 7;\n     */\n    value: number;\n    case: \"configCompleteId\";\n  } | {\n    /**\n     *\n     * Sent to tell clients the radio has just rebooted.\n     * Set to true if present.\n     * Not used on all transports, currently just used for the serial console.\n     * NOTE: This ID must not change - to keep (minimal) compatibility with <1.2 version of android apps.\n     *\n     * @generated from field: bool rebooted = 8;\n     */\n    value: boolean;\n    case: \"rebooted\";\n  } | {\n    /**\n     *\n     * Include module config\n     *\n     * @generated from field: meshtastic.ModuleConfig moduleConfig = 9;\n     */\n    value: ModuleConfig;\n    case: \"moduleConfig\";\n  } | {\n    /**\n     *\n     * One packet is sent for each channel\n     *\n     * @generated from field: meshtastic.Channel channel = 10;\n     */\n    value: Channel;\n    case: \"channel\";\n  } | {\n    /**\n     *\n     * Queue status info\n     *\n     * @generated from field: meshtastic.QueueStatus queueStatus = 11;\n     */\n    value: QueueStatus;\n    case: \"queueStatus\";\n  } | {\n    /**\n     *\n     * File Transfer Chunk\n     *\n     * @generated from field: meshtastic.XModem xmodemPacket = 12;\n     */\n    value: XModem;\n    case: \"xmodemPacket\";\n  } | {\n    /**\n     *\n     * Device metadata message\n     *\n     * @generated from field: meshtastic.DeviceMetadata metadata = 13;\n     */\n    value: DeviceMetadata;\n    case: \"metadata\";\n  } | {\n    /**\n     *\n     * MQTT Client Proxy Message (device sending to client / phone for publishing to MQTT)\n     *\n     * @generated from field: meshtastic.MqttClientProxyMessage mqttClientProxyMessage = 14;\n     */\n    value: MqttClientProxyMessage;\n    case: \"mqttClientProxyMessage\";\n  } | {\n    /**\n     *\n     * File system manifest messages\n     *\n     * @generated from field: meshtastic.FileInfo fileInfo = 15;\n     */\n    value: FileInfo;\n    case: \"fileInfo\";\n  } | {\n    /**\n     *\n     * Notification message to the client\n     *\n     * @generated from field: meshtastic.ClientNotification clientNotification = 16;\n     */\n    value: ClientNotification;\n    case: \"clientNotification\";\n  } | {\n    /**\n     *\n     * Persistent data for device-ui\n     *\n     * @generated from field: meshtastic.DeviceUIConfig deviceuiConfig = 17;\n     */\n    value: DeviceUIConfig;\n    case: \"deviceuiConfig\";\n  } | { case: undefined; value?: undefined };\n};\n\n/**\n * Describes the message meshtastic.FromRadio.\n * Use `create(FromRadioSchema)` to create a new message.\n */\nexport const FromRadioSchema: GenMessage<FromRadio> = /*@__PURE__*/\n  messageDesc(file_mesh, 12);\n\n/**\n *\n * A notification message from the device to the client\n * To be used for important messages that should to be displayed to the user\n * in the form of push notifications or validation messages when saving\n * invalid configuration.\n *\n * @generated from message meshtastic.ClientNotification\n */\nexport type ClientNotification = Message<\"meshtastic.ClientNotification\"> & {\n  /**\n   *\n   * The id of the packet we're notifying in response to\n   *\n   * @generated from field: optional uint32 reply_id = 1;\n   */\n  replyId?: number;\n\n  /**\n   *\n   * Seconds since 1970 - or 0 for unknown/unset\n   *\n   * @generated from field: fixed32 time = 2;\n   */\n  time: number;\n\n  /**\n   *\n   * The level type of notification\n   *\n   * @generated from field: meshtastic.LogRecord.Level level = 3;\n   */\n  level: LogRecord_Level;\n\n  /**\n   *\n   * The message body of the notification\n   *\n   * @generated from field: string message = 4;\n   */\n  message: string;\n};\n\n/**\n * Describes the message meshtastic.ClientNotification.\n * Use `create(ClientNotificationSchema)` to create a new message.\n */\nexport const ClientNotificationSchema: GenMessage<ClientNotification> = /*@__PURE__*/\n  messageDesc(file_mesh, 13);\n\n/**\n *\n * Individual File info for the device\n *\n * @generated from message meshtastic.FileInfo\n */\nexport type FileInfo = Message<\"meshtastic.FileInfo\"> & {\n  /**\n   *\n   * The fully qualified path of the file\n   *\n   * @generated from field: string file_name = 1;\n   */\n  fileName: string;\n\n  /**\n   *\n   * The size of the file in bytes\n   *\n   * @generated from field: uint32 size_bytes = 2;\n   */\n  sizeBytes: number;\n};\n\n/**\n * Describes the message meshtastic.FileInfo.\n * Use `create(FileInfoSchema)` to create a new message.\n */\nexport const FileInfoSchema: GenMessage<FileInfo> = /*@__PURE__*/\n  messageDesc(file_mesh, 14);\n\n/**\n *\n * Packets/commands to the radio will be written (reliably) to the toRadio characteristic.\n * Once the write completes the phone can assume it is handled.\n *\n * @generated from message meshtastic.ToRadio\n */\nexport type ToRadio = Message<\"meshtastic.ToRadio\"> & {\n  /**\n   *\n   * Log levels, chosen to match python logging conventions.\n   *\n   * @generated from oneof meshtastic.ToRadio.payload_variant\n   */\n  payloadVariant: {\n    /**\n     *\n     * Send this packet on the mesh\n     *\n     * @generated from field: meshtastic.MeshPacket packet = 1;\n     */\n    value: MeshPacket;\n    case: \"packet\";\n  } | {\n    /**\n     *\n     * Phone wants radio to send full node db to the phone, This is\n     * typically the first packet sent to the radio when the phone gets a\n     * bluetooth connection. The radio will respond by sending back a\n     * MyNodeInfo, a owner, a radio config and a series of\n     * FromRadio.node_infos, and config_complete\n     * the integer you write into this field will be reported back in the\n     * config_complete_id response this allows clients to never be confused by\n     * a stale old partially sent config.\n     *\n     * @generated from field: uint32 want_config_id = 3;\n     */\n    value: number;\n    case: \"wantConfigId\";\n  } | {\n    /**\n     *\n     * Tell API server we are disconnecting now.\n     * This is useful for serial links where there is no hardware/protocol based notification that the client has dropped the link.\n     * (Sending this message is optional for clients)\n     *\n     * @generated from field: bool disconnect = 4;\n     */\n    value: boolean;\n    case: \"disconnect\";\n  } | {\n    /**\n     * @generated from field: meshtastic.XModem xmodemPacket = 5;\n     */\n    value: XModem;\n    case: \"xmodemPacket\";\n  } | {\n    /**\n     *\n     * MQTT Client Proxy Message (for client / phone subscribed to MQTT sending to device)\n     *\n     * @generated from field: meshtastic.MqttClientProxyMessage mqttClientProxyMessage = 6;\n     */\n    value: MqttClientProxyMessage;\n    case: \"mqttClientProxyMessage\";\n  } | {\n    /**\n     *\n     * Heartbeat message (used to keep the device connection awake on serial)\n     *\n     * @generated from field: meshtastic.Heartbeat heartbeat = 7;\n     */\n    value: Heartbeat;\n    case: \"heartbeat\";\n  } | { case: undefined; value?: undefined };\n};\n\n/**\n * Describes the message meshtastic.ToRadio.\n * Use `create(ToRadioSchema)` to create a new message.\n */\nexport const ToRadioSchema: GenMessage<ToRadio> = /*@__PURE__*/\n  messageDesc(file_mesh, 15);\n\n/**\n *\n * Compressed message payload\n *\n * @generated from message meshtastic.Compressed\n */\nexport type Compressed = Message<\"meshtastic.Compressed\"> & {\n  /**\n   *\n   * PortNum to determine the how to handle the compressed payload.\n   *\n   * @generated from field: meshtastic.PortNum portnum = 1;\n   */\n  portnum: PortNum;\n\n  /**\n   *\n   * Compressed data.\n   *\n   * @generated from field: bytes data = 2;\n   */\n  data: Uint8Array;\n};\n\n/**\n * Describes the message meshtastic.Compressed.\n * Use `create(CompressedSchema)` to create a new message.\n */\nexport const CompressedSchema: GenMessage<Compressed> = /*@__PURE__*/\n  messageDesc(file_mesh, 16);\n\n/**\n *\n * Full info on edges for a single node\n *\n * @generated from message meshtastic.NeighborInfo\n */\nexport type NeighborInfo = Message<\"meshtastic.NeighborInfo\"> & {\n  /**\n   *\n   * The node ID of the node sending info on its neighbors\n   *\n   * @generated from field: uint32 node_id = 1;\n   */\n  nodeId: number;\n\n  /**\n   *\n   * Field to pass neighbor info for the next sending cycle\n   *\n   * @generated from field: uint32 last_sent_by_id = 2;\n   */\n  lastSentById: number;\n\n  /**\n   *\n   * Broadcast interval of the represented node (in seconds)\n   *\n   * @generated from field: uint32 node_broadcast_interval_secs = 3;\n   */\n  nodeBroadcastIntervalSecs: number;\n\n  /**\n   *\n   * The list of out edges from this node\n   *\n   * @generated from field: repeated meshtastic.Neighbor neighbors = 4;\n   */\n  neighbors: Neighbor[];\n};\n\n/**\n * Describes the message meshtastic.NeighborInfo.\n * Use `create(NeighborInfoSchema)` to create a new message.\n */\nexport const NeighborInfoSchema: GenMessage<NeighborInfo> = /*@__PURE__*/\n  messageDesc(file_mesh, 17);\n\n/**\n *\n * A single edge in the mesh\n *\n * @generated from message meshtastic.Neighbor\n */\nexport type Neighbor = Message<\"meshtastic.Neighbor\"> & {\n  /**\n   *\n   * Node ID of neighbor\n   *\n   * @generated from field: uint32 node_id = 1;\n   */\n  nodeId: number;\n\n  /**\n   *\n   * SNR of last heard message\n   *\n   * @generated from field: float snr = 2;\n   */\n  snr: number;\n\n  /**\n   *\n   * Reception time (in secs since 1970) of last message that was last sent by this ID.\n   * Note: this is for local storage only and will not be sent out over the mesh.\n   *\n   * @generated from field: fixed32 last_rx_time = 3;\n   */\n  lastRxTime: number;\n\n  /**\n   *\n   * Broadcast interval of this neighbor (in seconds).\n   * Note: this is for local storage only and will not be sent out over the mesh.\n   *\n   * @generated from field: uint32 node_broadcast_interval_secs = 4;\n   */\n  nodeBroadcastIntervalSecs: number;\n};\n\n/**\n * Describes the message meshtastic.Neighbor.\n * Use `create(NeighborSchema)` to create a new message.\n */\nexport const NeighborSchema: GenMessage<Neighbor> = /*@__PURE__*/\n  messageDesc(file_mesh, 18);\n\n/**\n *\n * Device metadata response\n *\n * @generated from message meshtastic.DeviceMetadata\n */\nexport type DeviceMetadata = Message<\"meshtastic.DeviceMetadata\"> & {\n  /**\n   *\n   * Device firmware version string\n   *\n   * @generated from field: string firmware_version = 1;\n   */\n  firmwareVersion: string;\n\n  /**\n   *\n   * Device state version\n   *\n   * @generated from field: uint32 device_state_version = 2;\n   */\n  deviceStateVersion: number;\n\n  /**\n   *\n   * Indicates whether the device can shutdown CPU natively or via power management chip\n   *\n   * @generated from field: bool canShutdown = 3;\n   */\n  canShutdown: boolean;\n\n  /**\n   *\n   * Indicates that the device has native wifi capability\n   *\n   * @generated from field: bool hasWifi = 4;\n   */\n  hasWifi: boolean;\n\n  /**\n   *\n   * Indicates that the device has native bluetooth capability\n   *\n   * @generated from field: bool hasBluetooth = 5;\n   */\n  hasBluetooth: boolean;\n\n  /**\n   *\n   * Indicates that the device has an ethernet peripheral\n   *\n   * @generated from field: bool hasEthernet = 6;\n   */\n  hasEthernet: boolean;\n\n  /**\n   *\n   * Indicates that the device's role in the mesh\n   *\n   * @generated from field: meshtastic.Config.DeviceConfig.Role role = 7;\n   */\n  role: Config_DeviceConfig_Role;\n\n  /**\n   *\n   * Indicates the device's current enabled position flags\n   *\n   * @generated from field: uint32 position_flags = 8;\n   */\n  positionFlags: number;\n\n  /**\n   *\n   * Device hardware model\n   *\n   * @generated from field: meshtastic.HardwareModel hw_model = 9;\n   */\n  hwModel: HardwareModel;\n\n  /**\n   *\n   * Has Remote Hardware enabled\n   *\n   * @generated from field: bool hasRemoteHardware = 10;\n   */\n  hasRemoteHardware: boolean;\n\n  /**\n   *\n   * Has PKC capabilities\n   *\n   * @generated from field: bool hasPKC = 11;\n   */\n  hasPKC: boolean;\n};\n\n/**\n * Describes the message meshtastic.DeviceMetadata.\n * Use `create(DeviceMetadataSchema)` to create a new message.\n */\nexport const DeviceMetadataSchema: GenMessage<DeviceMetadata> = /*@__PURE__*/\n  messageDesc(file_mesh, 19);\n\n/**\n *\n * A heartbeat message is sent to the node from the client to keep the connection alive.\n * This is currently only needed to keep serial connections alive, but can be used by any PhoneAPI.\n *\n * @generated from message meshtastic.Heartbeat\n */\nexport type Heartbeat = Message<\"meshtastic.Heartbeat\"> & {\n};\n\n/**\n * Describes the message meshtastic.Heartbeat.\n * Use `create(HeartbeatSchema)` to create a new message.\n */\nexport const HeartbeatSchema: GenMessage<Heartbeat> = /*@__PURE__*/\n  messageDesc(file_mesh, 20);\n\n/**\n *\n * RemoteHardwarePins associated with a node\n *\n * @generated from message meshtastic.NodeRemoteHardwarePin\n */\nexport type NodeRemoteHardwarePin = Message<\"meshtastic.NodeRemoteHardwarePin\"> & {\n  /**\n   *\n   * The node_num exposing the available gpio pin\n   *\n   * @generated from field: uint32 node_num = 1;\n   */\n  nodeNum: number;\n\n  /**\n   *\n   * The the available gpio pin for usage with RemoteHardware module\n   *\n   * @generated from field: meshtastic.RemoteHardwarePin pin = 2;\n   */\n  pin?: RemoteHardwarePin;\n};\n\n/**\n * Describes the message meshtastic.NodeRemoteHardwarePin.\n * Use `create(NodeRemoteHardwarePinSchema)` to create a new message.\n */\nexport const NodeRemoteHardwarePinSchema: GenMessage<NodeRemoteHardwarePin> = /*@__PURE__*/\n  messageDesc(file_mesh, 21);\n\n/**\n * @generated from message meshtastic.ChunkedPayload\n */\nexport type ChunkedPayload = Message<\"meshtastic.ChunkedPayload\"> & {\n  /**\n   *\n   * The ID of the entire payload\n   *\n   * @generated from field: uint32 payload_id = 1;\n   */\n  payloadId: number;\n\n  /**\n   *\n   * The total number of chunks in the payload\n   *\n   * @generated from field: uint32 chunk_count = 2;\n   */\n  chunkCount: number;\n\n  /**\n   *\n   * The current chunk index in the total\n   *\n   * @generated from field: uint32 chunk_index = 3;\n   */\n  chunkIndex: number;\n\n  /**\n   *\n   * The binary data of the current chunk\n   *\n   * @generated from field: bytes payload_chunk = 4;\n   */\n  payloadChunk: Uint8Array;\n};\n\n/**\n * Describes the message meshtastic.ChunkedPayload.\n * Use `create(ChunkedPayloadSchema)` to create a new message.\n */\nexport const ChunkedPayloadSchema: GenMessage<ChunkedPayload> = /*@__PURE__*/\n  messageDesc(file_mesh, 22);\n\n/**\n *\n * Wrapper message for broken repeated oneof support\n *\n * @generated from message meshtastic.resend_chunks\n */\nexport type resend_chunks = Message<\"meshtastic.resend_chunks\"> & {\n  /**\n   * @generated from field: repeated uint32 chunks = 1;\n   */\n  chunks: number[];\n};\n\n/**\n * Describes the message meshtastic.resend_chunks.\n * Use `create(resend_chunksSchema)` to create a new message.\n */\nexport const resend_chunksSchema: GenMessage<resend_chunks> = /*@__PURE__*/\n  messageDesc(file_mesh, 23);\n\n/**\n *\n * Responses to a ChunkedPayload request\n *\n * @generated from message meshtastic.ChunkedPayloadResponse\n */\nexport type ChunkedPayloadResponse = Message<\"meshtastic.ChunkedPayloadResponse\"> & {\n  /**\n   *\n   * The ID of the entire payload\n   *\n   * @generated from field: uint32 payload_id = 1;\n   */\n  payloadId: number;\n\n  /**\n   * @generated from oneof meshtastic.ChunkedPayloadResponse.payload_variant\n   */\n  payloadVariant: {\n    /**\n     *\n     * Request to transfer chunked payload\n     *\n     * @generated from field: bool request_transfer = 2;\n     */\n    value: boolean;\n    case: \"requestTransfer\";\n  } | {\n    /**\n     *\n     * Accept the transfer chunked payload\n     *\n     * @generated from field: bool accept_transfer = 3;\n     */\n    value: boolean;\n    case: \"acceptTransfer\";\n  } | {\n    /**\n     *\n     * Request missing indexes in the chunked payload\n     *\n     * @generated from field: meshtastic.resend_chunks resend_chunks = 4;\n     */\n    value: resend_chunks;\n    case: \"resendChunks\";\n  } | { case: undefined; value?: undefined };\n};\n\n/**\n * Describes the message meshtastic.ChunkedPayloadResponse.\n * Use `create(ChunkedPayloadResponseSchema)` to create a new message.\n */\nexport const ChunkedPayloadResponseSchema: GenMessage<ChunkedPayloadResponse> = /*@__PURE__*/\n  messageDesc(file_mesh, 24);\n\n/**\n *\n * Note: these enum names must EXACTLY match the string used in the device\n * bin/build-all.sh script.\n * Because they will be used to find firmware filenames in the android app for OTA updates.\n * To match the old style filenames, _ is converted to -, p is converted to .\n *\n * @generated from enum meshtastic.HardwareModel\n */\nexport enum HardwareModel {\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: UNSET = 0;\n   */\n  UNSET = 0,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: TLORA_V2 = 1;\n   */\n  TLORA_V2 = 1,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: TLORA_V1 = 2;\n   */\n  TLORA_V1 = 2,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: TLORA_V2_1_1P6 = 3;\n   */\n  TLORA_V2_1_1P6 = 3,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: TBEAM = 4;\n   */\n  TBEAM = 4,\n\n  /**\n   *\n   * The original heltec WiFi_Lora_32_V2, which had battery voltage sensing hooked to GPIO 13\n   * (see HELTEC_V2 for the new version).\n   *\n   * @generated from enum value: HELTEC_V2_0 = 5;\n   */\n  HELTEC_V2_0 = 5,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: TBEAM_V0P7 = 6;\n   */\n  TBEAM_V0P7 = 6,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: T_ECHO = 7;\n   */\n  T_ECHO = 7,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: TLORA_V1_1P3 = 8;\n   */\n  TLORA_V1_1P3 = 8,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: RAK4631 = 9;\n   */\n  RAK4631 = 9,\n\n  /**\n   *\n   * The new version of the heltec WiFi_Lora_32_V2 board that has battery sensing hooked to GPIO 37.\n   * Sadly they did not update anything on the silkscreen to identify this board\n   *\n   * @generated from enum value: HELTEC_V2_1 = 10;\n   */\n  HELTEC_V2_1 = 10,\n\n  /**\n   *\n   * Ancient heltec WiFi_Lora_32 board\n   *\n   * @generated from enum value: HELTEC_V1 = 11;\n   */\n  HELTEC_V1 = 11,\n\n  /**\n   *\n   * New T-BEAM with ESP32-S3 CPU\n   *\n   * @generated from enum value: LILYGO_TBEAM_S3_CORE = 12;\n   */\n  LILYGO_TBEAM_S3_CORE = 12,\n\n  /**\n   *\n   * RAK WisBlock ESP32 core: https://docs.rakwireless.com/Product-Categories/WisBlock/RAK11200/Overview/\n   *\n   * @generated from enum value: RAK11200 = 13;\n   */\n  RAK11200 = 13,\n\n  /**\n   *\n   * B&Q Consulting Nano Edition G1: https://uniteng.com/wiki/doku.php?id=meshtastic:nano\n   *\n   * @generated from enum value: NANO_G1 = 14;\n   */\n  NANO_G1 = 14,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: TLORA_V2_1_1P8 = 15;\n   */\n  TLORA_V2_1_1P8 = 15,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: TLORA_T3_S3 = 16;\n   */\n  TLORA_T3_S3 = 16,\n\n  /**\n   *\n   * B&Q Consulting Nano G1 Explorer: https://wiki.uniteng.com/en/meshtastic/nano-g1-explorer\n   *\n   * @generated from enum value: NANO_G1_EXPLORER = 17;\n   */\n  NANO_G1_EXPLORER = 17,\n\n  /**\n   *\n   * B&Q Consulting Nano G2 Ultra: https://wiki.uniteng.com/en/meshtastic/nano-g2-ultra\n   *\n   * @generated from enum value: NANO_G2_ULTRA = 18;\n   */\n  NANO_G2_ULTRA = 18,\n\n  /**\n   *\n   * LoRAType device: https://loratype.org/\n   *\n   * @generated from enum value: LORA_TYPE = 19;\n   */\n  LORA_TYPE = 19,\n\n  /**\n   *\n   * wiphone https://www.wiphone.io/\n   *\n   * @generated from enum value: WIPHONE = 20;\n   */\n  WIPHONE = 20,\n\n  /**\n   *\n   * WIO Tracker WM1110 family from Seeed Studio. Includes wio-1110-tracker and wio-1110-sdk\n   *\n   * @generated from enum value: WIO_WM1110 = 21;\n   */\n  WIO_WM1110 = 21,\n\n  /**\n   *\n   * RAK2560 Solar base station based on RAK4630\n   *\n   * @generated from enum value: RAK2560 = 22;\n   */\n  RAK2560 = 22,\n\n  /**\n   *\n   * Heltec HRU-3601: https://heltec.org/project/hru-3601/\n   *\n   * @generated from enum value: HELTEC_HRU_3601 = 23;\n   */\n  HELTEC_HRU_3601 = 23,\n\n  /**\n   *\n   * Heltec Wireless Bridge\n   *\n   * @generated from enum value: HELTEC_WIRELESS_BRIDGE = 24;\n   */\n  HELTEC_WIRELESS_BRIDGE = 24,\n\n  /**\n   *\n   * B&Q Consulting Station Edition G1: https://uniteng.com/wiki/doku.php?id=meshtastic:station\n   *\n   * @generated from enum value: STATION_G1 = 25;\n   */\n  STATION_G1 = 25,\n\n  /**\n   *\n   * RAK11310 (RP2040 + SX1262)\n   *\n   * @generated from enum value: RAK11310 = 26;\n   */\n  RAK11310 = 26,\n\n  /**\n   *\n   * Makerfabs SenseLoRA Receiver (RP2040 + RFM96)\n   *\n   * @generated from enum value: SENSELORA_RP2040 = 27;\n   */\n  SENSELORA_RP2040 = 27,\n\n  /**\n   *\n   * Makerfabs SenseLoRA Industrial Monitor (ESP32-S3 + RFM96)\n   *\n   * @generated from enum value: SENSELORA_S3 = 28;\n   */\n  SENSELORA_S3 = 28,\n\n  /**\n   *\n   * Canary Radio Company - CanaryOne: https://canaryradio.io/products/canaryone\n   *\n   * @generated from enum value: CANARYONE = 29;\n   */\n  CANARYONE = 29,\n\n  /**\n   *\n   * Waveshare RP2040 LoRa - https://www.waveshare.com/rp2040-lora.htm\n   *\n   * @generated from enum value: RP2040_LORA = 30;\n   */\n  RP2040_LORA = 30,\n\n  /**\n   *\n   * B&Q Consulting Station G2: https://wiki.uniteng.com/en/meshtastic/station-g2\n   *\n   * @generated from enum value: STATION_G2 = 31;\n   */\n  STATION_G2 = 31,\n\n  /**\n   *\n   * ---------------------------------------------------------------------------\n   * Less common/prototype boards listed here (needs one more byte over the air)\n   * ---------------------------------------------------------------------------\n   *\n   * @generated from enum value: LORA_RELAY_V1 = 32;\n   */\n  LORA_RELAY_V1 = 32,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: NRF52840DK = 33;\n   */\n  NRF52840DK = 33,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: PPR = 34;\n   */\n  PPR = 34,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: GENIEBLOCKS = 35;\n   */\n  GENIEBLOCKS = 35,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: NRF52_UNKNOWN = 36;\n   */\n  NRF52_UNKNOWN = 36,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: PORTDUINO = 37;\n   */\n  PORTDUINO = 37,\n\n  /**\n   *\n   * The simulator built into the android app\n   *\n   * @generated from enum value: ANDROID_SIM = 38;\n   */\n  ANDROID_SIM = 38,\n\n  /**\n   *\n   * Custom DIY device based on @NanoVHF schematics: https://github.com/NanoVHF/Meshtastic-DIY/tree/main/Schematics\n   *\n   * @generated from enum value: DIY_V1 = 39;\n   */\n  DIY_V1 = 39,\n\n  /**\n   *\n   * nRF52840 Dongle : https://www.nordicsemi.com/Products/Development-hardware/nrf52840-dongle/\n   *\n   * @generated from enum value: NRF52840_PCA10059 = 40;\n   */\n  NRF52840_PCA10059 = 40,\n\n  /**\n   *\n   * Custom Disaster Radio esp32 v3 device https://github.com/sudomesh/disaster-radio/tree/master/hardware/board_esp32_v3\n   *\n   * @generated from enum value: DR_DEV = 41;\n   */\n  DR_DEV = 41,\n\n  /**\n   *\n   * M5 esp32 based MCU modules with enclosure, TFT and LORA Shields. All Variants (Basic, Core, Fire, Core2, CoreS3, Paper) https://m5stack.com/\n   *\n   * @generated from enum value: M5STACK = 42;\n   */\n  M5STACK = 42,\n\n  /**\n   *\n   * New Heltec LoRA32 with ESP32-S3 CPU\n   *\n   * @generated from enum value: HELTEC_V3 = 43;\n   */\n  HELTEC_V3 = 43,\n\n  /**\n   *\n   * New Heltec Wireless Stick Lite with ESP32-S3 CPU\n   *\n   * @generated from enum value: HELTEC_WSL_V3 = 44;\n   */\n  HELTEC_WSL_V3 = 44,\n\n  /**\n   *\n   * New BETAFPV ELRS Micro TX Module 2.4G with ESP32 CPU\n   *\n   * @generated from enum value: BETAFPV_2400_TX = 45;\n   */\n  BETAFPV_2400_TX = 45,\n\n  /**\n   *\n   * BetaFPV ExpressLRS \"Nano\" TX Module 900MHz with ESP32 CPU\n   *\n   * @generated from enum value: BETAFPV_900_NANO_TX = 46;\n   */\n  BETAFPV_900_NANO_TX = 46,\n\n  /**\n   *\n   * Raspberry Pi Pico (W) with Waveshare SX1262 LoRa Node Module\n   *\n   * @generated from enum value: RPI_PICO = 47;\n   */\n  RPI_PICO = 47,\n\n  /**\n   *\n   * Heltec Wireless Tracker with ESP32-S3 CPU, built-in GPS, and TFT\n   * Newer V1.1, version is written on the PCB near the display.\n   *\n   * @generated from enum value: HELTEC_WIRELESS_TRACKER = 48;\n   */\n  HELTEC_WIRELESS_TRACKER = 48,\n\n  /**\n   *\n   * Heltec Wireless Paper with ESP32-S3 CPU and E-Ink display\n   *\n   * @generated from enum value: HELTEC_WIRELESS_PAPER = 49;\n   */\n  HELTEC_WIRELESS_PAPER = 49,\n\n  /**\n   *\n   * LilyGo T-Deck with ESP32-S3 CPU, Keyboard and IPS display\n   *\n   * @generated from enum value: T_DECK = 50;\n   */\n  T_DECK = 50,\n\n  /**\n   *\n   * LilyGo T-Watch S3 with ESP32-S3 CPU and IPS display\n   *\n   * @generated from enum value: T_WATCH_S3 = 51;\n   */\n  T_WATCH_S3 = 51,\n\n  /**\n   *\n   * Bobricius Picomputer with ESP32-S3 CPU, Keyboard and IPS display\n   *\n   * @generated from enum value: PICOMPUTER_S3 = 52;\n   */\n  PICOMPUTER_S3 = 52,\n\n  /**\n   *\n   * Heltec HT-CT62 with ESP32-C3 CPU and SX1262 LoRa\n   *\n   * @generated from enum value: HELTEC_HT62 = 53;\n   */\n  HELTEC_HT62 = 53,\n\n  /**\n   *\n   * EBYTE SPI LoRa module and ESP32-S3\n   *\n   * @generated from enum value: EBYTE_ESP32_S3 = 54;\n   */\n  EBYTE_ESP32_S3 = 54,\n\n  /**\n   *\n   * Waveshare ESP32-S3-PICO with PICO LoRa HAT and 2.9inch e-Ink\n   *\n   * @generated from enum value: ESP32_S3_PICO = 55;\n   */\n  ESP32_S3_PICO = 55,\n\n  /**\n   *\n   * CircuitMess Chatter 2 LLCC68 Lora Module and ESP32 Wroom\n   * Lora module can be swapped out for a Heltec RA-62 which is \"almost\" pin compatible\n   * with one cut and one jumper Meshtastic works\n   *\n   * @generated from enum value: CHATTER_2 = 56;\n   */\n  CHATTER_2 = 56,\n\n  /**\n   *\n   * Heltec Wireless Paper, With ESP32-S3 CPU and E-Ink display\n   * Older \"V1.0\" Variant, has no \"version sticker\"\n   * E-Ink model is DEPG0213BNS800\n   * Tab on the screen protector is RED\n   * Flex connector marking is FPC-7528B\n   *\n   * @generated from enum value: HELTEC_WIRELESS_PAPER_V1_0 = 57;\n   */\n  HELTEC_WIRELESS_PAPER_V1_0 = 57,\n\n  /**\n   *\n   * Heltec Wireless Tracker with ESP32-S3 CPU, built-in GPS, and TFT\n   * Older \"V1.0\" Variant\n   *\n   * @generated from enum value: HELTEC_WIRELESS_TRACKER_V1_0 = 58;\n   */\n  HELTEC_WIRELESS_TRACKER_V1_0 = 58,\n\n  /**\n   *\n   * unPhone with ESP32-S3, TFT touchscreen,  LSM6DS3TR-C accelerometer and gyroscope\n   *\n   * @generated from enum value: UNPHONE = 59;\n   */\n  UNPHONE = 59,\n\n  /**\n   *\n   * Teledatics TD-LORAC NRF52840 based M.2 LoRA module\n   * Compatible with the TD-WRLS development board\n   *\n   * @generated from enum value: TD_LORAC = 60;\n   */\n  TD_LORAC = 60,\n\n  /**\n   *\n   * CDEBYTE EoRa-S3 board using their own MM modules, clone of LILYGO T3S3\n   *\n   * @generated from enum value: CDEBYTE_EORA_S3 = 61;\n   */\n  CDEBYTE_EORA_S3 = 61,\n\n  /**\n   *\n   * TWC_MESH_V4\n   * Adafruit NRF52840 feather express with SX1262, SSD1306 OLED and NEO6M GPS\n   *\n   * @generated from enum value: TWC_MESH_V4 = 62;\n   */\n  TWC_MESH_V4 = 62,\n\n  /**\n   *\n   * NRF52_PROMICRO_DIY\n   * Promicro NRF52840 with SX1262/LLCC68, SSD1306 OLED and NEO6M GPS\n   *\n   * @generated from enum value: NRF52_PROMICRO_DIY = 63;\n   */\n  NRF52_PROMICRO_DIY = 63,\n\n  /**\n   *\n   * RadioMaster 900 Bandit Nano, https://www.radiomasterrc.com/products/bandit-nano-expresslrs-rf-module\n   * ESP32-D0WDQ6 With SX1276/SKY66122, SSD1306 OLED and No GPS\n   *\n   * @generated from enum value: RADIOMASTER_900_BANDIT_NANO = 64;\n   */\n  RADIOMASTER_900_BANDIT_NANO = 64,\n\n  /**\n   *\n   * Heltec Capsule Sensor V3 with ESP32-S3 CPU, Portable LoRa device that can replace GNSS modules or sensors\n   *\n   * @generated from enum value: HELTEC_CAPSULE_SENSOR_V3 = 65;\n   */\n  HELTEC_CAPSULE_SENSOR_V3 = 65,\n\n  /**\n   *\n   * Heltec Vision Master T190 with ESP32-S3 CPU, and a 1.90 inch TFT display\n   *\n   * @generated from enum value: HELTEC_VISION_MASTER_T190 = 66;\n   */\n  HELTEC_VISION_MASTER_T190 = 66,\n\n  /**\n   *\n   * Heltec Vision Master E213 with ESP32-S3 CPU, and a 2.13 inch E-Ink display\n   *\n   * @generated from enum value: HELTEC_VISION_MASTER_E213 = 67;\n   */\n  HELTEC_VISION_MASTER_E213 = 67,\n\n  /**\n   *\n   * Heltec Vision Master E290 with ESP32-S3 CPU, and a 2.9 inch E-Ink display\n   *\n   * @generated from enum value: HELTEC_VISION_MASTER_E290 = 68;\n   */\n  HELTEC_VISION_MASTER_E290 = 68,\n\n  /**\n   *\n   * Heltec Mesh Node T114 board with nRF52840 CPU, and a 1.14 inch TFT display, Ultimate low-power design,\n   * specifically adapted for the Meshtatic project\n   *\n   * @generated from enum value: HELTEC_MESH_NODE_T114 = 69;\n   */\n  HELTEC_MESH_NODE_T114 = 69,\n\n  /**\n   *\n   * Sensecap Indicator from Seeed Studio. ESP32-S3 device with TFT and RP2040 coprocessor\n   *\n   * @generated from enum value: SENSECAP_INDICATOR = 70;\n   */\n  SENSECAP_INDICATOR = 70,\n\n  /**\n   *\n   * Seeed studio T1000-E tracker card. NRF52840 w/ LR1110 radio, GPS, button, buzzer, and sensors.\n   *\n   * @generated from enum value: TRACKER_T1000_E = 71;\n   */\n  TRACKER_T1000_E = 71,\n\n  /**\n   *\n   * RAK3172 STM32WLE5 Module (https://store.rakwireless.com/products/wisduo-lpwan-module-rak3172)\n   *\n   * @generated from enum value: RAK3172 = 72;\n   */\n  RAK3172 = 72,\n\n  /**\n   *\n   * Seeed Studio Wio-E5 (either mini or Dev kit) using STM32WL chip.\n   *\n   * @generated from enum value: WIO_E5 = 73;\n   */\n  WIO_E5 = 73,\n\n  /**\n   *\n   * RadioMaster 900 Bandit, https://www.radiomasterrc.com/products/bandit-expresslrs-rf-module\n   * SSD1306 OLED and No GPS\n   *\n   * @generated from enum value: RADIOMASTER_900_BANDIT = 74;\n   */\n  RADIOMASTER_900_BANDIT = 74,\n\n  /**\n   *\n   * Minewsemi ME25LS01 (ME25LE01_V1.0). NRF52840 w/ LR1110 radio, buttons and leds and pins.\n   *\n   * @generated from enum value: ME25LS01_4Y10TD = 75;\n   */\n  ME25LS01_4Y10TD = 75,\n\n  /**\n   *\n   * RP2040_FEATHER_RFM95\n   * Adafruit Feather RP2040 with RFM95 LoRa Radio RFM95 with SX1272, SSD1306 OLED\n   * https://www.adafruit.com/product/5714\n   * https://www.adafruit.com/product/326\n   * https://www.adafruit.com/product/938\n   *  ^^^ short A0 to switch to I2C address 0x3C\n   *\n   *\n   * @generated from enum value: RP2040_FEATHER_RFM95 = 76;\n   */\n  RP2040_FEATHER_RFM95 = 76,\n\n  /**\n   * M5 esp32 based MCU modules with enclosure, TFT and LORA Shields. All Variants (Basic, Core, Fire, Core2, CoreS3, Paper) https://m5stack.com/ \n   *\n   * @generated from enum value: M5STACK_COREBASIC = 77;\n   */\n  M5STACK_COREBASIC = 77,\n\n  /**\n   * @generated from enum value: M5STACK_CORE2 = 78;\n   */\n  M5STACK_CORE2 = 78,\n\n  /**\n   * Pico2 with Waveshare Hat, same as Pico \n   *\n   * @generated from enum value: RPI_PICO2 = 79;\n   */\n  RPI_PICO2 = 79,\n\n  /**\n   * M5 esp32 based MCU modules with enclosure, TFT and LORA Shields. All Variants (Basic, Core, Fire, Core2, CoreS3, Paper) https://m5stack.com/ \n   *\n   * @generated from enum value: M5STACK_CORES3 = 80;\n   */\n  M5STACK_CORES3 = 80,\n\n  /**\n   * Seeed XIAO S3 DK\n   *\n   * @generated from enum value: SEEED_XIAO_S3 = 81;\n   */\n  SEEED_XIAO_S3 = 81,\n\n  /**\n   *\n   * Nordic nRF52840+Semtech SX1262 LoRa BLE Combo Module. nRF52840+SX1262 MS24SF1\n   *\n   * @generated from enum value: MS24SF1 = 82;\n   */\n  MS24SF1 = 82,\n\n  /**\n   *\n   * Lilygo TLora-C6 with the new ESP32-C6 MCU\n   *\n   * @generated from enum value: TLORA_C6 = 83;\n   */\n  TLORA_C6 = 83,\n\n  /**\n   *\n   * ------------------------------------------------------------------------------------------------------------------------------------------\n   * Reserved ID For developing private Ports. These will show up in live traffic sparsely, so we can use a high number. Keep it within 8 bits.\n   * ------------------------------------------------------------------------------------------------------------------------------------------\n   *\n   * @generated from enum value: PRIVATE_HW = 255;\n   */\n  PRIVATE_HW = 255,\n}\n\n/**\n * Describes the enum meshtastic.HardwareModel.\n */\nexport const HardwareModelSchema: GenEnum<HardwareModel> = /*@__PURE__*/\n  enumDesc(file_mesh, 0);\n\n/**\n *\n * Shared constants between device and phone\n *\n * @generated from enum meshtastic.Constants\n */\nexport enum Constants {\n  /**\n   *\n   * First enum must be zero, and we are just using this enum to\n   * pass int constants between two very different environments\n   *\n   * @generated from enum value: ZERO = 0;\n   */\n  ZERO = 0,\n\n  /**\n   *\n   * From mesh.options\n   * note: this payload length is ONLY the bytes that are sent inside of the Data protobuf (excluding protobuf overhead). The 16 byte header is\n   * outside of this envelope\n   *\n   * @generated from enum value: DATA_PAYLOAD_LEN = 237;\n   */\n  DATA_PAYLOAD_LEN = 237,\n}\n\n/**\n * Describes the enum meshtastic.Constants.\n */\nexport const ConstantsSchema: GenEnum<Constants> = /*@__PURE__*/\n  enumDesc(file_mesh, 1);\n\n/**\n *\n * Error codes for critical errors\n * The device might report these fault codes on the screen.\n * If you encounter a fault code, please post on the meshtastic.discourse.group\n * and we'll try to help.\n *\n * @generated from enum meshtastic.CriticalErrorCode\n */\nexport enum CriticalErrorCode {\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: NONE = 0;\n   */\n  NONE = 0,\n\n  /**\n   *\n   * A software bug was detected while trying to send lora\n   *\n   * @generated from enum value: TX_WATCHDOG = 1;\n   */\n  TX_WATCHDOG = 1,\n\n  /**\n   *\n   * A software bug was detected on entry to sleep\n   *\n   * @generated from enum value: SLEEP_ENTER_WAIT = 2;\n   */\n  SLEEP_ENTER_WAIT = 2,\n\n  /**\n   *\n   * No Lora radio hardware could be found\n   *\n   * @generated from enum value: NO_RADIO = 3;\n   */\n  NO_RADIO = 3,\n\n  /**\n   *\n   * Not normally used\n   *\n   * @generated from enum value: UNSPECIFIED = 4;\n   */\n  UNSPECIFIED = 4,\n\n  /**\n   *\n   * We failed while configuring a UBlox GPS\n   *\n   * @generated from enum value: UBLOX_UNIT_FAILED = 5;\n   */\n  UBLOX_UNIT_FAILED = 5,\n\n  /**\n   *\n   * This board was expected to have a power management chip and it is missing or broken\n   *\n   * @generated from enum value: NO_AXP192 = 6;\n   */\n  NO_AXP192 = 6,\n\n  /**\n   *\n   * The channel tried to set a radio setting which is not supported by this chipset,\n   * radio comms settings are now undefined.\n   *\n   * @generated from enum value: INVALID_RADIO_SETTING = 7;\n   */\n  INVALID_RADIO_SETTING = 7,\n\n  /**\n   *\n   * Radio transmit hardware failure. We sent data to the radio chip, but it didn't\n   * reply with an interrupt.\n   *\n   * @generated from enum value: TRANSMIT_FAILED = 8;\n   */\n  TRANSMIT_FAILED = 8,\n\n  /**\n   *\n   * We detected that the main CPU voltage dropped below the minimum acceptable value\n   *\n   * @generated from enum value: BROWNOUT = 9;\n   */\n  BROWNOUT = 9,\n\n  /**\n   * Selftest of SX1262 radio chip failed \n   *\n   * @generated from enum value: SX1262_FAILURE = 10;\n   */\n  SX1262_FAILURE = 10,\n\n  /**\n   *\n   * A (likely software but possibly hardware) failure was detected while trying to send packets.\n   * If this occurs on your board, please post in the forum so that we can ask you to collect some information to allow fixing this bug\n   *\n   * @generated from enum value: RADIO_SPI_BUG = 11;\n   */\n  RADIO_SPI_BUG = 11,\n\n  /**\n   *\n   * Corruption was detected on the flash filesystem but we were able to repair things.\n   * If you see this failure in the field please post in the forum because we are interested in seeing if this is occurring in the field.\n   *\n   * @generated from enum value: FLASH_CORRUPTION_RECOVERABLE = 12;\n   */\n  FLASH_CORRUPTION_RECOVERABLE = 12,\n\n  /**\n   *\n   * Corruption was detected on the flash filesystem but we were unable to repair things.\n   * NOTE: Your node will probably need to be reconfigured the next time it reboots (it will lose the region code etc...)\n   * If you see this failure in the field please post in the forum because we are interested in seeing if this is occurring in the field.\n   *\n   * @generated from enum value: FLASH_CORRUPTION_UNRECOVERABLE = 13;\n   */\n  FLASH_CORRUPTION_UNRECOVERABLE = 13,\n}\n\n/**\n * Describes the enum meshtastic.CriticalErrorCode.\n */\nexport const CriticalErrorCodeSchema: GenEnum<CriticalErrorCode> = /*@__PURE__*/\n  enumDesc(file_mesh, 2);\n\n","// @generated by protoc-gen-es v2.1.0 with parameter \"target=ts\"\n// @generated from file module_config.proto (package meshtastic, syntax proto3)\n/* eslint-disable */\n\nimport type { GenEnum, GenFile, GenMessage } from \"@bufbuild/protobuf/codegenv1\";\nimport { enumDesc, fileDesc, messageDesc } from \"@bufbuild/protobuf/codegenv1\";\nimport type { Message } from \"npm:@bufbuild/protobuf@^2.1.0\";\n\n/**\n * Describes the file module_config.proto.\n */\nexport const file_module_config: GenFile = /*@__PURE__*/\n  fileDesc(\"ChNtb2R1bGVfY29uZmlnLnByb3RvEgptZXNodGFzdGljIpglCgxNb2R1bGVDb25maWcSMwoEbXF0dBgBIAEoCzIjLm1lc2h0YXN0aWMuTW9kdWxlQ29uZmlnLk1RVFRDb25maWdIABI3CgZzZXJpYWwYAiABKAsyJS5tZXNodGFzdGljLk1vZHVsZUNvbmZpZy5TZXJpYWxDb25maWdIABJUChVleHRlcm5hbF9ub3RpZmljYXRpb24YAyABKAsyMy5tZXNodGFzdGljLk1vZHVsZUNvbmZpZy5FeHRlcm5hbE5vdGlmaWNhdGlvbkNvbmZpZ0gAEkQKDXN0b3JlX2ZvcndhcmQYBCABKAsyKy5tZXNodGFzdGljLk1vZHVsZUNvbmZpZy5TdG9yZUZvcndhcmRDb25maWdIABI+CgpyYW5nZV90ZXN0GAUgASgLMigubWVzaHRhc3RpYy5Nb2R1bGVDb25maWcuUmFuZ2VUZXN0Q29uZmlnSAASPQoJdGVsZW1ldHJ5GAYgASgLMigubWVzaHRhc3RpYy5Nb2R1bGVDb25maWcuVGVsZW1ldHJ5Q29uZmlnSAASRgoOY2FubmVkX21lc3NhZ2UYByABKAsyLC5tZXNodGFzdGljLk1vZHVsZUNvbmZpZy5DYW5uZWRNZXNzYWdlQ29uZmlnSAASNQoFYXVkaW8YCCABKAsyJC5tZXNodGFzdGljLk1vZHVsZUNvbmZpZy5BdWRpb0NvbmZpZ0gAEkgKD3JlbW90ZV9oYXJkd2FyZRgJIAEoCzItLm1lc2h0YXN0aWMuTW9kdWxlQ29uZmlnLlJlbW90ZUhhcmR3YXJlQ29uZmlnSAASRAoNbmVpZ2hib3JfaW5mbxgKIAEoCzIrLm1lc2h0YXN0aWMuTW9kdWxlQ29uZmlnLk5laWdoYm9ySW5mb0NvbmZpZ0gAEkoKEGFtYmllbnRfbGlnaHRpbmcYCyABKAsyLi5tZXNodGFzdGljLk1vZHVsZUNvbmZpZy5BbWJpZW50TGlnaHRpbmdDb25maWdIABJKChBkZXRlY3Rpb25fc2Vuc29yGAwgASgLMi4ubWVzaHRhc3RpYy5Nb2R1bGVDb25maWcuRGV0ZWN0aW9uU2Vuc29yQ29uZmlnSAASPwoKcGF4Y291bnRlchgNIAEoCzIpLm1lc2h0YXN0aWMuTW9kdWxlQ29uZmlnLlBheGNvdW50ZXJDb25maWdIABqwAgoKTVFUVENvbmZpZxIPCgdlbmFibGVkGAEgASgIEg8KB2FkZHJlc3MYAiABKAkSEAoIdXNlcm5hbWUYAyABKAkSEAoIcGFzc3dvcmQYBCABKAkSGgoSZW5jcnlwdGlvbl9lbmFibGVkGAUgASgIEhQKDGpzb25fZW5hYmxlZBgGIAEoCBITCgt0bHNfZW5hYmxlZBgHIAEoCBIMCgRyb290GAggASgJEh8KF3Byb3h5X3RvX2NsaWVudF9lbmFibGVkGAkgASgIEh0KFW1hcF9yZXBvcnRpbmdfZW5hYmxlZBgKIAEoCBJHChNtYXBfcmVwb3J0X3NldHRpbmdzGAsgASgLMioubWVzaHRhc3RpYy5Nb2R1bGVDb25maWcuTWFwUmVwb3J0U2V0dGluZ3MaTgoRTWFwUmVwb3J0U2V0dGluZ3MSHQoVcHVibGlzaF9pbnRlcnZhbF9zZWNzGAEgASgNEhoKEnBvc2l0aW9uX3ByZWNpc2lvbhgCIAEoDRqCAQoUUmVtb3RlSGFyZHdhcmVDb25maWcSDwoHZW5hYmxlZBgBIAEoCBIiChphbGxvd191bmRlZmluZWRfcGluX2FjY2VzcxgCIAEoCBI1Cg5hdmFpbGFibGVfcGlucxgDIAMoCzIdLm1lc2h0YXN0aWMuUmVtb3RlSGFyZHdhcmVQaW4aPgoSTmVpZ2hib3JJbmZvQ29uZmlnEg8KB2VuYWJsZWQYASABKAgSFwoPdXBkYXRlX2ludGVydmFsGAIgASgNGpcDChVEZXRlY3Rpb25TZW5zb3JDb25maWcSDwoHZW5hYmxlZBgBIAEoCBIeChZtaW5pbXVtX2Jyb2FkY2FzdF9zZWNzGAIgASgNEhwKFHN0YXRlX2Jyb2FkY2FzdF9zZWNzGAMgASgNEhEKCXNlbmRfYmVsbBgEIAEoCBIMCgRuYW1lGAUgASgJEhMKC21vbml0b3JfcGluGAYgASgNEloKFmRldGVjdGlvbl90cmlnZ2VyX3R5cGUYByABKA4yOi5tZXNodGFzdGljLk1vZHVsZUNvbmZpZy5EZXRlY3Rpb25TZW5zb3JDb25maWcuVHJpZ2dlclR5cGUSEgoKdXNlX3B1bGx1cBgIIAEoCCKIAQoLVHJpZ2dlclR5cGUSDQoJTE9HSUNfTE9XEAASDgoKTE9HSUNfSElHSBABEhAKDEZBTExJTkdfRURHRRACEg8KC1JJU0lOR19FREdFEAMSGgoWRUlUSEVSX0VER0VfQUNUSVZFX0xPVxAEEhsKF0VJVEhFUl9FREdFX0FDVElWRV9ISUdIEAUa5AIKC0F1ZGlvQ29uZmlnEhYKDmNvZGVjMl9lbmFibGVkGAEgASgIEg8KB3B0dF9waW4YAiABKA0SQAoHYml0cmF0ZRgDIAEoDjIvLm1lc2h0YXN0aWMuTW9kdWxlQ29uZmlnLkF1ZGlvQ29uZmlnLkF1ZGlvX0JhdWQSDgoGaTJzX3dzGAQgASgNEg4KBmkyc19zZBgFIAEoDRIPCgdpMnNfZGluGAYgASgNEg8KB2kyc19zY2sYByABKA0ipwEKCkF1ZGlvX0JhdWQSEgoOQ09ERUMyX0RFRkFVTFQQABIPCgtDT0RFQzJfMzIwMBABEg8KC0NPREVDMl8yNDAwEAISDwoLQ09ERUMyXzE2MDAQAxIPCgtDT0RFQzJfMTQwMBAEEg8KC0NPREVDMl8xMzAwEAUSDwoLQ09ERUMyXzEyMDAQBhIOCgpDT0RFQzJfNzAwEAcSDwoLQ09ERUMyXzcwMEIQCBp2ChBQYXhjb3VudGVyQ29uZmlnEg8KB2VuYWJsZWQYASABKAgSIgoacGF4Y291bnRlcl91cGRhdGVfaW50ZXJ2YWwYAiABKA0SFgoOd2lmaV90aHJlc2hvbGQYAyABKAUSFQoNYmxlX3RocmVzaG9sZBgEIAEoBRruBAoMU2VyaWFsQ29uZmlnEg8KB2VuYWJsZWQYASABKAgSDAoEZWNobxgCIAEoCBILCgNyeGQYAyABKA0SCwoDdHhkGAQgASgNEj8KBGJhdWQYBSABKA4yMS5tZXNodGFzdGljLk1vZHVsZUNvbmZpZy5TZXJpYWxDb25maWcuU2VyaWFsX0JhdWQSDwoHdGltZW91dBgGIAEoDRI/CgRtb2RlGAcgASgOMjEubWVzaHRhc3RpYy5Nb2R1bGVDb25maWcuU2VyaWFsQ29uZmlnLlNlcmlhbF9Nb2RlEiQKHG92ZXJyaWRlX2NvbnNvbGVfc2VyaWFsX3BvcnQYCCABKAgiigIKC1NlcmlhbF9CYXVkEhAKDEJBVURfREVGQVVMVBAAEgwKCEJBVURfMTEwEAESDAoIQkFVRF8zMDAQAhIMCghCQVVEXzYwMBADEg0KCUJBVURfMTIwMBAEEg0KCUJBVURfMjQwMBAFEg0KCUJBVURfNDgwMBAGEg0KCUJBVURfOTYwMBAHEg4KCkJBVURfMTkyMDAQCBIOCgpCQVVEXzM4NDAwEAkSDgoKQkFVRF81NzYwMBAKEg8KC0JBVURfMTE1MjAwEAsSDwoLQkFVRF8yMzA0MDAQDBIPCgtCQVVEXzQ2MDgwMBANEg8KC0JBVURfNTc2MDAwEA4SDwoLQkFVRF85MjE2MDAQDyJfCgtTZXJpYWxfTW9kZRILCgdERUZBVUxUEAASCgoGU0lNUExFEAESCQoFUFJPVE8QAhILCgdURVhUTVNHEAMSCAoETk1FQRAEEgsKB0NBTFRPUE8QBRIICgRXUzg1EAYa6QIKGkV4dGVybmFsTm90aWZpY2F0aW9uQ29uZmlnEg8KB2VuYWJsZWQYASABKAgSEQoJb3V0cHV0X21zGAIgASgNEg4KBm91dHB1dBgDIAEoDRIUCgxvdXRwdXRfdmlicmEYCCABKA0SFQoNb3V0cHV0X2J1enplchgJIAEoDRIOCgZhY3RpdmUYBCABKAgSFQoNYWxlcnRfbWVzc2FnZRgFIAEoCBIbChNhbGVydF9tZXNzYWdlX3ZpYnJhGAogASgIEhwKFGFsZXJ0X21lc3NhZ2VfYnV6emVyGAsgASgIEhIKCmFsZXJ0X2JlbGwYBiABKAgSGAoQYWxlcnRfYmVsbF92aWJyYRgMIAEoCBIZChFhbGVydF9iZWxsX2J1enplchgNIAEoCBIPCgd1c2VfcHdtGAcgASgIEhMKC25hZ190aW1lb3V0GA4gASgNEhkKEXVzZV9pMnNfYXNfYnV6emVyGA8gASgIGpcBChJTdG9yZUZvcndhcmRDb25maWcSDwoHZW5hYmxlZBgBIAEoCBIRCgloZWFydGJlYXQYAiABKAgSDwoHcmVjb3JkcxgDIAEoDRIaChJoaXN0b3J5X3JldHVybl9tYXgYBCABKA0SHQoVaGlzdG9yeV9yZXR1cm5fd2luZG93GAUgASgNEhEKCWlzX3NlcnZlchgGIAEoCBpACg9SYW5nZVRlc3RDb25maWcSDwoHZW5hYmxlZBgBIAEoCBIOCgZzZW5kZXIYAiABKA0SDAoEc2F2ZRgDIAEoCBrJAwoPVGVsZW1ldHJ5Q29uZmlnEh4KFmRldmljZV91cGRhdGVfaW50ZXJ2YWwYASABKA0SIwobZW52aXJvbm1lbnRfdXBkYXRlX2ludGVydmFsGAIgASgNEicKH2Vudmlyb25tZW50X21lYXN1cmVtZW50X2VuYWJsZWQYAyABKAgSIgoaZW52aXJvbm1lbnRfc2NyZWVuX2VuYWJsZWQYBCABKAgSJgoeZW52aXJvbm1lbnRfZGlzcGxheV9mYWhyZW5oZWl0GAUgASgIEhsKE2Fpcl9xdWFsaXR5X2VuYWJsZWQYBiABKAgSHAoUYWlyX3F1YWxpdHlfaW50ZXJ2YWwYByABKA0SIQoZcG93ZXJfbWVhc3VyZW1lbnRfZW5hYmxlZBgIIAEoCBIdChVwb3dlcl91cGRhdGVfaW50ZXJ2YWwYCSABKA0SHAoUcG93ZXJfc2NyZWVuX2VuYWJsZWQYCiABKAgSIgoaaGVhbHRoX21lYXN1cmVtZW50X2VuYWJsZWQYCyABKAgSHgoWaGVhbHRoX3VwZGF0ZV9pbnRlcnZhbBgMIAEoDRIdChVoZWFsdGhfc2NyZWVuX2VuYWJsZWQYDSABKAga1gQKE0Nhbm5lZE1lc3NhZ2VDb25maWcSFwoPcm90YXJ5MV9lbmFibGVkGAEgASgIEhkKEWlucHV0YnJva2VyX3Bpbl9hGAIgASgNEhkKEWlucHV0YnJva2VyX3Bpbl9iGAMgASgNEh0KFWlucHV0YnJva2VyX3Bpbl9wcmVzcxgEIAEoDRJZChRpbnB1dGJyb2tlcl9ldmVudF9jdxgFIAEoDjI7Lm1lc2h0YXN0aWMuTW9kdWxlQ29uZmlnLkNhbm5lZE1lc3NhZ2VDb25maWcuSW5wdXRFdmVudENoYXISWgoVaW5wdXRicm9rZXJfZXZlbnRfY2N3GAYgASgOMjsubWVzaHRhc3RpYy5Nb2R1bGVDb25maWcuQ2FubmVkTWVzc2FnZUNvbmZpZy5JbnB1dEV2ZW50Q2hhchJcChdpbnB1dGJyb2tlcl9ldmVudF9wcmVzcxgHIAEoDjI7Lm1lc2h0YXN0aWMuTW9kdWxlQ29uZmlnLkNhbm5lZE1lc3NhZ2VDb25maWcuSW5wdXRFdmVudENoYXISFwoPdXBkb3duMV9lbmFibGVkGAggASgIEg8KB2VuYWJsZWQYCSABKAgSGgoSYWxsb3dfaW5wdXRfc291cmNlGAogASgJEhEKCXNlbmRfYmVsbBgLIAEoCCJjCg5JbnB1dEV2ZW50Q2hhchIICgROT05FEAASBgoCVVAQERIICgRET1dOEBISCAoETEVGVBATEgkKBVJJR0hUEBQSCgoGU0VMRUNUEAoSCAoEQkFDSxAbEgoKBkNBTkNFTBAYGmUKFUFtYmllbnRMaWdodGluZ0NvbmZpZxIRCglsZWRfc3RhdGUYASABKAgSDwoHY3VycmVudBgCIAEoDRILCgNyZWQYAyABKA0SDQoFZ3JlZW4YBCABKA0SDAoEYmx1ZRgFIAEoDUIRCg9wYXlsb2FkX3ZhcmlhbnQiZAoRUmVtb3RlSGFyZHdhcmVQaW4SEAoIZ3Bpb19waW4YASABKA0SDAoEbmFtZRgCIAEoCRIvCgR0eXBlGAMgASgOMiEubWVzaHRhc3RpYy5SZW1vdGVIYXJkd2FyZVBpblR5cGUqSQoVUmVtb3RlSGFyZHdhcmVQaW5UeXBlEgsKB1VOS05PV04QABIQCgxESUdJVEFMX1JFQUQQARIRCg1ESUdJVEFMX1dSSVRFEAJCZwoTY29tLmdlZWtzdmlsbGUubWVzaEISTW9kdWxlQ29uZmlnUHJvdG9zWiJnaXRodWIuY29tL21lc2h0YXN0aWMvZ28vZ2VuZXJhdGVkqgIUTWVzaHRhc3RpYy5Qcm90b2J1ZnO6AgBiBnByb3RvMw\");\n\n/**\n *\n * Module Config\n *\n * @generated from message meshtastic.ModuleConfig\n */\nexport type ModuleConfig = Message<\"meshtastic.ModuleConfig\"> & {\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from oneof meshtastic.ModuleConfig.payload_variant\n   */\n  payloadVariant: {\n    /**\n     *\n     * TODO: REPLACE\n     *\n     * @generated from field: meshtastic.ModuleConfig.MQTTConfig mqtt = 1;\n     */\n    value: ModuleConfig_MQTTConfig;\n    case: \"mqtt\";\n  } | {\n    /**\n     *\n     * TODO: REPLACE\n     *\n     * @generated from field: meshtastic.ModuleConfig.SerialConfig serial = 2;\n     */\n    value: ModuleConfig_SerialConfig;\n    case: \"serial\";\n  } | {\n    /**\n     *\n     * TODO: REPLACE\n     *\n     * @generated from field: meshtastic.ModuleConfig.ExternalNotificationConfig external_notification = 3;\n     */\n    value: ModuleConfig_ExternalNotificationConfig;\n    case: \"externalNotification\";\n  } | {\n    /**\n     *\n     * TODO: REPLACE\n     *\n     * @generated from field: meshtastic.ModuleConfig.StoreForwardConfig store_forward = 4;\n     */\n    value: ModuleConfig_StoreForwardConfig;\n    case: \"storeForward\";\n  } | {\n    /**\n     *\n     * TODO: REPLACE\n     *\n     * @generated from field: meshtastic.ModuleConfig.RangeTestConfig range_test = 5;\n     */\n    value: ModuleConfig_RangeTestConfig;\n    case: \"rangeTest\";\n  } | {\n    /**\n     *\n     * TODO: REPLACE\n     *\n     * @generated from field: meshtastic.ModuleConfig.TelemetryConfig telemetry = 6;\n     */\n    value: ModuleConfig_TelemetryConfig;\n    case: \"telemetry\";\n  } | {\n    /**\n     *\n     * TODO: REPLACE\n     *\n     * @generated from field: meshtastic.ModuleConfig.CannedMessageConfig canned_message = 7;\n     */\n    value: ModuleConfig_CannedMessageConfig;\n    case: \"cannedMessage\";\n  } | {\n    /**\n     *\n     * TODO: REPLACE\n     *\n     * @generated from field: meshtastic.ModuleConfig.AudioConfig audio = 8;\n     */\n    value: ModuleConfig_AudioConfig;\n    case: \"audio\";\n  } | {\n    /**\n     *\n     * TODO: REPLACE\n     *\n     * @generated from field: meshtastic.ModuleConfig.RemoteHardwareConfig remote_hardware = 9;\n     */\n    value: ModuleConfig_RemoteHardwareConfig;\n    case: \"remoteHardware\";\n  } | {\n    /**\n     *\n     * TODO: REPLACE\n     *\n     * @generated from field: meshtastic.ModuleConfig.NeighborInfoConfig neighbor_info = 10;\n     */\n    value: ModuleConfig_NeighborInfoConfig;\n    case: \"neighborInfo\";\n  } | {\n    /**\n     *\n     * TODO: REPLACE\n     *\n     * @generated from field: meshtastic.ModuleConfig.AmbientLightingConfig ambient_lighting = 11;\n     */\n    value: ModuleConfig_AmbientLightingConfig;\n    case: \"ambientLighting\";\n  } | {\n    /**\n     *\n     * TODO: REPLACE\n     *\n     * @generated from field: meshtastic.ModuleConfig.DetectionSensorConfig detection_sensor = 12;\n     */\n    value: ModuleConfig_DetectionSensorConfig;\n    case: \"detectionSensor\";\n  } | {\n    /**\n     *\n     * TODO: REPLACE\n     *\n     * @generated from field: meshtastic.ModuleConfig.PaxcounterConfig paxcounter = 13;\n     */\n    value: ModuleConfig_PaxcounterConfig;\n    case: \"paxcounter\";\n  } | { case: undefined; value?: undefined };\n};\n\n/**\n * Describes the message meshtastic.ModuleConfig.\n * Use `create(ModuleConfigSchema)` to create a new message.\n */\nexport const ModuleConfigSchema: GenMessage<ModuleConfig> = /*@__PURE__*/\n  messageDesc(file_module_config, 0);\n\n/**\n *\n * MQTT Client Config\n *\n * @generated from message meshtastic.ModuleConfig.MQTTConfig\n */\nexport type ModuleConfig_MQTTConfig = Message<\"meshtastic.ModuleConfig.MQTTConfig\"> & {\n  /**\n   *\n   * If a meshtastic node is able to reach the internet it will normally attempt to gateway any channels that are marked as\n   * is_uplink_enabled or is_downlink_enabled.\n   *\n   * @generated from field: bool enabled = 1;\n   */\n  enabled: boolean;\n\n  /**\n   *\n   * The server to use for our MQTT global message gateway feature.\n   * If not set, the default server will be used\n   *\n   * @generated from field: string address = 2;\n   */\n  address: string;\n\n  /**\n   *\n   * MQTT username to use (most useful for a custom MQTT server).\n   * If using a custom server, this will be honoured even if empty.\n   * If using the default server, this will only be honoured if set, otherwise the device will use the default username\n   *\n   * @generated from field: string username = 3;\n   */\n  username: string;\n\n  /**\n   *\n   * MQTT password to use (most useful for a custom MQTT server).\n   * If using a custom server, this will be honoured even if empty.\n   * If using the default server, this will only be honoured if set, otherwise the device will use the default password\n   *\n   * @generated from field: string password = 4;\n   */\n  password: string;\n\n  /**\n   *\n   * Whether to send encrypted or decrypted packets to MQTT.\n   * This parameter is only honoured if you also set server\n   * (the default official mqtt.meshtastic.org server can handle encrypted packets)\n   * Decrypted packets may be useful for external systems that want to consume meshtastic packets\n   *\n   * @generated from field: bool encryption_enabled = 5;\n   */\n  encryptionEnabled: boolean;\n\n  /**\n   *\n   * Whether to send / consume json packets on MQTT\n   *\n   * @generated from field: bool json_enabled = 6;\n   */\n  jsonEnabled: boolean;\n\n  /**\n   *\n   * If true, we attempt to establish a secure connection using TLS\n   *\n   * @generated from field: bool tls_enabled = 7;\n   */\n  tlsEnabled: boolean;\n\n  /**\n   *\n   * The root topic to use for MQTT messages. Default is \"msh\".\n   * This is useful if you want to use a single MQTT server for multiple meshtastic networks and separate them via ACLs\n   *\n   * @generated from field: string root = 8;\n   */\n  root: string;\n\n  /**\n   *\n   * If true, we can use the connected phone / client to proxy messages to MQTT instead of a direct connection\n   *\n   * @generated from field: bool proxy_to_client_enabled = 9;\n   */\n  proxyToClientEnabled: boolean;\n\n  /**\n   *\n   * If true, we will periodically report unencrypted information about our node to a map via MQTT\n   *\n   * @generated from field: bool map_reporting_enabled = 10;\n   */\n  mapReportingEnabled: boolean;\n\n  /**\n   *\n   * Settings for reporting information about our node to a map via MQTT\n   *\n   * @generated from field: meshtastic.ModuleConfig.MapReportSettings map_report_settings = 11;\n   */\n  mapReportSettings?: ModuleConfig_MapReportSettings;\n};\n\n/**\n * Describes the message meshtastic.ModuleConfig.MQTTConfig.\n * Use `create(ModuleConfig_MQTTConfigSchema)` to create a new message.\n */\nexport const ModuleConfig_MQTTConfigSchema: GenMessage<ModuleConfig_MQTTConfig> = /*@__PURE__*/\n  messageDesc(file_module_config, 0, 0);\n\n/**\n *\n * Settings for reporting unencrypted information about our node to a map via MQTT\n *\n * @generated from message meshtastic.ModuleConfig.MapReportSettings\n */\nexport type ModuleConfig_MapReportSettings = Message<\"meshtastic.ModuleConfig.MapReportSettings\"> & {\n  /**\n   *\n   * How often we should report our info to the map (in seconds)\n   *\n   * @generated from field: uint32 publish_interval_secs = 1;\n   */\n  publishIntervalSecs: number;\n\n  /**\n   *\n   * Bits of precision for the location sent (default of 32 is full precision).\n   *\n   * @generated from field: uint32 position_precision = 2;\n   */\n  positionPrecision: number;\n};\n\n/**\n * Describes the message meshtastic.ModuleConfig.MapReportSettings.\n * Use `create(ModuleConfig_MapReportSettingsSchema)` to create a new message.\n */\nexport const ModuleConfig_MapReportSettingsSchema: GenMessage<ModuleConfig_MapReportSettings> = /*@__PURE__*/\n  messageDesc(file_module_config, 0, 1);\n\n/**\n *\n * RemoteHardwareModule Config\n *\n * @generated from message meshtastic.ModuleConfig.RemoteHardwareConfig\n */\nexport type ModuleConfig_RemoteHardwareConfig = Message<\"meshtastic.ModuleConfig.RemoteHardwareConfig\"> & {\n  /**\n   *\n   * Whether the Module is enabled\n   *\n   * @generated from field: bool enabled = 1;\n   */\n  enabled: boolean;\n\n  /**\n   *\n   * Whether the Module allows consumers to read / write to pins not defined in available_pins\n   *\n   * @generated from field: bool allow_undefined_pin_access = 2;\n   */\n  allowUndefinedPinAccess: boolean;\n\n  /**\n   *\n   * Exposes the available pins to the mesh for reading and writing\n   *\n   * @generated from field: repeated meshtastic.RemoteHardwarePin available_pins = 3;\n   */\n  availablePins: RemoteHardwarePin[];\n};\n\n/**\n * Describes the message meshtastic.ModuleConfig.RemoteHardwareConfig.\n * Use `create(ModuleConfig_RemoteHardwareConfigSchema)` to create a new message.\n */\nexport const ModuleConfig_RemoteHardwareConfigSchema: GenMessage<ModuleConfig_RemoteHardwareConfig> = /*@__PURE__*/\n  messageDesc(file_module_config, 0, 2);\n\n/**\n *\n * NeighborInfoModule Config\n *\n * @generated from message meshtastic.ModuleConfig.NeighborInfoConfig\n */\nexport type ModuleConfig_NeighborInfoConfig = Message<\"meshtastic.ModuleConfig.NeighborInfoConfig\"> & {\n  /**\n   *\n   * Whether the Module is enabled\n   *\n   * @generated from field: bool enabled = 1;\n   */\n  enabled: boolean;\n\n  /**\n   *\n   * Interval in seconds of how often we should try to send our\n   * Neighbor Info to the mesh\n   *\n   * @generated from field: uint32 update_interval = 2;\n   */\n  updateInterval: number;\n};\n\n/**\n * Describes the message meshtastic.ModuleConfig.NeighborInfoConfig.\n * Use `create(ModuleConfig_NeighborInfoConfigSchema)` to create a new message.\n */\nexport const ModuleConfig_NeighborInfoConfigSchema: GenMessage<ModuleConfig_NeighborInfoConfig> = /*@__PURE__*/\n  messageDesc(file_module_config, 0, 3);\n\n/**\n *\n * Detection Sensor Module Config\n *\n * @generated from message meshtastic.ModuleConfig.DetectionSensorConfig\n */\nexport type ModuleConfig_DetectionSensorConfig = Message<\"meshtastic.ModuleConfig.DetectionSensorConfig\"> & {\n  /**\n   *\n   * Whether the Module is enabled\n   *\n   * @generated from field: bool enabled = 1;\n   */\n  enabled: boolean;\n\n  /**\n   *\n   * Interval in seconds of how often we can send a message to the mesh when a\n   * trigger event is detected\n   *\n   * @generated from field: uint32 minimum_broadcast_secs = 2;\n   */\n  minimumBroadcastSecs: number;\n\n  /**\n   *\n   * Interval in seconds of how often we should send a message to the mesh\n   * with the current state regardless of trigger events When set to 0, only\n   * trigger events will be broadcasted Works as a sort of status heartbeat\n   * for peace of mind\n   *\n   * @generated from field: uint32 state_broadcast_secs = 3;\n   */\n  stateBroadcastSecs: number;\n\n  /**\n   *\n   * Send ASCII bell with alert message\n   * Useful for triggering ext. notification on bell\n   *\n   * @generated from field: bool send_bell = 4;\n   */\n  sendBell: boolean;\n\n  /**\n   *\n   * Friendly name used to format message sent to mesh\n   * Example: A name \"Motion\" would result in a message \"Motion detected\"\n   * Maximum length of 20 characters\n   *\n   * @generated from field: string name = 5;\n   */\n  name: string;\n\n  /**\n   *\n   * GPIO pin to monitor for state changes\n   *\n   * @generated from field: uint32 monitor_pin = 6;\n   */\n  monitorPin: number;\n\n  /**\n   *\n   * The type of trigger event to be used\n   *\n   * @generated from field: meshtastic.ModuleConfig.DetectionSensorConfig.TriggerType detection_trigger_type = 7;\n   */\n  detectionTriggerType: ModuleConfig_DetectionSensorConfig_TriggerType;\n\n  /**\n   *\n   * Whether or not use INPUT_PULLUP mode for GPIO pin\n   * Only applicable if the board uses pull-up resistors on the pin\n   *\n   * @generated from field: bool use_pullup = 8;\n   */\n  usePullup: boolean;\n};\n\n/**\n * Describes the message meshtastic.ModuleConfig.DetectionSensorConfig.\n * Use `create(ModuleConfig_DetectionSensorConfigSchema)` to create a new message.\n */\nexport const ModuleConfig_DetectionSensorConfigSchema: GenMessage<ModuleConfig_DetectionSensorConfig> = /*@__PURE__*/\n  messageDesc(file_module_config, 0, 4);\n\n/**\n * @generated from enum meshtastic.ModuleConfig.DetectionSensorConfig.TriggerType\n */\nexport enum ModuleConfig_DetectionSensorConfig_TriggerType {\n  /**\n   * Event is triggered if pin is low\n   *\n   * @generated from enum value: LOGIC_LOW = 0;\n   */\n  LOGIC_LOW = 0,\n\n  /**\n   * Event is triggered if pin is high\n   *\n   * @generated from enum value: LOGIC_HIGH = 1;\n   */\n  LOGIC_HIGH = 1,\n\n  /**\n   * Event is triggered when pin goes high to low\n   *\n   * @generated from enum value: FALLING_EDGE = 2;\n   */\n  FALLING_EDGE = 2,\n\n  /**\n   * Event is triggered when pin goes low to high\n   *\n   * @generated from enum value: RISING_EDGE = 3;\n   */\n  RISING_EDGE = 3,\n\n  /**\n   * Event is triggered on every pin state change, low is considered to be\n   * \"active\"\n   *\n   * @generated from enum value: EITHER_EDGE_ACTIVE_LOW = 4;\n   */\n  EITHER_EDGE_ACTIVE_LOW = 4,\n\n  /**\n   * Event is triggered on every pin state change, high is considered to be\n   * \"active\"\n   *\n   * @generated from enum value: EITHER_EDGE_ACTIVE_HIGH = 5;\n   */\n  EITHER_EDGE_ACTIVE_HIGH = 5,\n}\n\n/**\n * Describes the enum meshtastic.ModuleConfig.DetectionSensorConfig.TriggerType.\n */\nexport const ModuleConfig_DetectionSensorConfig_TriggerTypeSchema: GenEnum<ModuleConfig_DetectionSensorConfig_TriggerType> = /*@__PURE__*/\n  enumDesc(file_module_config, 0, 4, 0);\n\n/**\n *\n * Audio Config for codec2 voice\n *\n * @generated from message meshtastic.ModuleConfig.AudioConfig\n */\nexport type ModuleConfig_AudioConfig = Message<\"meshtastic.ModuleConfig.AudioConfig\"> & {\n  /**\n   *\n   * Whether Audio is enabled\n   *\n   * @generated from field: bool codec2_enabled = 1;\n   */\n  codec2Enabled: boolean;\n\n  /**\n   *\n   * PTT Pin\n   *\n   * @generated from field: uint32 ptt_pin = 2;\n   */\n  pttPin: number;\n\n  /**\n   *\n   * The audio sample rate to use for codec2\n   *\n   * @generated from field: meshtastic.ModuleConfig.AudioConfig.Audio_Baud bitrate = 3;\n   */\n  bitrate: ModuleConfig_AudioConfig_Audio_Baud;\n\n  /**\n   *\n   * I2S Word Select\n   *\n   * @generated from field: uint32 i2s_ws = 4;\n   */\n  i2sWs: number;\n\n  /**\n   *\n   * I2S Data IN\n   *\n   * @generated from field: uint32 i2s_sd = 5;\n   */\n  i2sSd: number;\n\n  /**\n   *\n   * I2S Data OUT\n   *\n   * @generated from field: uint32 i2s_din = 6;\n   */\n  i2sDin: number;\n\n  /**\n   *\n   * I2S Clock\n   *\n   * @generated from field: uint32 i2s_sck = 7;\n   */\n  i2sSck: number;\n};\n\n/**\n * Describes the message meshtastic.ModuleConfig.AudioConfig.\n * Use `create(ModuleConfig_AudioConfigSchema)` to create a new message.\n */\nexport const ModuleConfig_AudioConfigSchema: GenMessage<ModuleConfig_AudioConfig> = /*@__PURE__*/\n  messageDesc(file_module_config, 0, 5);\n\n/**\n *\n * Baudrate for codec2 voice\n *\n * @generated from enum meshtastic.ModuleConfig.AudioConfig.Audio_Baud\n */\nexport enum ModuleConfig_AudioConfig_Audio_Baud {\n  /**\n   * @generated from enum value: CODEC2_DEFAULT = 0;\n   */\n  CODEC2_DEFAULT = 0,\n\n  /**\n   * @generated from enum value: CODEC2_3200 = 1;\n   */\n  CODEC2_3200 = 1,\n\n  /**\n   * @generated from enum value: CODEC2_2400 = 2;\n   */\n  CODEC2_2400 = 2,\n\n  /**\n   * @generated from enum value: CODEC2_1600 = 3;\n   */\n  CODEC2_1600 = 3,\n\n  /**\n   * @generated from enum value: CODEC2_1400 = 4;\n   */\n  CODEC2_1400 = 4,\n\n  /**\n   * @generated from enum value: CODEC2_1300 = 5;\n   */\n  CODEC2_1300 = 5,\n\n  /**\n   * @generated from enum value: CODEC2_1200 = 6;\n   */\n  CODEC2_1200 = 6,\n\n  /**\n   * @generated from enum value: CODEC2_700 = 7;\n   */\n  CODEC2_700 = 7,\n\n  /**\n   * @generated from enum value: CODEC2_700B = 8;\n   */\n  CODEC2_700B = 8,\n}\n\n/**\n * Describes the enum meshtastic.ModuleConfig.AudioConfig.Audio_Baud.\n */\nexport const ModuleConfig_AudioConfig_Audio_BaudSchema: GenEnum<ModuleConfig_AudioConfig_Audio_Baud> = /*@__PURE__*/\n  enumDesc(file_module_config, 0, 5, 0);\n\n/**\n *\n * Config for the Paxcounter Module\n *\n * @generated from message meshtastic.ModuleConfig.PaxcounterConfig\n */\nexport type ModuleConfig_PaxcounterConfig = Message<\"meshtastic.ModuleConfig.PaxcounterConfig\"> & {\n  /**\n   *\n   * Enable the Paxcounter Module\n   *\n   * @generated from field: bool enabled = 1;\n   */\n  enabled: boolean;\n\n  /**\n   * @generated from field: uint32 paxcounter_update_interval = 2;\n   */\n  paxcounterUpdateInterval: number;\n\n  /**\n   *\n   * WiFi RSSI threshold. Defaults to -80\n   *\n   * @generated from field: int32 wifi_threshold = 3;\n   */\n  wifiThreshold: number;\n\n  /**\n   *\n   * BLE RSSI threshold. Defaults to -80\n   *\n   * @generated from field: int32 ble_threshold = 4;\n   */\n  bleThreshold: number;\n};\n\n/**\n * Describes the message meshtastic.ModuleConfig.PaxcounterConfig.\n * Use `create(ModuleConfig_PaxcounterConfigSchema)` to create a new message.\n */\nexport const ModuleConfig_PaxcounterConfigSchema: GenMessage<ModuleConfig_PaxcounterConfig> = /*@__PURE__*/\n  messageDesc(file_module_config, 0, 6);\n\n/**\n *\n * Serial Config\n *\n * @generated from message meshtastic.ModuleConfig.SerialConfig\n */\nexport type ModuleConfig_SerialConfig = Message<\"meshtastic.ModuleConfig.SerialConfig\"> & {\n  /**\n   *\n   * Preferences for the SerialModule\n   *\n   * @generated from field: bool enabled = 1;\n   */\n  enabled: boolean;\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from field: bool echo = 2;\n   */\n  echo: boolean;\n\n  /**\n   *\n   * RX pin (should match Arduino gpio pin number)\n   *\n   * @generated from field: uint32 rxd = 3;\n   */\n  rxd: number;\n\n  /**\n   *\n   * TX pin (should match Arduino gpio pin number)\n   *\n   * @generated from field: uint32 txd = 4;\n   */\n  txd: number;\n\n  /**\n   *\n   * Serial baud rate\n   *\n   * @generated from field: meshtastic.ModuleConfig.SerialConfig.Serial_Baud baud = 5;\n   */\n  baud: ModuleConfig_SerialConfig_Serial_Baud;\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from field: uint32 timeout = 6;\n   */\n  timeout: number;\n\n  /**\n   *\n   * Mode for serial module operation\n   *\n   * @generated from field: meshtastic.ModuleConfig.SerialConfig.Serial_Mode mode = 7;\n   */\n  mode: ModuleConfig_SerialConfig_Serial_Mode;\n\n  /**\n   *\n   * Overrides the platform's defacto Serial port instance to use with Serial module config settings\n   * This is currently only usable in output modes like NMEA / CalTopo and may behave strangely or not work at all in other modes\n   * Existing logging over the Serial Console will still be present\n   *\n   * @generated from field: bool override_console_serial_port = 8;\n   */\n  overrideConsoleSerialPort: boolean;\n};\n\n/**\n * Describes the message meshtastic.ModuleConfig.SerialConfig.\n * Use `create(ModuleConfig_SerialConfigSchema)` to create a new message.\n */\nexport const ModuleConfig_SerialConfigSchema: GenMessage<ModuleConfig_SerialConfig> = /*@__PURE__*/\n  messageDesc(file_module_config, 0, 7);\n\n/**\n *\n * TODO: REPLACE\n *\n * @generated from enum meshtastic.ModuleConfig.SerialConfig.Serial_Baud\n */\nexport enum ModuleConfig_SerialConfig_Serial_Baud {\n  /**\n   * @generated from enum value: BAUD_DEFAULT = 0;\n   */\n  BAUD_DEFAULT = 0,\n\n  /**\n   * @generated from enum value: BAUD_110 = 1;\n   */\n  BAUD_110 = 1,\n\n  /**\n   * @generated from enum value: BAUD_300 = 2;\n   */\n  BAUD_300 = 2,\n\n  /**\n   * @generated from enum value: BAUD_600 = 3;\n   */\n  BAUD_600 = 3,\n\n  /**\n   * @generated from enum value: BAUD_1200 = 4;\n   */\n  BAUD_1200 = 4,\n\n  /**\n   * @generated from enum value: BAUD_2400 = 5;\n   */\n  BAUD_2400 = 5,\n\n  /**\n   * @generated from enum value: BAUD_4800 = 6;\n   */\n  BAUD_4800 = 6,\n\n  /**\n   * @generated from enum value: BAUD_9600 = 7;\n   */\n  BAUD_9600 = 7,\n\n  /**\n   * @generated from enum value: BAUD_19200 = 8;\n   */\n  BAUD_19200 = 8,\n\n  /**\n   * @generated from enum value: BAUD_38400 = 9;\n   */\n  BAUD_38400 = 9,\n\n  /**\n   * @generated from enum value: BAUD_57600 = 10;\n   */\n  BAUD_57600 = 10,\n\n  /**\n   * @generated from enum value: BAUD_115200 = 11;\n   */\n  BAUD_115200 = 11,\n\n  /**\n   * @generated from enum value: BAUD_230400 = 12;\n   */\n  BAUD_230400 = 12,\n\n  /**\n   * @generated from enum value: BAUD_460800 = 13;\n   */\n  BAUD_460800 = 13,\n\n  /**\n   * @generated from enum value: BAUD_576000 = 14;\n   */\n  BAUD_576000 = 14,\n\n  /**\n   * @generated from enum value: BAUD_921600 = 15;\n   */\n  BAUD_921600 = 15,\n}\n\n/**\n * Describes the enum meshtastic.ModuleConfig.SerialConfig.Serial_Baud.\n */\nexport const ModuleConfig_SerialConfig_Serial_BaudSchema: GenEnum<ModuleConfig_SerialConfig_Serial_Baud> = /*@__PURE__*/\n  enumDesc(file_module_config, 0, 7, 0);\n\n/**\n *\n * TODO: REPLACE\n *\n * @generated from enum meshtastic.ModuleConfig.SerialConfig.Serial_Mode\n */\nexport enum ModuleConfig_SerialConfig_Serial_Mode {\n  /**\n   * @generated from enum value: DEFAULT = 0;\n   */\n  DEFAULT = 0,\n\n  /**\n   * @generated from enum value: SIMPLE = 1;\n   */\n  SIMPLE = 1,\n\n  /**\n   * @generated from enum value: PROTO = 2;\n   */\n  PROTO = 2,\n\n  /**\n   * @generated from enum value: TEXTMSG = 3;\n   */\n  TEXTMSG = 3,\n\n  /**\n   * @generated from enum value: NMEA = 4;\n   */\n  NMEA = 4,\n\n  /**\n   * NMEA messages specifically tailored for CalTopo\n   *\n   * @generated from enum value: CALTOPO = 5;\n   */\n  CALTOPO = 5,\n\n  /**\n   * Ecowitt WS85 weather station\n   *\n   * @generated from enum value: WS85 = 6;\n   */\n  WS85 = 6,\n}\n\n/**\n * Describes the enum meshtastic.ModuleConfig.SerialConfig.Serial_Mode.\n */\nexport const ModuleConfig_SerialConfig_Serial_ModeSchema: GenEnum<ModuleConfig_SerialConfig_Serial_Mode> = /*@__PURE__*/\n  enumDesc(file_module_config, 0, 7, 1);\n\n/**\n *\n * External Notifications Config\n *\n * @generated from message meshtastic.ModuleConfig.ExternalNotificationConfig\n */\nexport type ModuleConfig_ExternalNotificationConfig = Message<\"meshtastic.ModuleConfig.ExternalNotificationConfig\"> & {\n  /**\n   *\n   * Enable the ExternalNotificationModule\n   *\n   * @generated from field: bool enabled = 1;\n   */\n  enabled: boolean;\n\n  /**\n   *\n   * When using in On/Off mode, keep the output on for this many\n   * milliseconds. Default 1000ms (1 second).\n   *\n   * @generated from field: uint32 output_ms = 2;\n   */\n  outputMs: number;\n\n  /**\n   *\n   * Define the output pin GPIO setting Defaults to\n   * EXT_NOTIFY_OUT if set for the board.\n   * In standalone devices this pin should drive the LED to match the UI.\n   *\n   * @generated from field: uint32 output = 3;\n   */\n  output: number;\n\n  /**\n   *\n   * Optional: Define a secondary output pin for a vibra motor\n   * This is used in standalone devices to match the UI.\n   *\n   * @generated from field: uint32 output_vibra = 8;\n   */\n  outputVibra: number;\n\n  /**\n   *\n   * Optional: Define a tertiary output pin for an active buzzer\n   * This is used in standalone devices to to match the UI.\n   *\n   * @generated from field: uint32 output_buzzer = 9;\n   */\n  outputBuzzer: number;\n\n  /**\n   *\n   * IF this is true, the 'output' Pin will be pulled active high, false\n   * means active low.\n   *\n   * @generated from field: bool active = 4;\n   */\n  active: boolean;\n\n  /**\n   *\n   * True: Alert when a text message arrives (output)\n   *\n   * @generated from field: bool alert_message = 5;\n   */\n  alertMessage: boolean;\n\n  /**\n   *\n   * True: Alert when a text message arrives (output_vibra)\n   *\n   * @generated from field: bool alert_message_vibra = 10;\n   */\n  alertMessageVibra: boolean;\n\n  /**\n   *\n   * True: Alert when a text message arrives (output_buzzer)\n   *\n   * @generated from field: bool alert_message_buzzer = 11;\n   */\n  alertMessageBuzzer: boolean;\n\n  /**\n   *\n   * True: Alert when the bell character is received (output)\n   *\n   * @generated from field: bool alert_bell = 6;\n   */\n  alertBell: boolean;\n\n  /**\n   *\n   * True: Alert when the bell character is received (output_vibra)\n   *\n   * @generated from field: bool alert_bell_vibra = 12;\n   */\n  alertBellVibra: boolean;\n\n  /**\n   *\n   * True: Alert when the bell character is received (output_buzzer)\n   *\n   * @generated from field: bool alert_bell_buzzer = 13;\n   */\n  alertBellBuzzer: boolean;\n\n  /**\n   *\n   * use a PWM output instead of a simple on/off output. This will ignore\n   * the 'output', 'output_ms' and 'active' settings and use the\n   * device.buzzer_gpio instead.\n   *\n   * @generated from field: bool use_pwm = 7;\n   */\n  usePwm: boolean;\n\n  /**\n   *\n   * The notification will toggle with 'output_ms' for this time of seconds.\n   * Default is 0 which means don't repeat at all. 60 would mean blink\n   * and/or beep for 60 seconds\n   *\n   * @generated from field: uint32 nag_timeout = 14;\n   */\n  nagTimeout: number;\n\n  /**\n   *\n   * When true, enables devices with native I2S audio output to use the RTTTL over speaker like a buzzer\n   * T-Watch S3 and T-Deck for example have this capability\n   *\n   * @generated from field: bool use_i2s_as_buzzer = 15;\n   */\n  useI2sAsBuzzer: boolean;\n};\n\n/**\n * Describes the message meshtastic.ModuleConfig.ExternalNotificationConfig.\n * Use `create(ModuleConfig_ExternalNotificationConfigSchema)` to create a new message.\n */\nexport const ModuleConfig_ExternalNotificationConfigSchema: GenMessage<ModuleConfig_ExternalNotificationConfig> = /*@__PURE__*/\n  messageDesc(file_module_config, 0, 8);\n\n/**\n *\n * Store and Forward Module Config\n *\n * @generated from message meshtastic.ModuleConfig.StoreForwardConfig\n */\nexport type ModuleConfig_StoreForwardConfig = Message<\"meshtastic.ModuleConfig.StoreForwardConfig\"> & {\n  /**\n   *\n   * Enable the Store and Forward Module\n   *\n   * @generated from field: bool enabled = 1;\n   */\n  enabled: boolean;\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from field: bool heartbeat = 2;\n   */\n  heartbeat: boolean;\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from field: uint32 records = 3;\n   */\n  records: number;\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from field: uint32 history_return_max = 4;\n   */\n  historyReturnMax: number;\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from field: uint32 history_return_window = 5;\n   */\n  historyReturnWindow: number;\n\n  /**\n   *\n   * Set to true to let this node act as a server that stores received messages and resends them upon request.\n   *\n   * @generated from field: bool is_server = 6;\n   */\n  isServer: boolean;\n};\n\n/**\n * Describes the message meshtastic.ModuleConfig.StoreForwardConfig.\n * Use `create(ModuleConfig_StoreForwardConfigSchema)` to create a new message.\n */\nexport const ModuleConfig_StoreForwardConfigSchema: GenMessage<ModuleConfig_StoreForwardConfig> = /*@__PURE__*/\n  messageDesc(file_module_config, 0, 9);\n\n/**\n *\n * Preferences for the RangeTestModule\n *\n * @generated from message meshtastic.ModuleConfig.RangeTestConfig\n */\nexport type ModuleConfig_RangeTestConfig = Message<\"meshtastic.ModuleConfig.RangeTestConfig\"> & {\n  /**\n   *\n   * Enable the Range Test Module\n   *\n   * @generated from field: bool enabled = 1;\n   */\n  enabled: boolean;\n\n  /**\n   *\n   * Send out range test messages from this node\n   *\n   * @generated from field: uint32 sender = 2;\n   */\n  sender: number;\n\n  /**\n   *\n   * Bool value indicating that this node should save a RangeTest.csv file.\n   * ESP32 Only\n   *\n   * @generated from field: bool save = 3;\n   */\n  save: boolean;\n};\n\n/**\n * Describes the message meshtastic.ModuleConfig.RangeTestConfig.\n * Use `create(ModuleConfig_RangeTestConfigSchema)` to create a new message.\n */\nexport const ModuleConfig_RangeTestConfigSchema: GenMessage<ModuleConfig_RangeTestConfig> = /*@__PURE__*/\n  messageDesc(file_module_config, 0, 10);\n\n/**\n *\n * Configuration for both device and environment metrics\n *\n * @generated from message meshtastic.ModuleConfig.TelemetryConfig\n */\nexport type ModuleConfig_TelemetryConfig = Message<\"meshtastic.ModuleConfig.TelemetryConfig\"> & {\n  /**\n   *\n   * Interval in seconds of how often we should try to send our\n   * device metrics to the mesh\n   *\n   * @generated from field: uint32 device_update_interval = 1;\n   */\n  deviceUpdateInterval: number;\n\n  /**\n   * @generated from field: uint32 environment_update_interval = 2;\n   */\n  environmentUpdateInterval: number;\n\n  /**\n   *\n   * Preferences for the Telemetry Module (Environment)\n   * Enable/Disable the telemetry measurement module measurement collection\n   *\n   * @generated from field: bool environment_measurement_enabled = 3;\n   */\n  environmentMeasurementEnabled: boolean;\n\n  /**\n   *\n   * Enable/Disable the telemetry measurement module on-device display\n   *\n   * @generated from field: bool environment_screen_enabled = 4;\n   */\n  environmentScreenEnabled: boolean;\n\n  /**\n   *\n   * We'll always read the sensor in Celsius, but sometimes we might want to\n   * display the results in Fahrenheit as a \"user preference\".\n   *\n   * @generated from field: bool environment_display_fahrenheit = 5;\n   */\n  environmentDisplayFahrenheit: boolean;\n\n  /**\n   *\n   * Enable/Disable the air quality metrics\n   *\n   * @generated from field: bool air_quality_enabled = 6;\n   */\n  airQualityEnabled: boolean;\n\n  /**\n   *\n   * Interval in seconds of how often we should try to send our\n   * air quality metrics to the mesh\n   *\n   * @generated from field: uint32 air_quality_interval = 7;\n   */\n  airQualityInterval: number;\n\n  /**\n   *\n   * Enable/disable Power metrics\n   *\n   * @generated from field: bool power_measurement_enabled = 8;\n   */\n  powerMeasurementEnabled: boolean;\n\n  /**\n   *\n   * Interval in seconds of how often we should try to send our\n   * power metrics to the mesh\n   *\n   * @generated from field: uint32 power_update_interval = 9;\n   */\n  powerUpdateInterval: number;\n\n  /**\n   *\n   * Enable/Disable the power measurement module on-device display\n   *\n   * @generated from field: bool power_screen_enabled = 10;\n   */\n  powerScreenEnabled: boolean;\n\n  /**\n   *\n   * Preferences for the (Health) Telemetry Module\n   * Enable/Disable the telemetry measurement module measurement collection\n   *\n   * @generated from field: bool health_measurement_enabled = 11;\n   */\n  healthMeasurementEnabled: boolean;\n\n  /**\n   *\n   * Interval in seconds of how often we should try to send our\n   * health metrics to the mesh\n   *\n   * @generated from field: uint32 health_update_interval = 12;\n   */\n  healthUpdateInterval: number;\n\n  /**\n   *\n   * Enable/Disable the health telemetry module on-device display\n   *\n   * @generated from field: bool health_screen_enabled = 13;\n   */\n  healthScreenEnabled: boolean;\n};\n\n/**\n * Describes the message meshtastic.ModuleConfig.TelemetryConfig.\n * Use `create(ModuleConfig_TelemetryConfigSchema)` to create a new message.\n */\nexport const ModuleConfig_TelemetryConfigSchema: GenMessage<ModuleConfig_TelemetryConfig> = /*@__PURE__*/\n  messageDesc(file_module_config, 0, 11);\n\n/**\n *\n * TODO: REPLACE\n *\n * @generated from message meshtastic.ModuleConfig.CannedMessageConfig\n */\nexport type ModuleConfig_CannedMessageConfig = Message<\"meshtastic.ModuleConfig.CannedMessageConfig\"> & {\n  /**\n   *\n   * Enable the rotary encoder #1. This is a 'dumb' encoder sending pulses on both A and B pins while rotating.\n   *\n   * @generated from field: bool rotary1_enabled = 1;\n   */\n  rotary1Enabled: boolean;\n\n  /**\n   *\n   * GPIO pin for rotary encoder A port.\n   *\n   * @generated from field: uint32 inputbroker_pin_a = 2;\n   */\n  inputbrokerPinA: number;\n\n  /**\n   *\n   * GPIO pin for rotary encoder B port.\n   *\n   * @generated from field: uint32 inputbroker_pin_b = 3;\n   */\n  inputbrokerPinB: number;\n\n  /**\n   *\n   * GPIO pin for rotary encoder Press port.\n   *\n   * @generated from field: uint32 inputbroker_pin_press = 4;\n   */\n  inputbrokerPinPress: number;\n\n  /**\n   *\n   * Generate input event on CW of this kind.\n   *\n   * @generated from field: meshtastic.ModuleConfig.CannedMessageConfig.InputEventChar inputbroker_event_cw = 5;\n   */\n  inputbrokerEventCw: ModuleConfig_CannedMessageConfig_InputEventChar;\n\n  /**\n   *\n   * Generate input event on CCW of this kind.\n   *\n   * @generated from field: meshtastic.ModuleConfig.CannedMessageConfig.InputEventChar inputbroker_event_ccw = 6;\n   */\n  inputbrokerEventCcw: ModuleConfig_CannedMessageConfig_InputEventChar;\n\n  /**\n   *\n   * Generate input event on Press of this kind.\n   *\n   * @generated from field: meshtastic.ModuleConfig.CannedMessageConfig.InputEventChar inputbroker_event_press = 7;\n   */\n  inputbrokerEventPress: ModuleConfig_CannedMessageConfig_InputEventChar;\n\n  /**\n   *\n   * Enable the Up/Down/Select input device. Can be RAK rotary encoder or 3 buttons. Uses the a/b/press definitions from inputbroker.\n   *\n   * @generated from field: bool updown1_enabled = 8;\n   */\n  updown1Enabled: boolean;\n\n  /**\n   *\n   * Enable/disable CannedMessageModule.\n   *\n   * @generated from field: bool enabled = 9;\n   */\n  enabled: boolean;\n\n  /**\n   *\n   * Input event origin accepted by the canned message module.\n   * Can be e.g. \"rotEnc1\", \"upDownEnc1\", \"scanAndSelect\", \"cardkb\", \"serialkb\", or keyword \"_any\"\n   *\n   * @generated from field: string allow_input_source = 10;\n   */\n  allowInputSource: string;\n\n  /**\n   *\n   * CannedMessageModule also sends a bell character with the messages.\n   * ExternalNotificationModule can benefit from this feature.\n   *\n   * @generated from field: bool send_bell = 11;\n   */\n  sendBell: boolean;\n};\n\n/**\n * Describes the message meshtastic.ModuleConfig.CannedMessageConfig.\n * Use `create(ModuleConfig_CannedMessageConfigSchema)` to create a new message.\n */\nexport const ModuleConfig_CannedMessageConfigSchema: GenMessage<ModuleConfig_CannedMessageConfig> = /*@__PURE__*/\n  messageDesc(file_module_config, 0, 12);\n\n/**\n *\n * TODO: REPLACE\n *\n * @generated from enum meshtastic.ModuleConfig.CannedMessageConfig.InputEventChar\n */\nexport enum ModuleConfig_CannedMessageConfig_InputEventChar {\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: NONE = 0;\n   */\n  NONE = 0,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: UP = 17;\n   */\n  UP = 17,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: DOWN = 18;\n   */\n  DOWN = 18,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: LEFT = 19;\n   */\n  LEFT = 19,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: RIGHT = 20;\n   */\n  RIGHT = 20,\n\n  /**\n   *\n   * '\\n'\n   *\n   * @generated from enum value: SELECT = 10;\n   */\n  SELECT = 10,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: BACK = 27;\n   */\n  BACK = 27,\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from enum value: CANCEL = 24;\n   */\n  CANCEL = 24,\n}\n\n/**\n * Describes the enum meshtastic.ModuleConfig.CannedMessageConfig.InputEventChar.\n */\nexport const ModuleConfig_CannedMessageConfig_InputEventCharSchema: GenEnum<ModuleConfig_CannedMessageConfig_InputEventChar> = /*@__PURE__*/\n  enumDesc(file_module_config, 0, 12, 0);\n\n/**\n *\n * Ambient Lighting Module - Settings for control of onboard LEDs to allow users to adjust the brightness levels and respective color levels.\n * Initially created for the RAK14001 RGB LED module.\n *\n * @generated from message meshtastic.ModuleConfig.AmbientLightingConfig\n */\nexport type ModuleConfig_AmbientLightingConfig = Message<\"meshtastic.ModuleConfig.AmbientLightingConfig\"> & {\n  /**\n   *\n   * Sets LED to on or off.\n   *\n   * @generated from field: bool led_state = 1;\n   */\n  ledState: boolean;\n\n  /**\n   *\n   * Sets the current for the LED output. Default is 10.\n   *\n   * @generated from field: uint32 current = 2;\n   */\n  current: number;\n\n  /**\n   *\n   * Sets the red LED level. Values are 0-255.\n   *\n   * @generated from field: uint32 red = 3;\n   */\n  red: number;\n\n  /**\n   *\n   * Sets the green LED level. Values are 0-255.\n   *\n   * @generated from field: uint32 green = 4;\n   */\n  green: number;\n\n  /**\n   *\n   * Sets the blue LED level. Values are 0-255.\n   *\n   * @generated from field: uint32 blue = 5;\n   */\n  blue: number;\n};\n\n/**\n * Describes the message meshtastic.ModuleConfig.AmbientLightingConfig.\n * Use `create(ModuleConfig_AmbientLightingConfigSchema)` to create a new message.\n */\nexport const ModuleConfig_AmbientLightingConfigSchema: GenMessage<ModuleConfig_AmbientLightingConfig> = /*@__PURE__*/\n  messageDesc(file_module_config, 0, 13);\n\n/**\n *\n * A GPIO pin definition for remote hardware module\n *\n * @generated from message meshtastic.RemoteHardwarePin\n */\nexport type RemoteHardwarePin = Message<\"meshtastic.RemoteHardwarePin\"> & {\n  /**\n   *\n   * GPIO Pin number (must match Arduino)\n   *\n   * @generated from field: uint32 gpio_pin = 1;\n   */\n  gpioPin: number;\n\n  /**\n   *\n   * Name for the GPIO pin (i.e. Front gate, mailbox, etc)\n   *\n   * @generated from field: string name = 2;\n   */\n  name: string;\n\n  /**\n   *\n   * Type of GPIO access available to consumers on the mesh\n   *\n   * @generated from field: meshtastic.RemoteHardwarePinType type = 3;\n   */\n  type: RemoteHardwarePinType;\n};\n\n/**\n * Describes the message meshtastic.RemoteHardwarePin.\n * Use `create(RemoteHardwarePinSchema)` to create a new message.\n */\nexport const RemoteHardwarePinSchema: GenMessage<RemoteHardwarePin> = /*@__PURE__*/\n  messageDesc(file_module_config, 1);\n\n/**\n * @generated from enum meshtastic.RemoteHardwarePinType\n */\nexport enum RemoteHardwarePinType {\n  /**\n   *\n   * Unset/unused\n   *\n   * @generated from enum value: UNKNOWN = 0;\n   */\n  UNKNOWN = 0,\n\n  /**\n   *\n   * GPIO pin can be read (if it is high / low)\n   *\n   * @generated from enum value: DIGITAL_READ = 1;\n   */\n  DIGITAL_READ = 1,\n\n  /**\n   *\n   * GPIO pin can be written to (high / low)\n   *\n   * @generated from enum value: DIGITAL_WRITE = 2;\n   */\n  DIGITAL_WRITE = 2,\n}\n\n/**\n * Describes the enum meshtastic.RemoteHardwarePinType.\n */\nexport const RemoteHardwarePinTypeSchema: GenEnum<RemoteHardwarePinType> = /*@__PURE__*/\n  enumDesc(file_module_config, 0);\n\n","// @generated by protoc-gen-es v2.1.0 with parameter \"target=ts\"\n// @generated from file portnums.proto (package meshtastic, syntax proto3)\n/* eslint-disable */\n\nimport type { GenEnum, GenFile } from \"@bufbuild/protobuf/codegenv1\";\nimport { enumDesc, fileDesc } from \"@bufbuild/protobuf/codegenv1\";\n\n/**\n * Describes the file portnums.proto.\n */\nexport const file_portnums: GenFile = /*@__PURE__*/\n  fileDesc(\"Cg5wb3J0bnVtcy5wcm90bxIKbWVzaHRhc3RpYyqiBAoHUG9ydE51bRIPCgtVTktOT1dOX0FQUBAAEhQKEFRFWFRfTUVTU0FHRV9BUFAQARIXChNSRU1PVEVfSEFSRFdBUkVfQVBQEAISEAoMUE9TSVRJT05fQVBQEAMSEAoMTk9ERUlORk9fQVBQEAQSDwoLUk9VVElOR19BUFAQBRINCglBRE1JTl9BUFAQBhIfChtURVhUX01FU1NBR0VfQ09NUFJFU1NFRF9BUFAQBxIQCgxXQVlQT0lOVF9BUFAQCBINCglBVURJT19BUFAQCRIYChRERVRFQ1RJT05fU0VOU09SX0FQUBAKEg0KCVJFUExZX0FQUBAgEhEKDUlQX1RVTk5FTF9BUFAQIRISCg5QQVhDT1VOVEVSX0FQUBAiEg4KClNFUklBTF9BUFAQQBIVChFTVE9SRV9GT1JXQVJEX0FQUBBBEhIKDlJBTkdFX1RFU1RfQVBQEEISEQoNVEVMRU1FVFJZX0FQUBBDEgsKB1pQU19BUFAQRBIRCg1TSU1VTEFUT1JfQVBQEEUSEgoOVFJBQ0VST1VURV9BUFAQRhIUChBORUlHSEJPUklORk9fQVBQEEcSDwoLQVRBS19QTFVHSU4QSBISCg5NQVBfUkVQT1JUX0FQUBBJEhMKD1BPV0VSU1RSRVNTX0FQUBBKEhAKC1BSSVZBVEVfQVBQEIACEhMKDkFUQUtfRk9SV0FSREVSEIECEggKA01BWBD/A0JdChNjb20uZ2Vla3N2aWxsZS5tZXNoQghQb3J0bnVtc1oiZ2l0aHViLmNvbS9tZXNodGFzdGljL2dvL2dlbmVyYXRlZKoCFE1lc2h0YXN0aWMuUHJvdG9idWZzugIAYgZwcm90bzM\");\n\n/**\n *\n * For any new 'apps' that run on the device or via sister apps on phones/PCs they should pick and use a\n * unique 'portnum' for their application.\n * If you are making a new app using meshtastic, please send in a pull request to add your 'portnum' to this\n * master table.\n * PortNums should be assigned in the following range:\n * 0-63   Core Meshtastic use, do not use for third party apps\n * 64-127 Registered 3rd party apps, send in a pull request that adds a new entry to portnums.proto to  register your application\n * 256-511 Use one of these portnums for your private applications that you don't want to register publically\n * All other values are reserved.\n * Note: This was formerly a Type enum named 'typ' with the same id #\n * We have change to this 'portnum' based scheme for specifying app handlers for particular payloads.\n * This change is backwards compatible by treating the legacy OPAQUE/CLEAR_TEXT values identically.\n *\n * @generated from enum meshtastic.PortNum\n */\nexport enum PortNum {\n  /**\n   *\n   * Deprecated: do not use in new code (formerly called OPAQUE)\n   * A message sent from a device outside of the mesh, in a form the mesh does not understand\n   * NOTE: This must be 0, because it is documented in IMeshService.aidl to be so\n   * ENCODING: binary undefined\n   *\n   * @generated from enum value: UNKNOWN_APP = 0;\n   */\n  UNKNOWN_APP = 0,\n\n  /**\n   *\n   * A simple UTF-8 text message, which even the little micros in the mesh\n   * can understand and show on their screen eventually in some circumstances\n   * even signal might send messages in this form (see below)\n   * ENCODING: UTF-8 Plaintext (?)\n   *\n   * @generated from enum value: TEXT_MESSAGE_APP = 1;\n   */\n  TEXT_MESSAGE_APP = 1,\n\n  /**\n   *\n   * Reserved for built-in GPIO/example app.\n   * See remote_hardware.proto/HardwareMessage for details on the message sent/received to this port number\n   * ENCODING: Protobuf\n   *\n   * @generated from enum value: REMOTE_HARDWARE_APP = 2;\n   */\n  REMOTE_HARDWARE_APP = 2,\n\n  /**\n   *\n   * The built-in position messaging app.\n   * Payload is a Position message.\n   * ENCODING: Protobuf\n   *\n   * @generated from enum value: POSITION_APP = 3;\n   */\n  POSITION_APP = 3,\n\n  /**\n   *\n   * The built-in user info app.\n   * Payload is a User message.\n   * ENCODING: Protobuf\n   *\n   * @generated from enum value: NODEINFO_APP = 4;\n   */\n  NODEINFO_APP = 4,\n\n  /**\n   *\n   * Protocol control packets for mesh protocol use.\n   * Payload is a Routing message.\n   * ENCODING: Protobuf\n   *\n   * @generated from enum value: ROUTING_APP = 5;\n   */\n  ROUTING_APP = 5,\n\n  /**\n   *\n   * Admin control packets.\n   * Payload is a AdminMessage message.\n   * ENCODING: Protobuf\n   *\n   * @generated from enum value: ADMIN_APP = 6;\n   */\n  ADMIN_APP = 6,\n\n  /**\n   *\n   * Compressed TEXT_MESSAGE payloads.\n   * ENCODING: UTF-8 Plaintext (?) with Unishox2 Compression\n   * NOTE: The Device Firmware converts a TEXT_MESSAGE_APP to TEXT_MESSAGE_COMPRESSED_APP if the compressed\n   * payload is shorter. There's no need for app developers to do this themselves. Also the firmware will decompress\n   * any incoming TEXT_MESSAGE_COMPRESSED_APP payload and convert to TEXT_MESSAGE_APP.\n   *\n   * @generated from enum value: TEXT_MESSAGE_COMPRESSED_APP = 7;\n   */\n  TEXT_MESSAGE_COMPRESSED_APP = 7,\n\n  /**\n   *\n   * Waypoint payloads.\n   * Payload is a Waypoint message.\n   * ENCODING: Protobuf\n   *\n   * @generated from enum value: WAYPOINT_APP = 8;\n   */\n  WAYPOINT_APP = 8,\n\n  /**\n   *\n   * Audio Payloads.\n   * Encapsulated codec2 packets. On 2.4 GHZ Bandwidths only for now\n   * ENCODING: codec2 audio frames\n   * NOTE: audio frames contain a 3 byte header (0xc0 0xde 0xc2) and a one byte marker for the decompressed bitrate.\n   * This marker comes from the 'moduleConfig.audio.bitrate' enum minus one.\n   *\n   * @generated from enum value: AUDIO_APP = 9;\n   */\n  AUDIO_APP = 9,\n\n  /**\n   *\n   * Same as Text Message but originating from Detection Sensor Module.\n   * NOTE: This portnum traffic is not sent to the public MQTT starting at firmware version 2.2.9\n   *\n   * @generated from enum value: DETECTION_SENSOR_APP = 10;\n   */\n  DETECTION_SENSOR_APP = 10,\n\n  /**\n   *\n   * Provides a 'ping' service that replies to any packet it receives.\n   * Also serves as a small example module.\n   * ENCODING: ASCII Plaintext\n   *\n   * @generated from enum value: REPLY_APP = 32;\n   */\n  REPLY_APP = 32,\n\n  /**\n   *\n   * Used for the python IP tunnel feature\n   * ENCODING: IP Packet. Handled by the python API, firmware ignores this one and pases on.\n   *\n   * @generated from enum value: IP_TUNNEL_APP = 33;\n   */\n  IP_TUNNEL_APP = 33,\n\n  /**\n   *\n   * Paxcounter lib included in the firmware\n   * ENCODING: protobuf\n   *\n   * @generated from enum value: PAXCOUNTER_APP = 34;\n   */\n  PAXCOUNTER_APP = 34,\n\n  /**\n   *\n   * Provides a hardware serial interface to send and receive from the Meshtastic network.\n   * Connect to the RX/TX pins of a device with 38400 8N1. Packets received from the Meshtastic\n   * network is forwarded to the RX pin while sending a packet to TX will go out to the Mesh network.\n   * Maximum packet size of 240 bytes.\n   * Module is disabled by default can be turned on by setting SERIAL_MODULE_ENABLED = 1 in SerialPlugh.cpp.\n   * ENCODING: binary undefined\n   *\n   * @generated from enum value: SERIAL_APP = 64;\n   */\n  SERIAL_APP = 64,\n\n  /**\n   *\n   * STORE_FORWARD_APP (Work in Progress)\n   * Maintained by Jm Casler (MC Hamster) : jm@casler.org\n   * ENCODING: Protobuf\n   *\n   * @generated from enum value: STORE_FORWARD_APP = 65;\n   */\n  STORE_FORWARD_APP = 65,\n\n  /**\n   *\n   * Optional port for messages for the range test module.\n   * ENCODING: ASCII Plaintext\n   * NOTE: This portnum traffic is not sent to the public MQTT starting at firmware version 2.2.9\n   *\n   * @generated from enum value: RANGE_TEST_APP = 66;\n   */\n  RANGE_TEST_APP = 66,\n\n  /**\n   *\n   * Provides a format to send and receive telemetry data from the Meshtastic network.\n   * Maintained by Charles Crossan (crossan007) : crossan007@gmail.com\n   * ENCODING: Protobuf\n   *\n   * @generated from enum value: TELEMETRY_APP = 67;\n   */\n  TELEMETRY_APP = 67,\n\n  /**\n   *\n   * Experimental tools for estimating node position without a GPS\n   * Maintained by Github user a-f-G-U-C (a Meshtastic contributor)\n   * Project files at https://github.com/a-f-G-U-C/Meshtastic-ZPS\n   * ENCODING: arrays of int64 fields\n   *\n   * @generated from enum value: ZPS_APP = 68;\n   */\n  ZPS_APP = 68,\n\n  /**\n   *\n   * Used to let multiple instances of Linux native applications communicate\n   * as if they did using their LoRa chip.\n   * Maintained by GitHub user GUVWAF.\n   * Project files at https://github.com/GUVWAF/Meshtasticator\n   * ENCODING: Protobuf (?)\n   *\n   * @generated from enum value: SIMULATOR_APP = 69;\n   */\n  SIMULATOR_APP = 69,\n\n  /**\n   *\n   * Provides a traceroute functionality to show the route a packet towards\n   * a certain destination would take on the mesh. Contains a RouteDiscovery message as payload.\n   * ENCODING: Protobuf\n   *\n   * @generated from enum value: TRACEROUTE_APP = 70;\n   */\n  TRACEROUTE_APP = 70,\n\n  /**\n   *\n   * Aggregates edge info for the network by sending out a list of each node's neighbors\n   * ENCODING: Protobuf\n   *\n   * @generated from enum value: NEIGHBORINFO_APP = 71;\n   */\n  NEIGHBORINFO_APP = 71,\n\n  /**\n   *\n   * ATAK Plugin\n   * Portnum for payloads from the official Meshtastic ATAK plugin\n   *\n   * @generated from enum value: ATAK_PLUGIN = 72;\n   */\n  ATAK_PLUGIN = 72,\n\n  /**\n   *\n   * Provides unencrypted information about a node for consumption by a map via MQTT\n   *\n   * @generated from enum value: MAP_REPORT_APP = 73;\n   */\n  MAP_REPORT_APP = 73,\n\n  /**\n   *\n   * PowerStress based monitoring support (for automated power consumption testing)\n   *\n   * @generated from enum value: POWERSTRESS_APP = 74;\n   */\n  POWERSTRESS_APP = 74,\n\n  /**\n   *\n   * Private applications should use portnums >= 256.\n   * To simplify initial development and testing you can use \"PRIVATE_APP\"\n   * in your code without needing to rebuild protobuf files (via [regen-protos.sh](https://github.com/meshtastic/firmware/blob/master/bin/regen-protos.sh))\n   *\n   * @generated from enum value: PRIVATE_APP = 256;\n   */\n  PRIVATE_APP = 256,\n\n  /**\n   *\n   * ATAK Forwarder Module https://github.com/paulmandal/atak-forwarder\n   * ENCODING: libcotshrink\n   *\n   * @generated from enum value: ATAK_FORWARDER = 257;\n   */\n  ATAK_FORWARDER = 257,\n\n  /**\n   *\n   * Currently we limit port nums to no higher than this value\n   *\n   * @generated from enum value: MAX = 511;\n   */\n  MAX = 511,\n}\n\n/**\n * Describes the enum meshtastic.PortNum.\n */\nexport const PortNumSchema: GenEnum<PortNum> = /*@__PURE__*/\n  enumDesc(file_portnums, 0);\n\n","// @generated by protoc-gen-es v2.1.0 with parameter \"target=ts\"\n// @generated from file telemetry.proto (package meshtastic, syntax proto3)\n/* eslint-disable */\n\nimport type { GenEnum, GenFile, GenMessage } from \"@bufbuild/protobuf/codegenv1\";\nimport { enumDesc, fileDesc, messageDesc } from \"@bufbuild/protobuf/codegenv1\";\nimport type { Message } from \"npm:@bufbuild/protobuf@^2.1.0\";\n\n/**\n * Describes the file telemetry.proto.\n */\nexport const file_telemetry: GenFile = /*@__PURE__*/\n  fileDesc(\"Cg90ZWxlbWV0cnkucHJvdG8SCm1lc2h0YXN0aWMi8wEKDURldmljZU1ldHJpY3MSGgoNYmF0dGVyeV9sZXZlbBgBIAEoDUgAiAEBEhQKB3ZvbHRhZ2UYAiABKAJIAYgBARIgChNjaGFubmVsX3V0aWxpemF0aW9uGAMgASgCSAKIAQESGAoLYWlyX3V0aWxfdHgYBCABKAJIA4gBARIbCg51cHRpbWVfc2Vjb25kcxgFIAEoDUgEiAEBQhAKDl9iYXR0ZXJ5X2xldmVsQgoKCF92b2x0YWdlQhYKFF9jaGFubmVsX3V0aWxpemF0aW9uQg4KDF9haXJfdXRpbF90eEIRCg9fdXB0aW1lX3NlY29uZHMipAUKEkVudmlyb25tZW50TWV0cmljcxIYCgt0ZW1wZXJhdHVyZRgBIAEoAkgAiAEBEh4KEXJlbGF0aXZlX2h1bWlkaXR5GAIgASgCSAGIAQESIAoTYmFyb21ldHJpY19wcmVzc3VyZRgDIAEoAkgCiAEBEhsKDmdhc19yZXNpc3RhbmNlGAQgASgCSAOIAQESFAoHdm9sdGFnZRgFIAEoAkgEiAEBEhQKB2N1cnJlbnQYBiABKAJIBYgBARIQCgNpYXEYByABKA1IBogBARIVCghkaXN0YW5jZRgIIAEoAkgHiAEBEhAKA2x1eBgJIAEoAkgIiAEBEhYKCXdoaXRlX2x1eBgKIAEoAkgJiAEBEhMKBmlyX2x1eBgLIAEoAkgKiAEBEhMKBnV2X2x1eBgMIAEoAkgLiAEBEhsKDndpbmRfZGlyZWN0aW9uGA0gASgNSAyIAQESFwoKd2luZF9zcGVlZBgOIAEoAkgNiAEBEhMKBndlaWdodBgPIAEoAkgOiAEBEhYKCXdpbmRfZ3VzdBgQIAEoAkgPiAEBEhYKCXdpbmRfbHVsbBgRIAEoAkgQiAEBQg4KDF90ZW1wZXJhdHVyZUIUChJfcmVsYXRpdmVfaHVtaWRpdHlCFgoUX2Jhcm9tZXRyaWNfcHJlc3N1cmVCEQoPX2dhc19yZXNpc3RhbmNlQgoKCF92b2x0YWdlQgoKCF9jdXJyZW50QgYKBF9pYXFCCwoJX2Rpc3RhbmNlQgYKBF9sdXhCDAoKX3doaXRlX2x1eEIJCgdfaXJfbHV4QgkKB191dl9sdXhCEQoPX3dpbmRfZGlyZWN0aW9uQg0KC193aW5kX3NwZWVkQgkKB193ZWlnaHRCDAoKX3dpbmRfZ3VzdEIMCgpfd2luZF9sdWxsIooCCgxQb3dlck1ldHJpY3MSGAoLY2gxX3ZvbHRhZ2UYASABKAJIAIgBARIYCgtjaDFfY3VycmVudBgCIAEoAkgBiAEBEhgKC2NoMl92b2x0YWdlGAMgASgCSAKIAQESGAoLY2gyX2N1cnJlbnQYBCABKAJIA4gBARIYCgtjaDNfdm9sdGFnZRgFIAEoAkgEiAEBEhgKC2NoM19jdXJyZW50GAYgASgCSAWIAQFCDgoMX2NoMV92b2x0YWdlQg4KDF9jaDFfY3VycmVudEIOCgxfY2gyX3ZvbHRhZ2VCDgoMX2NoMl9jdXJyZW50Qg4KDF9jaDNfdm9sdGFnZUIOCgxfY2gzX2N1cnJlbnQihQUKEUFpclF1YWxpdHlNZXRyaWNzEhoKDXBtMTBfc3RhbmRhcmQYASABKA1IAIgBARIaCg1wbTI1X3N0YW5kYXJkGAIgASgNSAGIAQESGwoOcG0xMDBfc3RhbmRhcmQYAyABKA1IAogBARIfChJwbTEwX2Vudmlyb25tZW50YWwYBCABKA1IA4gBARIfChJwbTI1X2Vudmlyb25tZW50YWwYBSABKA1IBIgBARIgChNwbTEwMF9lbnZpcm9ubWVudGFsGAYgASgNSAWIAQESGwoOcGFydGljbGVzXzAzdW0YByABKA1IBogBARIbCg5wYXJ0aWNsZXNfMDV1bRgIIAEoDUgHiAEBEhsKDnBhcnRpY2xlc18xMHVtGAkgASgNSAiIAQESGwoOcGFydGljbGVzXzI1dW0YCiABKA1ICYgBARIbCg5wYXJ0aWNsZXNfNTB1bRgLIAEoDUgKiAEBEhwKD3BhcnRpY2xlc18xMDB1bRgMIAEoDUgLiAEBEhAKA2NvMhgNIAEoDUgMiAEBQhAKDl9wbTEwX3N0YW5kYXJkQhAKDl9wbTI1X3N0YW5kYXJkQhEKD19wbTEwMF9zdGFuZGFyZEIVChNfcG0xMF9lbnZpcm9ubWVudGFsQhUKE19wbTI1X2Vudmlyb25tZW50YWxCFgoUX3BtMTAwX2Vudmlyb25tZW50YWxCEQoPX3BhcnRpY2xlc18wM3VtQhEKD19wYXJ0aWNsZXNfMDV1bUIRCg9fcGFydGljbGVzXzEwdW1CEQoPX3BhcnRpY2xlc18yNXVtQhEKD19wYXJ0aWNsZXNfNTB1bUISChBfcGFydGljbGVzXzEwMHVtQgYKBF9jbzIinwIKCkxvY2FsU3RhdHMSFgoOdXB0aW1lX3NlY29uZHMYASABKA0SGwoTY2hhbm5lbF91dGlsaXphdGlvbhgCIAEoAhITCgthaXJfdXRpbF90eBgDIAEoAhIWCg5udW1fcGFja2V0c190eBgEIAEoDRIWCg5udW1fcGFja2V0c19yeBgFIAEoDRIaChJudW1fcGFja2V0c19yeF9iYWQYBiABKA0SGAoQbnVtX29ubGluZV9ub2RlcxgHIAEoDRIXCg9udW1fdG90YWxfbm9kZXMYCCABKA0SEwoLbnVtX3J4X2R1cGUYCSABKA0SFAoMbnVtX3R4X3JlbGF5GAogASgNEh0KFW51bV90eF9yZWxheV9jYW5jZWxlZBgLIAEoDSJ7Cg1IZWFsdGhNZXRyaWNzEhYKCWhlYXJ0X2JwbRgBIAEoDUgAiAEBEhEKBHNwTzIYAiABKA1IAYgBARIYCgt0ZW1wZXJhdHVyZRgDIAEoAkgCiAEBQgwKCl9oZWFydF9icG1CBwoFX3NwTzJCDgoMX3RlbXBlcmF0dXJlIu0CCglUZWxlbWV0cnkSDAoEdGltZRgBIAEoBxIzCg5kZXZpY2VfbWV0cmljcxgCIAEoCzIZLm1lc2h0YXN0aWMuRGV2aWNlTWV0cmljc0gAEj0KE2Vudmlyb25tZW50X21ldHJpY3MYAyABKAsyHi5tZXNodGFzdGljLkVudmlyb25tZW50TWV0cmljc0gAEjwKE2Fpcl9xdWFsaXR5X21ldHJpY3MYBCABKAsyHS5tZXNodGFzdGljLkFpclF1YWxpdHlNZXRyaWNzSAASMQoNcG93ZXJfbWV0cmljcxgFIAEoCzIYLm1lc2h0YXN0aWMuUG93ZXJNZXRyaWNzSAASLQoLbG9jYWxfc3RhdHMYBiABKAsyFi5tZXNodGFzdGljLkxvY2FsU3RhdHNIABIzCg5oZWFsdGhfbWV0cmljcxgHIAEoCzIZLm1lc2h0YXN0aWMuSGVhbHRoTWV0cmljc0gAQgkKB3ZhcmlhbnQiPgoNTmF1NzgwMkNvbmZpZxISCgp6ZXJvT2Zmc2V0GAEgASgFEhkKEWNhbGlicmF0aW9uRmFjdG9yGAIgASgCKswDChNUZWxlbWV0cnlTZW5zb3JUeXBlEhAKDFNFTlNPUl9VTlNFVBAAEgoKBkJNRTI4MBABEgoKBkJNRTY4MBACEgsKB01DUDk4MDgQAxIKCgZJTkEyNjAQBBIKCgZJTkEyMTkQBRIKCgZCTVAyODAQBhIJCgVTSFRDMxAHEgkKBUxQUzIyEAgSCwoHUU1DNjMxMBAJEgsKB1FNSTg2NTgQChIMCghRTUM1ODgzTBALEgkKBVNIVDMxEAwSDAoIUE1TQTAwM0kQDRILCgdJTkEzMjIxEA4SCgoGQk1QMDg1EA8SDAoIUkNXTDk2MjAQEBIJCgVTSFQ0WBAREgwKCFZFTUw3NzAwEBISDAoITUxYOTA2MzIQExILCgdPUFQzMDAxEBQSDAoITFRSMzkwVVYQFRIOCgpUU0wyNTkxMUZOEBYSCQoFQUhUMTAQFxIQCgxERlJPQk9UX0xBUksQGBILCgdOQVU3ODAyEBkSCgoGQk1QM1hYEBoSDAoISUNNMjA5NDgQGxIMCghNQVgxNzA0OBAcEhEKDUNVU1RPTV9TRU5TT1IQHRIMCghNQVgzMDEwMhAeEgwKCE1MWDkwNjE0EB8SCQoFU0NENFgQIEJkChNjb20uZ2Vla3N2aWxsZS5tZXNoQg9UZWxlbWV0cnlQcm90b3NaImdpdGh1Yi5jb20vbWVzaHRhc3RpYy9nby9nZW5lcmF0ZWSqAhRNZXNodGFzdGljLlByb3RvYnVmc7oCAGIGcHJvdG8z\");\n\n/**\n *\n * Key native device metrics such as battery level\n *\n * @generated from message meshtastic.DeviceMetrics\n */\nexport type DeviceMetrics = Message<\"meshtastic.DeviceMetrics\"> & {\n  /**\n   *\n   * 0-100 (>100 means powered)\n   *\n   * @generated from field: optional uint32 battery_level = 1;\n   */\n  batteryLevel?: number;\n\n  /**\n   *\n   * Voltage measured\n   *\n   * @generated from field: optional float voltage = 2;\n   */\n  voltage?: number;\n\n  /**\n   *\n   * Utilization for the current channel, including well formed TX, RX and malformed RX (aka noise).\n   *\n   * @generated from field: optional float channel_utilization = 3;\n   */\n  channelUtilization?: number;\n\n  /**\n   *\n   * Percent of airtime for transmission used within the last hour.\n   *\n   * @generated from field: optional float air_util_tx = 4;\n   */\n  airUtilTx?: number;\n\n  /**\n   *\n   * How long the device has been running since the last reboot (in seconds)\n   *\n   * @generated from field: optional uint32 uptime_seconds = 5;\n   */\n  uptimeSeconds?: number;\n};\n\n/**\n * Describes the message meshtastic.DeviceMetrics.\n * Use `create(DeviceMetricsSchema)` to create a new message.\n */\nexport const DeviceMetricsSchema: GenMessage<DeviceMetrics> = /*@__PURE__*/\n  messageDesc(file_telemetry, 0);\n\n/**\n *\n * Weather station or other environmental metrics\n *\n * @generated from message meshtastic.EnvironmentMetrics\n */\nexport type EnvironmentMetrics = Message<\"meshtastic.EnvironmentMetrics\"> & {\n  /**\n   *\n   * Temperature measured\n   *\n   * @generated from field: optional float temperature = 1;\n   */\n  temperature?: number;\n\n  /**\n   *\n   * Relative humidity percent measured\n   *\n   * @generated from field: optional float relative_humidity = 2;\n   */\n  relativeHumidity?: number;\n\n  /**\n   *\n   * Barometric pressure in hPA measured\n   *\n   * @generated from field: optional float barometric_pressure = 3;\n   */\n  barometricPressure?: number;\n\n  /**\n   *\n   * Gas resistance in MOhm measured\n   *\n   * @generated from field: optional float gas_resistance = 4;\n   */\n  gasResistance?: number;\n\n  /**\n   *\n   * Voltage measured (To be depreciated in favor of PowerMetrics in Meshtastic 3.x)\n   *\n   * @generated from field: optional float voltage = 5;\n   */\n  voltage?: number;\n\n  /**\n   *\n   * Current measured (To be depreciated in favor of PowerMetrics in Meshtastic 3.x)\n   *\n   * @generated from field: optional float current = 6;\n   */\n  current?: number;\n\n  /**\n   *\n   * relative scale IAQ value as measured by Bosch BME680 . value 0-500.\n   * Belongs to Air Quality but is not particle but VOC measurement. Other VOC values can also be put in here.\n   *\n   * @generated from field: optional uint32 iaq = 7;\n   */\n  iaq?: number;\n\n  /**\n   *\n   * RCWL9620 Doppler Radar Distance Sensor, used for water level detection. Float value in mm.\n   *\n   * @generated from field: optional float distance = 8;\n   */\n  distance?: number;\n\n  /**\n   *\n   * VEML7700 high accuracy ambient light(Lux) digital 16-bit resolution sensor.\n   *\n   * @generated from field: optional float lux = 9;\n   */\n  lux?: number;\n\n  /**\n   *\n   * VEML7700 high accuracy white light(irradiance) not calibrated digital 16-bit resolution sensor.\n   *\n   * @generated from field: optional float white_lux = 10;\n   */\n  whiteLux?: number;\n\n  /**\n   *\n   * Infrared lux\n   *\n   * @generated from field: optional float ir_lux = 11;\n   */\n  irLux?: number;\n\n  /**\n   *\n   * Ultraviolet lux\n   *\n   * @generated from field: optional float uv_lux = 12;\n   */\n  uvLux?: number;\n\n  /**\n   *\n   * Wind direction in degrees\n   * 0 degrees = North, 90 = East, etc...\n   *\n   * @generated from field: optional uint32 wind_direction = 13;\n   */\n  windDirection?: number;\n\n  /**\n   *\n   * Wind speed in m/s\n   *\n   * @generated from field: optional float wind_speed = 14;\n   */\n  windSpeed?: number;\n\n  /**\n   *\n   * Weight in KG\n   *\n   * @generated from field: optional float weight = 15;\n   */\n  weight?: number;\n\n  /**\n   *\n   * Wind gust in m/s\n   *\n   * @generated from field: optional float wind_gust = 16;\n   */\n  windGust?: number;\n\n  /**\n   *\n   * Wind lull in m/s\n   *\n   * @generated from field: optional float wind_lull = 17;\n   */\n  windLull?: number;\n};\n\n/**\n * Describes the message meshtastic.EnvironmentMetrics.\n * Use `create(EnvironmentMetricsSchema)` to create a new message.\n */\nexport const EnvironmentMetricsSchema: GenMessage<EnvironmentMetrics> = /*@__PURE__*/\n  messageDesc(file_telemetry, 1);\n\n/**\n *\n * Power Metrics (voltage / current / etc)\n *\n * @generated from message meshtastic.PowerMetrics\n */\nexport type PowerMetrics = Message<\"meshtastic.PowerMetrics\"> & {\n  /**\n   *\n   * Voltage (Ch1)\n   *\n   * @generated from field: optional float ch1_voltage = 1;\n   */\n  ch1Voltage?: number;\n\n  /**\n   *\n   * Current (Ch1)\n   *\n   * @generated from field: optional float ch1_current = 2;\n   */\n  ch1Current?: number;\n\n  /**\n   *\n   * Voltage (Ch2)\n   *\n   * @generated from field: optional float ch2_voltage = 3;\n   */\n  ch2Voltage?: number;\n\n  /**\n   *\n   * Current (Ch2)\n   *\n   * @generated from field: optional float ch2_current = 4;\n   */\n  ch2Current?: number;\n\n  /**\n   *\n   * Voltage (Ch3)\n   *\n   * @generated from field: optional float ch3_voltage = 5;\n   */\n  ch3Voltage?: number;\n\n  /**\n   *\n   * Current (Ch3)\n   *\n   * @generated from field: optional float ch3_current = 6;\n   */\n  ch3Current?: number;\n};\n\n/**\n * Describes the message meshtastic.PowerMetrics.\n * Use `create(PowerMetricsSchema)` to create a new message.\n */\nexport const PowerMetricsSchema: GenMessage<PowerMetrics> = /*@__PURE__*/\n  messageDesc(file_telemetry, 2);\n\n/**\n *\n * Air quality metrics\n *\n * @generated from message meshtastic.AirQualityMetrics\n */\nexport type AirQualityMetrics = Message<\"meshtastic.AirQualityMetrics\"> & {\n  /**\n   *\n   * Concentration Units Standard PM1.0\n   *\n   * @generated from field: optional uint32 pm10_standard = 1;\n   */\n  pm10Standard?: number;\n\n  /**\n   *\n   * Concentration Units Standard PM2.5\n   *\n   * @generated from field: optional uint32 pm25_standard = 2;\n   */\n  pm25Standard?: number;\n\n  /**\n   *\n   * Concentration Units Standard PM10.0\n   *\n   * @generated from field: optional uint32 pm100_standard = 3;\n   */\n  pm100Standard?: number;\n\n  /**\n   *\n   * Concentration Units Environmental PM1.0\n   *\n   * @generated from field: optional uint32 pm10_environmental = 4;\n   */\n  pm10Environmental?: number;\n\n  /**\n   *\n   * Concentration Units Environmental PM2.5\n   *\n   * @generated from field: optional uint32 pm25_environmental = 5;\n   */\n  pm25Environmental?: number;\n\n  /**\n   *\n   * Concentration Units Environmental PM10.0\n   *\n   * @generated from field: optional uint32 pm100_environmental = 6;\n   */\n  pm100Environmental?: number;\n\n  /**\n   *\n   * 0.3um Particle Count\n   *\n   * @generated from field: optional uint32 particles_03um = 7;\n   */\n  particles03um?: number;\n\n  /**\n   *\n   * 0.5um Particle Count\n   *\n   * @generated from field: optional uint32 particles_05um = 8;\n   */\n  particles05um?: number;\n\n  /**\n   *\n   * 1.0um Particle Count\n   *\n   * @generated from field: optional uint32 particles_10um = 9;\n   */\n  particles10um?: number;\n\n  /**\n   *\n   * 2.5um Particle Count\n   *\n   * @generated from field: optional uint32 particles_25um = 10;\n   */\n  particles25um?: number;\n\n  /**\n   *\n   * 5.0um Particle Count\n   *\n   * @generated from field: optional uint32 particles_50um = 11;\n   */\n  particles50um?: number;\n\n  /**\n   *\n   * 10.0um Particle Count\n   *\n   * @generated from field: optional uint32 particles_100um = 12;\n   */\n  particles100um?: number;\n\n  /**\n   *\n   * 10.0um Particle Count\n   *\n   * @generated from field: optional uint32 co2 = 13;\n   */\n  co2?: number;\n};\n\n/**\n * Describes the message meshtastic.AirQualityMetrics.\n * Use `create(AirQualityMetricsSchema)` to create a new message.\n */\nexport const AirQualityMetricsSchema: GenMessage<AirQualityMetrics> = /*@__PURE__*/\n  messageDesc(file_telemetry, 3);\n\n/**\n *\n * Local device mesh statistics\n *\n * @generated from message meshtastic.LocalStats\n */\nexport type LocalStats = Message<\"meshtastic.LocalStats\"> & {\n  /**\n   *\n   * How long the device has been running since the last reboot (in seconds)\n   *\n   * @generated from field: uint32 uptime_seconds = 1;\n   */\n  uptimeSeconds: number;\n\n  /**\n   *\n   * Utilization for the current channel, including well formed TX, RX and malformed RX (aka noise).\n   *\n   * @generated from field: float channel_utilization = 2;\n   */\n  channelUtilization: number;\n\n  /**\n   *\n   * Percent of airtime for transmission used within the last hour.\n   *\n   * @generated from field: float air_util_tx = 3;\n   */\n  airUtilTx: number;\n\n  /**\n   *\n   * Number of packets sent\n   *\n   * @generated from field: uint32 num_packets_tx = 4;\n   */\n  numPacketsTx: number;\n\n  /**\n   *\n   * Number of packets received (both good and bad)\n   *\n   * @generated from field: uint32 num_packets_rx = 5;\n   */\n  numPacketsRx: number;\n\n  /**\n   *\n   * Number of packets received that are malformed or violate the protocol\n   *\n   * @generated from field: uint32 num_packets_rx_bad = 6;\n   */\n  numPacketsRxBad: number;\n\n  /**\n   *\n   * Number of nodes online (in the past 2 hours)\n   *\n   * @generated from field: uint32 num_online_nodes = 7;\n   */\n  numOnlineNodes: number;\n\n  /**\n   *\n   * Number of nodes total\n   *\n   * @generated from field: uint32 num_total_nodes = 8;\n   */\n  numTotalNodes: number;\n\n  /**\n   *\n   * Number of received packets that were duplicates (due to multiple nodes relaying).\n   * If this number is high, there are nodes in the mesh relaying packets when it's unnecessary, for example due to the ROUTER/REPEATER role.\n   *\n   * @generated from field: uint32 num_rx_dupe = 9;\n   */\n  numRxDupe: number;\n\n  /**\n   *\n   * Number of packets we transmitted that were a relay for others (not originating from ourselves).\n   *\n   * @generated from field: uint32 num_tx_relay = 10;\n   */\n  numTxRelay: number;\n\n  /**\n   *\n   * Number of times we canceled a packet to be relayed, because someone else did it before us.\n   * This will always be zero for ROUTERs/REPEATERs. If this number is high, some other node(s) is/are relaying faster than you.\n   *\n   * @generated from field: uint32 num_tx_relay_canceled = 11;\n   */\n  numTxRelayCanceled: number;\n};\n\n/**\n * Describes the message meshtastic.LocalStats.\n * Use `create(LocalStatsSchema)` to create a new message.\n */\nexport const LocalStatsSchema: GenMessage<LocalStats> = /*@__PURE__*/\n  messageDesc(file_telemetry, 4);\n\n/**\n *\n * Health telemetry metrics\n *\n * @generated from message meshtastic.HealthMetrics\n */\nexport type HealthMetrics = Message<\"meshtastic.HealthMetrics\"> & {\n  /**\n   *\n   * Heart rate (beats per minute)\n   *\n   * @generated from field: optional uint32 heart_bpm = 1;\n   */\n  heartBpm?: number;\n\n  /**\n   *\n   * SpO2 (blood oxygen saturation) level\n   *\n   * @generated from field: optional uint32 spO2 = 2;\n   */\n  spO2?: number;\n\n  /**\n   *\n   * Body temperature in degrees Celsius\n   *\n   * @generated from field: optional float temperature = 3;\n   */\n  temperature?: number;\n};\n\n/**\n * Describes the message meshtastic.HealthMetrics.\n * Use `create(HealthMetricsSchema)` to create a new message.\n */\nexport const HealthMetricsSchema: GenMessage<HealthMetrics> = /*@__PURE__*/\n  messageDesc(file_telemetry, 5);\n\n/**\n *\n * Types of Measurements the telemetry module is equipped to handle\n *\n * @generated from message meshtastic.Telemetry\n */\nexport type Telemetry = Message<\"meshtastic.Telemetry\"> & {\n  /**\n   *\n   * Seconds since 1970 - or 0 for unknown/unset\n   *\n   * @generated from field: fixed32 time = 1;\n   */\n  time: number;\n\n  /**\n   * @generated from oneof meshtastic.Telemetry.variant\n   */\n  variant: {\n    /**\n     *\n     * Key native device metrics such as battery level\n     *\n     * @generated from field: meshtastic.DeviceMetrics device_metrics = 2;\n     */\n    value: DeviceMetrics;\n    case: \"deviceMetrics\";\n  } | {\n    /**\n     *\n     * Weather station or other environmental metrics\n     *\n     * @generated from field: meshtastic.EnvironmentMetrics environment_metrics = 3;\n     */\n    value: EnvironmentMetrics;\n    case: \"environmentMetrics\";\n  } | {\n    /**\n     *\n     * Air quality metrics\n     *\n     * @generated from field: meshtastic.AirQualityMetrics air_quality_metrics = 4;\n     */\n    value: AirQualityMetrics;\n    case: \"airQualityMetrics\";\n  } | {\n    /**\n     *\n     * Power Metrics\n     *\n     * @generated from field: meshtastic.PowerMetrics power_metrics = 5;\n     */\n    value: PowerMetrics;\n    case: \"powerMetrics\";\n  } | {\n    /**\n     *\n     * Local device mesh statistics\n     *\n     * @generated from field: meshtastic.LocalStats local_stats = 6;\n     */\n    value: LocalStats;\n    case: \"localStats\";\n  } | {\n    /**\n     *\n     * Health telemetry metrics\n     *\n     * @generated from field: meshtastic.HealthMetrics health_metrics = 7;\n     */\n    value: HealthMetrics;\n    case: \"healthMetrics\";\n  } | { case: undefined; value?: undefined };\n};\n\n/**\n * Describes the message meshtastic.Telemetry.\n * Use `create(TelemetrySchema)` to create a new message.\n */\nexport const TelemetrySchema: GenMessage<Telemetry> = /*@__PURE__*/\n  messageDesc(file_telemetry, 6);\n\n/**\n *\n * NAU7802 Telemetry configuration, for saving to flash\n *\n * @generated from message meshtastic.Nau7802Config\n */\nexport type Nau7802Config = Message<\"meshtastic.Nau7802Config\"> & {\n  /**\n   *\n   * The offset setting for the NAU7802\n   *\n   * @generated from field: int32 zeroOffset = 1;\n   */\n  zeroOffset: number;\n\n  /**\n   *\n   * The calibration factor for the NAU7802\n   *\n   * @generated from field: float calibrationFactor = 2;\n   */\n  calibrationFactor: number;\n};\n\n/**\n * Describes the message meshtastic.Nau7802Config.\n * Use `create(Nau7802ConfigSchema)` to create a new message.\n */\nexport const Nau7802ConfigSchema: GenMessage<Nau7802Config> = /*@__PURE__*/\n  messageDesc(file_telemetry, 7);\n\n/**\n *\n * Supported I2C Sensors for telemetry in Meshtastic\n *\n * @generated from enum meshtastic.TelemetrySensorType\n */\nexport enum TelemetrySensorType {\n  /**\n   *\n   * No external telemetry sensor explicitly set\n   *\n   * @generated from enum value: SENSOR_UNSET = 0;\n   */\n  SENSOR_UNSET = 0,\n\n  /**\n   *\n   * High accuracy temperature, pressure, humidity\n   *\n   * @generated from enum value: BME280 = 1;\n   */\n  BME280 = 1,\n\n  /**\n   *\n   * High accuracy temperature, pressure, humidity, and air resistance\n   *\n   * @generated from enum value: BME680 = 2;\n   */\n  BME680 = 2,\n\n  /**\n   *\n   * Very high accuracy temperature\n   *\n   * @generated from enum value: MCP9808 = 3;\n   */\n  MCP9808 = 3,\n\n  /**\n   *\n   * Moderate accuracy current and voltage\n   *\n   * @generated from enum value: INA260 = 4;\n   */\n  INA260 = 4,\n\n  /**\n   *\n   * Moderate accuracy current and voltage\n   *\n   * @generated from enum value: INA219 = 5;\n   */\n  INA219 = 5,\n\n  /**\n   *\n   * High accuracy temperature and pressure\n   *\n   * @generated from enum value: BMP280 = 6;\n   */\n  BMP280 = 6,\n\n  /**\n   *\n   * High accuracy temperature and humidity\n   *\n   * @generated from enum value: SHTC3 = 7;\n   */\n  SHTC3 = 7,\n\n  /**\n   *\n   * High accuracy pressure\n   *\n   * @generated from enum value: LPS22 = 8;\n   */\n  LPS22 = 8,\n\n  /**\n   *\n   * 3-Axis magnetic sensor\n   *\n   * @generated from enum value: QMC6310 = 9;\n   */\n  QMC6310 = 9,\n\n  /**\n   *\n   * 6-Axis inertial measurement sensor\n   *\n   * @generated from enum value: QMI8658 = 10;\n   */\n  QMI8658 = 10,\n\n  /**\n   *\n   * 3-Axis magnetic sensor\n   *\n   * @generated from enum value: QMC5883L = 11;\n   */\n  QMC5883L = 11,\n\n  /**\n   *\n   * High accuracy temperature and humidity\n   *\n   * @generated from enum value: SHT31 = 12;\n   */\n  SHT31 = 12,\n\n  /**\n   *\n   * PM2.5 air quality sensor\n   *\n   * @generated from enum value: PMSA003I = 13;\n   */\n  PMSA003I = 13,\n\n  /**\n   *\n   * INA3221 3 Channel Voltage / Current Sensor\n   *\n   * @generated from enum value: INA3221 = 14;\n   */\n  INA3221 = 14,\n\n  /**\n   *\n   * BMP085/BMP180 High accuracy temperature and pressure (older Version of BMP280)\n   *\n   * @generated from enum value: BMP085 = 15;\n   */\n  BMP085 = 15,\n\n  /**\n   *\n   * RCWL-9620 Doppler Radar Distance Sensor, used for water level detection\n   *\n   * @generated from enum value: RCWL9620 = 16;\n   */\n  RCWL9620 = 16,\n\n  /**\n   *\n   * Sensirion High accuracy temperature and humidity\n   *\n   * @generated from enum value: SHT4X = 17;\n   */\n  SHT4X = 17,\n\n  /**\n   *\n   * VEML7700 high accuracy ambient light(Lux) digital 16-bit resolution sensor.\n   *\n   * @generated from enum value: VEML7700 = 18;\n   */\n  VEML7700 = 18,\n\n  /**\n   *\n   * MLX90632 non-contact IR temperature sensor.\n   *\n   * @generated from enum value: MLX90632 = 19;\n   */\n  MLX90632 = 19,\n\n  /**\n   *\n   * TI OPT3001 Ambient Light Sensor\n   *\n   * @generated from enum value: OPT3001 = 20;\n   */\n  OPT3001 = 20,\n\n  /**\n   *\n   * Lite On LTR-390UV-01 UV Light Sensor\n   *\n   * @generated from enum value: LTR390UV = 21;\n   */\n  LTR390UV = 21,\n\n  /**\n   *\n   * AMS TSL25911FN RGB Light Sensor\n   *\n   * @generated from enum value: TSL25911FN = 22;\n   */\n  TSL25911FN = 22,\n\n  /**\n   *\n   * AHT10 Integrated temperature and humidity sensor\n   *\n   * @generated from enum value: AHT10 = 23;\n   */\n  AHT10 = 23,\n\n  /**\n   *\n   * DFRobot Lark Weather station (temperature, humidity, pressure, wind speed and direction) \n   *\n   * @generated from enum value: DFROBOT_LARK = 24;\n   */\n  DFROBOT_LARK = 24,\n\n  /**\n   *\n   * NAU7802 Scale Chip or compatible\n   *\n   * @generated from enum value: NAU7802 = 25;\n   */\n  NAU7802 = 25,\n\n  /**\n   *\n   * BMP3XX High accuracy temperature and pressure\n   *\n   * @generated from enum value: BMP3XX = 26;\n   */\n  BMP3XX = 26,\n\n  /**\n   *\n   * ICM-20948 9-Axis digital motion processor\n   *\n   * @generated from enum value: ICM20948 = 27;\n   */\n  ICM20948 = 27,\n\n  /**\n   *\n   * MAX17048 1S lipo battery sensor (voltage, state of charge, time to go)\n   *\n   * @generated from enum value: MAX17048 = 28;\n   */\n  MAX17048 = 28,\n\n  /**\n   *\n   * Custom I2C sensor implementation based on https://github.com/meshtastic/i2c-sensor\n   *\n   * @generated from enum value: CUSTOM_SENSOR = 29;\n   */\n  CUSTOM_SENSOR = 29,\n\n  /**\n   *\n   * MAX30102 Pulse Oximeter and Heart-Rate Sensor \n   *\n   * @generated from enum value: MAX30102 = 30;\n   */\n  MAX30102 = 30,\n\n  /**\n   *\n   * MLX90614 non-contact IR temperature sensor\n   *\n   * @generated from enum value: MLX90614 = 31;\n   */\n  MLX90614 = 31,\n\n  /**\n   *\n   * SCD40/SCD41 CO2, humidity, temperature sensor\n   *\n   * @generated from enum value: SCD4X = 32;\n   */\n  SCD4X = 32,\n}\n\n/**\n * Describes the enum meshtastic.TelemetrySensorType.\n */\nexport const TelemetrySensorTypeSchema: GenEnum<TelemetrySensorType> = /*@__PURE__*/\n  enumDesc(file_telemetry, 0);\n\n","// @generated by protoc-gen-es v2.1.0 with parameter \"target=ts\"\n// @generated from file xmodem.proto (package meshtastic, syntax proto3)\n/* eslint-disable */\n\nimport type { GenEnum, GenFile, GenMessage } from \"@bufbuild/protobuf/codegenv1\";\nimport { enumDesc, fileDesc, messageDesc } from \"@bufbuild/protobuf/codegenv1\";\nimport type { Message } from \"npm:@bufbuild/protobuf@^2.1.0\";\n\n/**\n * Describes the file xmodem.proto.\n */\nexport const file_xmodem: GenFile = /*@__PURE__*/\n  fileDesc(\"Cgx4bW9kZW0ucHJvdG8SCm1lc2h0YXN0aWMitgEKBlhNb2RlbRIrCgdjb250cm9sGAEgASgOMhoubWVzaHRhc3RpYy5YTW9kZW0uQ29udHJvbBILCgNzZXEYAiABKA0SDQoFY3JjMTYYAyABKA0SDgoGYnVmZmVyGAQgASgMIlMKB0NvbnRyb2wSBwoDTlVMEAASBwoDU09IEAESBwoDU1RYEAISBwoDRU9UEAQSBwoDQUNLEAYSBwoDTkFLEBUSBwoDQ0FOEBgSCQoFQ1RSTFoQGkJhChNjb20uZ2Vla3N2aWxsZS5tZXNoQgxYbW9kZW1Qcm90b3NaImdpdGh1Yi5jb20vbWVzaHRhc3RpYy9nby9nZW5lcmF0ZWSqAhRNZXNodGFzdGljLlByb3RvYnVmc7oCAGIGcHJvdG8z\");\n\n/**\n * @generated from message meshtastic.XModem\n */\nexport type XModem = Message<\"meshtastic.XModem\"> & {\n  /**\n   * @generated from field: meshtastic.XModem.Control control = 1;\n   */\n  control: XModem_Control;\n\n  /**\n   * @generated from field: uint32 seq = 2;\n   */\n  seq: number;\n\n  /**\n   * @generated from field: uint32 crc16 = 3;\n   */\n  crc16: number;\n\n  /**\n   * @generated from field: bytes buffer = 4;\n   */\n  buffer: Uint8Array;\n};\n\n/**\n * Describes the message meshtastic.XModem.\n * Use `create(XModemSchema)` to create a new message.\n */\nexport const XModemSchema: GenMessage<XModem> = /*@__PURE__*/\n  messageDesc(file_xmodem, 0);\n\n/**\n * @generated from enum meshtastic.XModem.Control\n */\nexport enum XModem_Control {\n  /**\n   * @generated from enum value: NUL = 0;\n   */\n  NUL = 0,\n\n  /**\n   * @generated from enum value: SOH = 1;\n   */\n  SOH = 1,\n\n  /**\n   * @generated from enum value: STX = 2;\n   */\n  STX = 2,\n\n  /**\n   * @generated from enum value: EOT = 4;\n   */\n  EOT = 4,\n\n  /**\n   * @generated from enum value: ACK = 6;\n   */\n  ACK = 6,\n\n  /**\n   * @generated from enum value: NAK = 21;\n   */\n  NAK = 21,\n\n  /**\n   * @generated from enum value: CAN = 24;\n   */\n  CAN = 24,\n\n  /**\n   * @generated from enum value: CTRLZ = 26;\n   */\n  CTRLZ = 26,\n}\n\n/**\n * Describes the enum meshtastic.XModem.Control.\n */\nexport const XModem_ControlSchema: GenEnum<XModem_Control> = /*@__PURE__*/\n  enumDesc(file_xmodem, 0, 0);\n\n","// @generated by protoc-gen-es v2.1.0 with parameter \"target=ts\"\n// @generated from file apponly.proto (package meshtastic, syntax proto3)\n/* eslint-disable */\n\nimport type { GenFile, GenMessage } from \"@bufbuild/protobuf/codegenv1\";\nimport { fileDesc, messageDesc } from \"@bufbuild/protobuf/codegenv1\";\nimport type { ChannelSettings } from \"./channel_pb.js\";\nimport { file_channel } from \"./channel_pb.js\";\nimport type { Config_LoRaConfig } from \"./config_pb.js\";\nimport { file_config } from \"./config_pb.js\";\nimport type { Message } from \"npm:@bufbuild/protobuf@^2.1.0\";\n\n/**\n * Describes the file apponly.proto.\n */\nexport const file_apponly: GenFile = /*@__PURE__*/\n  fileDesc(\"Cg1hcHBvbmx5LnByb3RvEgptZXNodGFzdGljIm8KCkNoYW5uZWxTZXQSLQoIc2V0dGluZ3MYASADKAsyGy5tZXNodGFzdGljLkNoYW5uZWxTZXR0aW5ncxIyCgtsb3JhX2NvbmZpZxgCIAEoCzIdLm1lc2h0YXN0aWMuQ29uZmlnLkxvUmFDb25maWdCYgoTY29tLmdlZWtzdmlsbGUubWVzaEINQXBwT25seVByb3Rvc1oiZ2l0aHViLmNvbS9tZXNodGFzdGljL2dvL2dlbmVyYXRlZKoCFE1lc2h0YXN0aWMuUHJvdG9idWZzugIAYgZwcm90bzM\", [file_channel, file_config]);\n\n/**\n *\n * This is the most compact possible representation for a set of channels.\n * It includes only one PRIMARY channel (which must be first) and\n * any SECONDARY channels.\n * No DISABLED channels are included.\n * This abstraction is used only on the the 'app side' of the world (ie python, javascript and android etc) to show a group of Channels as a (long) URL\n *\n * @generated from message meshtastic.ChannelSet\n */\nexport type ChannelSet = Message<\"meshtastic.ChannelSet\"> & {\n  /**\n   *\n   * Channel list with settings\n   *\n   * @generated from field: repeated meshtastic.ChannelSettings settings = 1;\n   */\n  settings: ChannelSettings[];\n\n  /**\n   *\n   * LoRa config\n   *\n   * @generated from field: meshtastic.Config.LoRaConfig lora_config = 2;\n   */\n  loraConfig?: Config_LoRaConfig;\n};\n\n/**\n * Describes the message meshtastic.ChannelSet.\n * Use `create(ChannelSetSchema)` to create a new message.\n */\nexport const ChannelSetSchema: GenMessage<ChannelSet> = /*@__PURE__*/\n  messageDesc(file_apponly, 0);\n\n","// @generated by protoc-gen-es v2.1.0 with parameter \"target=ts\"\n// @generated from file atak.proto (package meshtastic, syntax proto3)\n/* eslint-disable */\n\nimport type { GenEnum, GenFile, GenMessage } from \"@bufbuild/protobuf/codegenv1\";\nimport { enumDesc, fileDesc, messageDesc } from \"@bufbuild/protobuf/codegenv1\";\nimport type { Message } from \"npm:@bufbuild/protobuf@^2.1.0\";\n\n/**\n * Describes the file atak.proto.\n */\nexport const file_atak: GenFile = /*@__PURE__*/\n  fileDesc(\"CgphdGFrLnByb3RvEgptZXNodGFzdGljIvgBCglUQUtQYWNrZXQSFQoNaXNfY29tcHJlc3NlZBgBIAEoCBIkCgdjb250YWN0GAIgASgLMhMubWVzaHRhc3RpYy5Db250YWN0EiAKBWdyb3VwGAMgASgLMhEubWVzaHRhc3RpYy5Hcm91cBIiCgZzdGF0dXMYBCABKAsyEi5tZXNodGFzdGljLlN0YXR1cxIeCgNwbGkYBSABKAsyDy5tZXNodGFzdGljLlBMSUgAEiMKBGNoYXQYBiABKAsyEy5tZXNodGFzdGljLkdlb0NoYXRIABIQCgZkZXRhaWwYByABKAxIAEIRCg9wYXlsb2FkX3ZhcmlhbnQiXAoHR2VvQ2hhdBIPCgdtZXNzYWdlGAEgASgJEg8KAnRvGAIgASgJSACIAQESGAoLdG9fY2FsbHNpZ24YAyABKAlIAYgBAUIFCgNfdG9CDgoMX3RvX2NhbGxzaWduIk0KBUdyb3VwEiQKBHJvbGUYASABKA4yFi5tZXNodGFzdGljLk1lbWJlclJvbGUSHgoEdGVhbRgCIAEoDjIQLm1lc2h0YXN0aWMuVGVhbSIZCgZTdGF0dXMSDwoHYmF0dGVyeRgBIAEoDSI0CgdDb250YWN0EhAKCGNhbGxzaWduGAEgASgJEhcKD2RldmljZV9jYWxsc2lnbhgCIAEoCSJfCgNQTEkSEgoKbGF0aXR1ZGVfaRgBIAEoDxITCgtsb25naXR1ZGVfaRgCIAEoDxIQCghhbHRpdHVkZRgDIAEoBRINCgVzcGVlZBgEIAEoDRIOCgZjb3Vyc2UYBSABKA0qwAEKBFRlYW0SFAoQVW5zcGVjaWZlZF9Db2xvchAAEgkKBVdoaXRlEAESCgoGWWVsbG93EAISCgoGT3JhbmdlEAMSCwoHTWFnZW50YRAEEgcKA1JlZBAFEgoKBk1hcm9vbhAGEgoKBlB1cnBsZRAHEg0KCURhcmtfQmx1ZRAIEggKBEJsdWUQCRIICgRDeWFuEAoSCAoEVGVhbBALEgkKBUdyZWVuEAwSDgoKRGFya19HcmVlbhANEgkKBUJyb3duEA4qfwoKTWVtYmVyUm9sZRIOCgpVbnNwZWNpZmVkEAASDgoKVGVhbU1lbWJlchABEgwKCFRlYW1MZWFkEAISBgoCSFEQAxIKCgZTbmlwZXIQBBIJCgVNZWRpYxAFEhMKD0ZvcndhcmRPYnNlcnZlchAGEgcKA1JUTxAHEgYKAks5EAhCXwoTY29tLmdlZWtzdmlsbGUubWVzaEIKQVRBS1Byb3Rvc1oiZ2l0aHViLmNvbS9tZXNodGFzdGljL2dvL2dlbmVyYXRlZKoCFE1lc2h0YXN0aWMuUHJvdG9idWZzugIAYgZwcm90bzM\");\n\n/**\n *\n * Packets for the official ATAK Plugin\n *\n * @generated from message meshtastic.TAKPacket\n */\nexport type TAKPacket = Message<\"meshtastic.TAKPacket\"> & {\n  /**\n   *\n   * Are the payloads strings compressed for LoRA transport?\n   *\n   * @generated from field: bool is_compressed = 1;\n   */\n  isCompressed: boolean;\n\n  /**\n   *\n   * The contact / callsign for ATAK user\n   *\n   * @generated from field: meshtastic.Contact contact = 2;\n   */\n  contact?: Contact;\n\n  /**\n   *\n   * The group for ATAK user\n   *\n   * @generated from field: meshtastic.Group group = 3;\n   */\n  group?: Group;\n\n  /**\n   *\n   * The status of the ATAK EUD\n   *\n   * @generated from field: meshtastic.Status status = 4;\n   */\n  status?: Status;\n\n  /**\n   *\n   * The payload of the packet\n   *\n   * @generated from oneof meshtastic.TAKPacket.payload_variant\n   */\n  payloadVariant: {\n    /**\n     *\n     * TAK position report\n     *\n     * @generated from field: meshtastic.PLI pli = 5;\n     */\n    value: PLI;\n    case: \"pli\";\n  } | {\n    /**\n     *\n     * ATAK GeoChat message\n     *\n     * @generated from field: meshtastic.GeoChat chat = 6;\n     */\n    value: GeoChat;\n    case: \"chat\";\n  } | {\n    /**\n     *\n     * Generic CoT detail XML\n     * May be compressed / truncated by the sender (EUD)\n     *\n     * @generated from field: bytes detail = 7;\n     */\n    value: Uint8Array;\n    case: \"detail\";\n  } | { case: undefined; value?: undefined };\n};\n\n/**\n * Describes the message meshtastic.TAKPacket.\n * Use `create(TAKPacketSchema)` to create a new message.\n */\nexport const TAKPacketSchema: GenMessage<TAKPacket> = /*@__PURE__*/\n  messageDesc(file_atak, 0);\n\n/**\n *\n * ATAK GeoChat message\n *\n * @generated from message meshtastic.GeoChat\n */\nexport type GeoChat = Message<\"meshtastic.GeoChat\"> & {\n  /**\n   *\n   * The text message\n   *\n   * @generated from field: string message = 1;\n   */\n  message: string;\n\n  /**\n   *\n   * Uid recipient of the message\n   *\n   * @generated from field: optional string to = 2;\n   */\n  to?: string;\n\n  /**\n   *\n   * Callsign of the recipient for the message\n   *\n   * @generated from field: optional string to_callsign = 3;\n   */\n  toCallsign?: string;\n};\n\n/**\n * Describes the message meshtastic.GeoChat.\n * Use `create(GeoChatSchema)` to create a new message.\n */\nexport const GeoChatSchema: GenMessage<GeoChat> = /*@__PURE__*/\n  messageDesc(file_atak, 1);\n\n/**\n *\n * ATAK Group\n * <__group role='Team Member' name='Cyan'/>\n *\n * @generated from message meshtastic.Group\n */\nexport type Group = Message<\"meshtastic.Group\"> & {\n  /**\n   *\n   * Role of the group member\n   *\n   * @generated from field: meshtastic.MemberRole role = 1;\n   */\n  role: MemberRole;\n\n  /**\n   *\n   * Team (color)\n   * Default Cyan\n   *\n   * @generated from field: meshtastic.Team team = 2;\n   */\n  team: Team;\n};\n\n/**\n * Describes the message meshtastic.Group.\n * Use `create(GroupSchema)` to create a new message.\n */\nexport const GroupSchema: GenMessage<Group> = /*@__PURE__*/\n  messageDesc(file_atak, 2);\n\n/**\n *\n * ATAK EUD Status\n * <status battery='100' />\n *\n * @generated from message meshtastic.Status\n */\nexport type Status = Message<\"meshtastic.Status\"> & {\n  /**\n   *\n   * Battery level\n   *\n   * @generated from field: uint32 battery = 1;\n   */\n  battery: number;\n};\n\n/**\n * Describes the message meshtastic.Status.\n * Use `create(StatusSchema)` to create a new message.\n */\nexport const StatusSchema: GenMessage<Status> = /*@__PURE__*/\n  messageDesc(file_atak, 3);\n\n/**\n *\n * ATAK Contact\n * <contact endpoint='0.0.0.0:4242:tcp' phone='+12345678' callsign='FALKE'/>\n *\n * @generated from message meshtastic.Contact\n */\nexport type Contact = Message<\"meshtastic.Contact\"> & {\n  /**\n   *\n   * Callsign\n   *\n   * @generated from field: string callsign = 1;\n   */\n  callsign: string;\n\n  /**\n   *\n   * Device callsign\n   *\n   *\n   * IP address of endpoint in integer form (0.0.0.0 default)\n   *\n   * @generated from field: string device_callsign = 2;\n   */\n  deviceCallsign: string;\n};\n\n/**\n * Describes the message meshtastic.Contact.\n * Use `create(ContactSchema)` to create a new message.\n */\nexport const ContactSchema: GenMessage<Contact> = /*@__PURE__*/\n  messageDesc(file_atak, 4);\n\n/**\n *\n * Position Location Information from ATAK\n *\n * @generated from message meshtastic.PLI\n */\nexport type PLI = Message<\"meshtastic.PLI\"> & {\n  /**\n   *\n   * The new preferred location encoding, multiply by 1e-7 to get degrees\n   * in floating point\n   *\n   * @generated from field: sfixed32 latitude_i = 1;\n   */\n  latitudeI: number;\n\n  /**\n   *\n   * The new preferred location encoding, multiply by 1e-7 to get degrees\n   * in floating point\n   *\n   * @generated from field: sfixed32 longitude_i = 2;\n   */\n  longitudeI: number;\n\n  /**\n   *\n   * Altitude (ATAK prefers HAE)\n   *\n   * @generated from field: int32 altitude = 3;\n   */\n  altitude: number;\n\n  /**\n   *\n   * Speed\n   *\n   * @generated from field: uint32 speed = 4;\n   */\n  speed: number;\n\n  /**\n   *\n   * Course in degrees\n   *\n   * @generated from field: uint32 course = 5;\n   */\n  course: number;\n};\n\n/**\n * Describes the message meshtastic.PLI.\n * Use `create(PLISchema)` to create a new message.\n */\nexport const PLISchema: GenMessage<PLI> = /*@__PURE__*/\n  messageDesc(file_atak, 5);\n\n/**\n * @generated from enum meshtastic.Team\n */\nexport enum Team {\n  /**\n   *\n   * Unspecifed\n   *\n   * @generated from enum value: Unspecifed_Color = 0;\n   */\n  Unspecifed_Color = 0,\n\n  /**\n   *\n   * White\n   *\n   * @generated from enum value: White = 1;\n   */\n  White = 1,\n\n  /**\n   *\n   * Yellow\n   *\n   * @generated from enum value: Yellow = 2;\n   */\n  Yellow = 2,\n\n  /**\n   *\n   * Orange\n   *\n   * @generated from enum value: Orange = 3;\n   */\n  Orange = 3,\n\n  /**\n   *\n   * Magenta\n   *\n   * @generated from enum value: Magenta = 4;\n   */\n  Magenta = 4,\n\n  /**\n   *\n   * Red\n   *\n   * @generated from enum value: Red = 5;\n   */\n  Red = 5,\n\n  /**\n   *\n   * Maroon\n   *\n   * @generated from enum value: Maroon = 6;\n   */\n  Maroon = 6,\n\n  /**\n   *\n   * Purple\n   *\n   * @generated from enum value: Purple = 7;\n   */\n  Purple = 7,\n\n  /**\n   *\n   * Dark Blue\n   *\n   * @generated from enum value: Dark_Blue = 8;\n   */\n  Dark_Blue = 8,\n\n  /**\n   *\n   * Blue\n   *\n   * @generated from enum value: Blue = 9;\n   */\n  Blue = 9,\n\n  /**\n   *\n   * Cyan\n   *\n   * @generated from enum value: Cyan = 10;\n   */\n  Cyan = 10,\n\n  /**\n   *\n   * Teal\n   *\n   * @generated from enum value: Teal = 11;\n   */\n  Teal = 11,\n\n  /**\n   *\n   * Green\n   *\n   * @generated from enum value: Green = 12;\n   */\n  Green = 12,\n\n  /**\n   *\n   * Dark Green\n   *\n   * @generated from enum value: Dark_Green = 13;\n   */\n  Dark_Green = 13,\n\n  /**\n   *\n   * Brown\n   *\n   * @generated from enum value: Brown = 14;\n   */\n  Brown = 14,\n}\n\n/**\n * Describes the enum meshtastic.Team.\n */\nexport const TeamSchema: GenEnum<Team> = /*@__PURE__*/\n  enumDesc(file_atak, 0);\n\n/**\n *\n * Role of the group member\n *\n * @generated from enum meshtastic.MemberRole\n */\nexport enum MemberRole {\n  /**\n   *\n   * Unspecifed\n   *\n   * @generated from enum value: Unspecifed = 0;\n   */\n  Unspecifed = 0,\n\n  /**\n   *\n   * Team Member\n   *\n   * @generated from enum value: TeamMember = 1;\n   */\n  TeamMember = 1,\n\n  /**\n   *\n   * Team Lead\n   *\n   * @generated from enum value: TeamLead = 2;\n   */\n  TeamLead = 2,\n\n  /**\n   *\n   * Headquarters\n   *\n   * @generated from enum value: HQ = 3;\n   */\n  HQ = 3,\n\n  /**\n   *\n   * Airsoft enthusiast\n   *\n   * @generated from enum value: Sniper = 4;\n   */\n  Sniper = 4,\n\n  /**\n   *\n   * Medic\n   *\n   * @generated from enum value: Medic = 5;\n   */\n  Medic = 5,\n\n  /**\n   *\n   * ForwardObserver\n   *\n   * @generated from enum value: ForwardObserver = 6;\n   */\n  ForwardObserver = 6,\n\n  /**\n   *\n   * Radio Telephone Operator\n   *\n   * @generated from enum value: RTO = 7;\n   */\n  RTO = 7,\n\n  /**\n   *\n   * Doggo\n   *\n   * @generated from enum value: K9 = 8;\n   */\n  K9 = 8,\n}\n\n/**\n * Describes the enum meshtastic.MemberRole.\n */\nexport const MemberRoleSchema: GenEnum<MemberRole> = /*@__PURE__*/\n  enumDesc(file_atak, 1);\n\n","// @generated by protoc-gen-es v2.1.0 with parameter \"target=ts\"\n// @generated from file cannedmessages.proto (package meshtastic, syntax proto3)\n/* eslint-disable */\n\nimport type { GenFile, GenMessage } from \"@bufbuild/protobuf/codegenv1\";\nimport { fileDesc, messageDesc } from \"@bufbuild/protobuf/codegenv1\";\nimport type { Message } from \"npm:@bufbuild/protobuf@^2.1.0\";\n\n/**\n * Describes the file cannedmessages.proto.\n */\nexport const file_cannedmessages: GenFile = /*@__PURE__*/\n  fileDesc(\"ChRjYW5uZWRtZXNzYWdlcy5wcm90bxIKbWVzaHRhc3RpYyItChlDYW5uZWRNZXNzYWdlTW9kdWxlQ29uZmlnEhAKCG1lc3NhZ2VzGAEgASgJQm4KE2NvbS5nZWVrc3ZpbGxlLm1lc2hCGUNhbm5lZE1lc3NhZ2VDb25maWdQcm90b3NaImdpdGh1Yi5jb20vbWVzaHRhc3RpYy9nby9nZW5lcmF0ZWSqAhRNZXNodGFzdGljLlByb3RvYnVmc7oCAGIGcHJvdG8z\");\n\n/**\n *\n * Canned message module configuration.\n *\n * @generated from message meshtastic.CannedMessageModuleConfig\n */\nexport type CannedMessageModuleConfig = Message<\"meshtastic.CannedMessageModuleConfig\"> & {\n  /**\n   *\n   * Predefined messages for canned message module separated by '|' characters.\n   *\n   * @generated from field: string messages = 1;\n   */\n  messages: string;\n};\n\n/**\n * Describes the message meshtastic.CannedMessageModuleConfig.\n * Use `create(CannedMessageModuleConfigSchema)` to create a new message.\n */\nexport const CannedMessageModuleConfigSchema: GenMessage<CannedMessageModuleConfig> = /*@__PURE__*/\n  messageDesc(file_cannedmessages, 0);\n\n","// @generated by protoc-gen-es v2.1.0 with parameter \"target=ts\"\n// @generated from file clientonly.proto (package meshtastic, syntax proto3)\n/* eslint-disable */\n\nimport type { GenFile, GenMessage } from \"@bufbuild/protobuf/codegenv1\";\nimport { fileDesc, messageDesc } from \"@bufbuild/protobuf/codegenv1\";\nimport type { LocalConfig, LocalModuleConfig } from \"./localonly_pb.js\";\nimport { file_localonly } from \"./localonly_pb.js\";\nimport type { Position } from \"./mesh_pb.js\";\nimport { file_mesh } from \"./mesh_pb.js\";\nimport type { Message } from \"npm:@bufbuild/protobuf@^2.1.0\";\n\n/**\n * Describes the file clientonly.proto.\n */\nexport const file_clientonly: GenFile = /*@__PURE__*/\n  fileDesc(\"ChBjbGllbnRvbmx5LnByb3RvEgptZXNodGFzdGljIqkDCg1EZXZpY2VQcm9maWxlEhYKCWxvbmdfbmFtZRgBIAEoCUgAiAEBEhcKCnNob3J0X25hbWUYAiABKAlIAYgBARIYCgtjaGFubmVsX3VybBgDIAEoCUgCiAEBEiwKBmNvbmZpZxgEIAEoCzIXLm1lc2h0YXN0aWMuTG9jYWxDb25maWdIA4gBARI5Cg1tb2R1bGVfY29uZmlnGAUgASgLMh0ubWVzaHRhc3RpYy5Mb2NhbE1vZHVsZUNvbmZpZ0gEiAEBEjEKDmZpeGVkX3Bvc2l0aW9uGAYgASgLMhQubWVzaHRhc3RpYy5Qb3NpdGlvbkgFiAEBEhUKCHJpbmd0b25lGAcgASgJSAaIAQESHAoPY2FubmVkX21lc3NhZ2VzGAggASgJSAeIAQFCDAoKX2xvbmdfbmFtZUINCgtfc2hvcnRfbmFtZUIOCgxfY2hhbm5lbF91cmxCCQoHX2NvbmZpZ0IQCg5fbW9kdWxlX2NvbmZpZ0IRCg9fZml4ZWRfcG9zaXRpb25CCwoJX3Jpbmd0b25lQhIKEF9jYW5uZWRfbWVzc2FnZXNCZQoTY29tLmdlZWtzdmlsbGUubWVzaEIQQ2xpZW50T25seVByb3Rvc1oiZ2l0aHViLmNvbS9tZXNodGFzdGljL2dvL2dlbmVyYXRlZKoCFE1lc2h0YXN0aWMuUHJvdG9idWZzugIAYgZwcm90bzM\", [file_localonly, file_mesh]);\n\n/**\n *\n * This abstraction is used to contain any configuration for provisioning a node on any client.\n * It is useful for importing and exporting configurations.\n *\n * @generated from message meshtastic.DeviceProfile\n */\nexport type DeviceProfile = Message<\"meshtastic.DeviceProfile\"> & {\n  /**\n   *\n   * Long name for the node\n   *\n   * @generated from field: optional string long_name = 1;\n   */\n  longName?: string;\n\n  /**\n   *\n   * Short name of the node\n   *\n   * @generated from field: optional string short_name = 2;\n   */\n  shortName?: string;\n\n  /**\n   *\n   * The url of the channels from our node\n   *\n   * @generated from field: optional string channel_url = 3;\n   */\n  channelUrl?: string;\n\n  /**\n   *\n   * The Config of the node\n   *\n   * @generated from field: optional meshtastic.LocalConfig config = 4;\n   */\n  config?: LocalConfig;\n\n  /**\n   *\n   * The ModuleConfig of the node\n   *\n   * @generated from field: optional meshtastic.LocalModuleConfig module_config = 5;\n   */\n  moduleConfig?: LocalModuleConfig;\n\n  /**\n   *\n   * Fixed position data\n   *\n   * @generated from field: optional meshtastic.Position fixed_position = 6;\n   */\n  fixedPosition?: Position;\n\n  /**\n   *\n   * Ringtone for ExternalNotification\n   *\n   * @generated from field: optional string ringtone = 7;\n   */\n  ringtone?: string;\n\n  /**\n   *\n   * Predefined messages for CannedMessage\n   *\n   * @generated from field: optional string canned_messages = 8;\n   */\n  cannedMessages?: string;\n};\n\n/**\n * Describes the message meshtastic.DeviceProfile.\n * Use `create(DeviceProfileSchema)` to create a new message.\n */\nexport const DeviceProfileSchema: GenMessage<DeviceProfile> = /*@__PURE__*/\n  messageDesc(file_clientonly, 0);\n\n","// @generated by protoc-gen-es v2.1.0 with parameter \"target=ts\"\n// @generated from file localonly.proto (package meshtastic, syntax proto3)\n/* eslint-disable */\n\nimport type { GenFile, GenMessage } from \"@bufbuild/protobuf/codegenv1\";\nimport { fileDesc, messageDesc } from \"@bufbuild/protobuf/codegenv1\";\nimport type { Config_BluetoothConfig, Config_DeviceConfig, Config_DisplayConfig, Config_LoRaConfig, Config_NetworkConfig, Config_PositionConfig, Config_PowerConfig, Config_SecurityConfig } from \"./config_pb.js\";\nimport { file_config } from \"./config_pb.js\";\nimport type { ModuleConfig_AmbientLightingConfig, ModuleConfig_AudioConfig, ModuleConfig_CannedMessageConfig, ModuleConfig_DetectionSensorConfig, ModuleConfig_ExternalNotificationConfig, ModuleConfig_MQTTConfig, ModuleConfig_NeighborInfoConfig, ModuleConfig_PaxcounterConfig, ModuleConfig_RangeTestConfig, ModuleConfig_RemoteHardwareConfig, ModuleConfig_SerialConfig, ModuleConfig_StoreForwardConfig, ModuleConfig_TelemetryConfig } from \"./module_config_pb.js\";\nimport { file_module_config } from \"./module_config_pb.js\";\nimport type { Message } from \"npm:@bufbuild/protobuf@^2.1.0\";\n\n/**\n * Describes the file localonly.proto.\n */\nexport const file_localonly: GenFile = /*@__PURE__*/\n  fileDesc(\"Cg9sb2NhbG9ubHkucHJvdG8SCm1lc2h0YXN0aWMisgMKC0xvY2FsQ29uZmlnEi8KBmRldmljZRgBIAEoCzIfLm1lc2h0YXN0aWMuQ29uZmlnLkRldmljZUNvbmZpZxIzCghwb3NpdGlvbhgCIAEoCzIhLm1lc2h0YXN0aWMuQ29uZmlnLlBvc2l0aW9uQ29uZmlnEi0KBXBvd2VyGAMgASgLMh4ubWVzaHRhc3RpYy5Db25maWcuUG93ZXJDb25maWcSMQoHbmV0d29yaxgEIAEoCzIgLm1lc2h0YXN0aWMuQ29uZmlnLk5ldHdvcmtDb25maWcSMQoHZGlzcGxheRgFIAEoCzIgLm1lc2h0YXN0aWMuQ29uZmlnLkRpc3BsYXlDb25maWcSKwoEbG9yYRgGIAEoCzIdLm1lc2h0YXN0aWMuQ29uZmlnLkxvUmFDb25maWcSNQoJYmx1ZXRvb3RoGAcgASgLMiIubWVzaHRhc3RpYy5Db25maWcuQmx1ZXRvb3RoQ29uZmlnEg8KB3ZlcnNpb24YCCABKA0SMwoIc2VjdXJpdHkYCSABKAsyIS5tZXNodGFzdGljLkNvbmZpZy5TZWN1cml0eUNvbmZpZyL7BgoRTG9jYWxNb2R1bGVDb25maWcSMQoEbXF0dBgBIAEoCzIjLm1lc2h0YXN0aWMuTW9kdWxlQ29uZmlnLk1RVFRDb25maWcSNQoGc2VyaWFsGAIgASgLMiUubWVzaHRhc3RpYy5Nb2R1bGVDb25maWcuU2VyaWFsQ29uZmlnElIKFWV4dGVybmFsX25vdGlmaWNhdGlvbhgDIAEoCzIzLm1lc2h0YXN0aWMuTW9kdWxlQ29uZmlnLkV4dGVybmFsTm90aWZpY2F0aW9uQ29uZmlnEkIKDXN0b3JlX2ZvcndhcmQYBCABKAsyKy5tZXNodGFzdGljLk1vZHVsZUNvbmZpZy5TdG9yZUZvcndhcmRDb25maWcSPAoKcmFuZ2VfdGVzdBgFIAEoCzIoLm1lc2h0YXN0aWMuTW9kdWxlQ29uZmlnLlJhbmdlVGVzdENvbmZpZxI7Cgl0ZWxlbWV0cnkYBiABKAsyKC5tZXNodGFzdGljLk1vZHVsZUNvbmZpZy5UZWxlbWV0cnlDb25maWcSRAoOY2FubmVkX21lc3NhZ2UYByABKAsyLC5tZXNodGFzdGljLk1vZHVsZUNvbmZpZy5DYW5uZWRNZXNzYWdlQ29uZmlnEjMKBWF1ZGlvGAkgASgLMiQubWVzaHRhc3RpYy5Nb2R1bGVDb25maWcuQXVkaW9Db25maWcSRgoPcmVtb3RlX2hhcmR3YXJlGAogASgLMi0ubWVzaHRhc3RpYy5Nb2R1bGVDb25maWcuUmVtb3RlSGFyZHdhcmVDb25maWcSQgoNbmVpZ2hib3JfaW5mbxgLIAEoCzIrLm1lc2h0YXN0aWMuTW9kdWxlQ29uZmlnLk5laWdoYm9ySW5mb0NvbmZpZxJIChBhbWJpZW50X2xpZ2h0aW5nGAwgASgLMi4ubWVzaHRhc3RpYy5Nb2R1bGVDb25maWcuQW1iaWVudExpZ2h0aW5nQ29uZmlnEkgKEGRldGVjdGlvbl9zZW5zb3IYDSABKAsyLi5tZXNodGFzdGljLk1vZHVsZUNvbmZpZy5EZXRlY3Rpb25TZW5zb3JDb25maWcSPQoKcGF4Y291bnRlchgOIAEoCzIpLm1lc2h0YXN0aWMuTW9kdWxlQ29uZmlnLlBheGNvdW50ZXJDb25maWcSDwoHdmVyc2lvbhgIIAEoDUJkChNjb20uZ2Vla3N2aWxsZS5tZXNoQg9Mb2NhbE9ubHlQcm90b3NaImdpdGh1Yi5jb20vbWVzaHRhc3RpYy9nby9nZW5lcmF0ZWSqAhRNZXNodGFzdGljLlByb3RvYnVmc7oCAGIGcHJvdG8z\", [file_config, file_module_config]);\n\n/**\n * @generated from message meshtastic.LocalConfig\n */\nexport type LocalConfig = Message<\"meshtastic.LocalConfig\"> & {\n  /**\n   *\n   * The part of the config that is specific to the Device\n   *\n   * @generated from field: meshtastic.Config.DeviceConfig device = 1;\n   */\n  device?: Config_DeviceConfig;\n\n  /**\n   *\n   * The part of the config that is specific to the GPS Position\n   *\n   * @generated from field: meshtastic.Config.PositionConfig position = 2;\n   */\n  position?: Config_PositionConfig;\n\n  /**\n   *\n   * The part of the config that is specific to the Power settings\n   *\n   * @generated from field: meshtastic.Config.PowerConfig power = 3;\n   */\n  power?: Config_PowerConfig;\n\n  /**\n   *\n   * The part of the config that is specific to the Wifi Settings\n   *\n   * @generated from field: meshtastic.Config.NetworkConfig network = 4;\n   */\n  network?: Config_NetworkConfig;\n\n  /**\n   *\n   * The part of the config that is specific to the Display\n   *\n   * @generated from field: meshtastic.Config.DisplayConfig display = 5;\n   */\n  display?: Config_DisplayConfig;\n\n  /**\n   *\n   * The part of the config that is specific to the Lora Radio\n   *\n   * @generated from field: meshtastic.Config.LoRaConfig lora = 6;\n   */\n  lora?: Config_LoRaConfig;\n\n  /**\n   *\n   * The part of the config that is specific to the Bluetooth settings\n   *\n   * @generated from field: meshtastic.Config.BluetoothConfig bluetooth = 7;\n   */\n  bluetooth?: Config_BluetoothConfig;\n\n  /**\n   *\n   * A version integer used to invalidate old save files when we make\n   * incompatible changes This integer is set at build time and is private to\n   * NodeDB.cpp in the device code.\n   *\n   * @generated from field: uint32 version = 8;\n   */\n  version: number;\n\n  /**\n   *\n   * The part of the config that is specific to Security settings\n   *\n   * @generated from field: meshtastic.Config.SecurityConfig security = 9;\n   */\n  security?: Config_SecurityConfig;\n};\n\n/**\n * Describes the message meshtastic.LocalConfig.\n * Use `create(LocalConfigSchema)` to create a new message.\n */\nexport const LocalConfigSchema: GenMessage<LocalConfig> = /*@__PURE__*/\n  messageDesc(file_localonly, 0);\n\n/**\n * @generated from message meshtastic.LocalModuleConfig\n */\nexport type LocalModuleConfig = Message<\"meshtastic.LocalModuleConfig\"> & {\n  /**\n   *\n   * The part of the config that is specific to the MQTT module\n   *\n   * @generated from field: meshtastic.ModuleConfig.MQTTConfig mqtt = 1;\n   */\n  mqtt?: ModuleConfig_MQTTConfig;\n\n  /**\n   *\n   * The part of the config that is specific to the Serial module\n   *\n   * @generated from field: meshtastic.ModuleConfig.SerialConfig serial = 2;\n   */\n  serial?: ModuleConfig_SerialConfig;\n\n  /**\n   *\n   * The part of the config that is specific to the ExternalNotification module\n   *\n   * @generated from field: meshtastic.ModuleConfig.ExternalNotificationConfig external_notification = 3;\n   */\n  externalNotification?: ModuleConfig_ExternalNotificationConfig;\n\n  /**\n   *\n   * The part of the config that is specific to the Store & Forward module\n   *\n   * @generated from field: meshtastic.ModuleConfig.StoreForwardConfig store_forward = 4;\n   */\n  storeForward?: ModuleConfig_StoreForwardConfig;\n\n  /**\n   *\n   * The part of the config that is specific to the RangeTest module\n   *\n   * @generated from field: meshtastic.ModuleConfig.RangeTestConfig range_test = 5;\n   */\n  rangeTest?: ModuleConfig_RangeTestConfig;\n\n  /**\n   *\n   * The part of the config that is specific to the Telemetry module\n   *\n   * @generated from field: meshtastic.ModuleConfig.TelemetryConfig telemetry = 6;\n   */\n  telemetry?: ModuleConfig_TelemetryConfig;\n\n  /**\n   *\n   * The part of the config that is specific to the Canned Message module\n   *\n   * @generated from field: meshtastic.ModuleConfig.CannedMessageConfig canned_message = 7;\n   */\n  cannedMessage?: ModuleConfig_CannedMessageConfig;\n\n  /**\n   *\n   * The part of the config that is specific to the Audio module\n   *\n   * @generated from field: meshtastic.ModuleConfig.AudioConfig audio = 9;\n   */\n  audio?: ModuleConfig_AudioConfig;\n\n  /**\n   *\n   * The part of the config that is specific to the Remote Hardware module\n   *\n   * @generated from field: meshtastic.ModuleConfig.RemoteHardwareConfig remote_hardware = 10;\n   */\n  remoteHardware?: ModuleConfig_RemoteHardwareConfig;\n\n  /**\n   *\n   * The part of the config that is specific to the Neighbor Info module\n   *\n   * @generated from field: meshtastic.ModuleConfig.NeighborInfoConfig neighbor_info = 11;\n   */\n  neighborInfo?: ModuleConfig_NeighborInfoConfig;\n\n  /**\n   *\n   * The part of the config that is specific to the Ambient Lighting module\n   *\n   * @generated from field: meshtastic.ModuleConfig.AmbientLightingConfig ambient_lighting = 12;\n   */\n  ambientLighting?: ModuleConfig_AmbientLightingConfig;\n\n  /**\n   *\n   * The part of the config that is specific to the Detection Sensor module\n   *\n   * @generated from field: meshtastic.ModuleConfig.DetectionSensorConfig detection_sensor = 13;\n   */\n  detectionSensor?: ModuleConfig_DetectionSensorConfig;\n\n  /**\n   *\n   * Paxcounter Config\n   *\n   * @generated from field: meshtastic.ModuleConfig.PaxcounterConfig paxcounter = 14;\n   */\n  paxcounter?: ModuleConfig_PaxcounterConfig;\n\n  /**\n   *\n   * A version integer used to invalidate old save files when we make\n   * incompatible changes This integer is set at build time and is private to\n   * NodeDB.cpp in the device code.\n   *\n   * @generated from field: uint32 version = 8;\n   */\n  version: number;\n};\n\n/**\n * Describes the message meshtastic.LocalModuleConfig.\n * Use `create(LocalModuleConfigSchema)` to create a new message.\n */\nexport const LocalModuleConfigSchema: GenMessage<LocalModuleConfig> = /*@__PURE__*/\n  messageDesc(file_localonly, 1);\n\n","// @generated by protoc-gen-es v2.1.0 with parameter \"target=ts\"\n// @generated from file mqtt.proto (package meshtastic, syntax proto3)\n/* eslint-disable */\n\nimport type { GenFile, GenMessage } from \"@bufbuild/protobuf/codegenv1\";\nimport { fileDesc, messageDesc } from \"@bufbuild/protobuf/codegenv1\";\nimport type { Config_DeviceConfig_Role, Config_LoRaConfig_ModemPreset, Config_LoRaConfig_RegionCode } from \"./config_pb.js\";\nimport { file_config } from \"./config_pb.js\";\nimport type { HardwareModel, MeshPacket } from \"./mesh_pb.js\";\nimport { file_mesh } from \"./mesh_pb.js\";\nimport type { Message } from \"npm:@bufbuild/protobuf@^2.1.0\";\n\n/**\n * Describes the file mqtt.proto.\n */\nexport const file_mqtt: GenFile = /*@__PURE__*/\n  fileDesc(\"CgptcXR0LnByb3RvEgptZXNodGFzdGljImEKD1NlcnZpY2VFbnZlbG9wZRImCgZwYWNrZXQYASABKAsyFi5tZXNodGFzdGljLk1lc2hQYWNrZXQSEgoKY2hhbm5lbF9pZBgCIAEoCRISCgpnYXRld2F5X2lkGAMgASgJIrwDCglNYXBSZXBvcnQSEQoJbG9uZ19uYW1lGAEgASgJEhIKCnNob3J0X25hbWUYAiABKAkSMgoEcm9sZRgDIAEoDjIkLm1lc2h0YXN0aWMuQ29uZmlnLkRldmljZUNvbmZpZy5Sb2xlEisKCGh3X21vZGVsGAQgASgOMhkubWVzaHRhc3RpYy5IYXJkd2FyZU1vZGVsEhgKEGZpcm13YXJlX3ZlcnNpb24YBSABKAkSOAoGcmVnaW9uGAYgASgOMigubWVzaHRhc3RpYy5Db25maWcuTG9SYUNvbmZpZy5SZWdpb25Db2RlEj8KDG1vZGVtX3ByZXNldBgHIAEoDjIpLm1lc2h0YXN0aWMuQ29uZmlnLkxvUmFDb25maWcuTW9kZW1QcmVzZXQSGwoTaGFzX2RlZmF1bHRfY2hhbm5lbBgIIAEoCBISCgpsYXRpdHVkZV9pGAkgASgPEhMKC2xvbmdpdHVkZV9pGAogASgPEhAKCGFsdGl0dWRlGAsgASgFEhoKEnBvc2l0aW9uX3ByZWNpc2lvbhgMIAEoDRIeChZudW1fb25saW5lX2xvY2FsX25vZGVzGA0gASgNQl8KE2NvbS5nZWVrc3ZpbGxlLm1lc2hCCk1RVFRQcm90b3NaImdpdGh1Yi5jb20vbWVzaHRhc3RpYy9nby9nZW5lcmF0ZWSqAhRNZXNodGFzdGljLlByb3RvYnVmc7oCAGIGcHJvdG8z\", [file_config, file_mesh]);\n\n/**\n *\n * This message wraps a MeshPacket with extra metadata about the sender and how it arrived.\n *\n * @generated from message meshtastic.ServiceEnvelope\n */\nexport type ServiceEnvelope = Message<\"meshtastic.ServiceEnvelope\"> & {\n  /**\n   *\n   * The (probably encrypted) packet\n   *\n   * @generated from field: meshtastic.MeshPacket packet = 1;\n   */\n  packet?: MeshPacket;\n\n  /**\n   *\n   * The global channel ID it was sent on\n   *\n   * @generated from field: string channel_id = 2;\n   */\n  channelId: string;\n\n  /**\n   *\n   * The sending gateway node ID. Can we use this to authenticate/prevent fake\n   * nodeid impersonation for senders? - i.e. use gateway/mesh id (which is authenticated) + local node id as\n   * the globally trusted nodenum\n   *\n   * @generated from field: string gateway_id = 3;\n   */\n  gatewayId: string;\n};\n\n/**\n * Describes the message meshtastic.ServiceEnvelope.\n * Use `create(ServiceEnvelopeSchema)` to create a new message.\n */\nexport const ServiceEnvelopeSchema: GenMessage<ServiceEnvelope> = /*@__PURE__*/\n  messageDesc(file_mqtt, 0);\n\n/**\n *\n * Information about a node intended to be reported unencrypted to a map using MQTT.\n *\n * @generated from message meshtastic.MapReport\n */\nexport type MapReport = Message<\"meshtastic.MapReport\"> & {\n  /**\n   *\n   * A full name for this user, i.e. \"Kevin Hester\"\n   *\n   * @generated from field: string long_name = 1;\n   */\n  longName: string;\n\n  /**\n   *\n   * A VERY short name, ideally two characters.\n   * Suitable for a tiny OLED screen\n   *\n   * @generated from field: string short_name = 2;\n   */\n  shortName: string;\n\n  /**\n   *\n   * Role of the node that applies specific settings for a particular use-case\n   *\n   * @generated from field: meshtastic.Config.DeviceConfig.Role role = 3;\n   */\n  role: Config_DeviceConfig_Role;\n\n  /**\n   *\n   * Hardware model of the node, i.e. T-Beam, Heltec V3, etc...\n   *\n   * @generated from field: meshtastic.HardwareModel hw_model = 4;\n   */\n  hwModel: HardwareModel;\n\n  /**\n   *\n   * Device firmware version string\n   *\n   * @generated from field: string firmware_version = 5;\n   */\n  firmwareVersion: string;\n\n  /**\n   *\n   * The region code for the radio (US, CN, EU433, etc...)\n   *\n   * @generated from field: meshtastic.Config.LoRaConfig.RegionCode region = 6;\n   */\n  region: Config_LoRaConfig_RegionCode;\n\n  /**\n   *\n   * Modem preset used by the radio (LongFast, MediumSlow, etc...)\n   *\n   * @generated from field: meshtastic.Config.LoRaConfig.ModemPreset modem_preset = 7;\n   */\n  modemPreset: Config_LoRaConfig_ModemPreset;\n\n  /**\n   *\n   * Whether the node has a channel with default PSK and name (LongFast, MediumSlow, etc...)\n   * and it uses the default frequency slot given the region and modem preset.\n   *\n   * @generated from field: bool has_default_channel = 8;\n   */\n  hasDefaultChannel: boolean;\n\n  /**\n   *\n   * Latitude: multiply by 1e-7 to get degrees in floating point\n   *\n   * @generated from field: sfixed32 latitude_i = 9;\n   */\n  latitudeI: number;\n\n  /**\n   *\n   * Longitude: multiply by 1e-7 to get degrees in floating point\n   *\n   * @generated from field: sfixed32 longitude_i = 10;\n   */\n  longitudeI: number;\n\n  /**\n   *\n   * Altitude in meters above MSL\n   *\n   * @generated from field: int32 altitude = 11;\n   */\n  altitude: number;\n\n  /**\n   *\n   * Indicates the bits of precision for latitude and longitude set by the sending node\n   *\n   * @generated from field: uint32 position_precision = 12;\n   */\n  positionPrecision: number;\n\n  /**\n   *\n   * Number of online nodes (heard in the last 2 hours) this node has in its list that were received locally (not via MQTT)\n   *\n   * @generated from field: uint32 num_online_local_nodes = 13;\n   */\n  numOnlineLocalNodes: number;\n};\n\n/**\n * Describes the message meshtastic.MapReport.\n * Use `create(MapReportSchema)` to create a new message.\n */\nexport const MapReportSchema: GenMessage<MapReport> = /*@__PURE__*/\n  messageDesc(file_mqtt, 1);\n\n","// @generated by protoc-gen-es v2.1.0 with parameter \"target=ts\"\n// @generated from file paxcount.proto (package meshtastic, syntax proto3)\n/* eslint-disable */\n\nimport type { GenFile, GenMessage } from \"@bufbuild/protobuf/codegenv1\";\nimport { fileDesc, messageDesc } from \"@bufbuild/protobuf/codegenv1\";\nimport type { Message } from \"npm:@bufbuild/protobuf@^2.1.0\";\n\n/**\n * Describes the file paxcount.proto.\n */\nexport const file_paxcount: GenFile = /*@__PURE__*/\n  fileDesc(\"Cg5wYXhjb3VudC5wcm90bxIKbWVzaHRhc3RpYyI1CghQYXhjb3VudBIMCgR3aWZpGAEgASgNEgsKA2JsZRgCIAEoDRIOCgZ1cHRpbWUYAyABKA1CYwoTY29tLmdlZWtzdmlsbGUubWVzaEIOUGF4Y291bnRQcm90b3NaImdpdGh1Yi5jb20vbWVzaHRhc3RpYy9nby9nZW5lcmF0ZWSqAhRNZXNodGFzdGljLlByb3RvYnVmc7oCAGIGcHJvdG8z\");\n\n/**\n *\n * TODO: REPLACE\n *\n * @generated from message meshtastic.Paxcount\n */\nexport type Paxcount = Message<\"meshtastic.Paxcount\"> & {\n  /**\n   *\n   * seen Wifi devices\n   *\n   * @generated from field: uint32 wifi = 1;\n   */\n  wifi: number;\n\n  /**\n   *\n   * Seen BLE devices\n   *\n   * @generated from field: uint32 ble = 2;\n   */\n  ble: number;\n\n  /**\n   *\n   * Uptime in seconds\n   *\n   * @generated from field: uint32 uptime = 3;\n   */\n  uptime: number;\n};\n\n/**\n * Describes the message meshtastic.Paxcount.\n * Use `create(PaxcountSchema)` to create a new message.\n */\nexport const PaxcountSchema: GenMessage<Paxcount> = /*@__PURE__*/\n  messageDesc(file_paxcount, 0);\n\n","// @generated by protoc-gen-es v2.1.0 with parameter \"target=ts\"\n// @generated from file powermon.proto (package meshtastic, syntax proto3)\n/* eslint-disable */\n\nimport type { GenEnum, GenFile, GenMessage } from \"@bufbuild/protobuf/codegenv1\";\nimport { enumDesc, fileDesc, messageDesc } from \"@bufbuild/protobuf/codegenv1\";\nimport type { Message } from \"npm:@bufbuild/protobuf@^2.1.0\";\n\n/**\n * Describes the file powermon.proto.\n */\nexport const file_powermon: GenFile = /*@__PURE__*/\n  fileDesc(\"Cg5wb3dlcm1vbi5wcm90bxIKbWVzaHRhc3RpYyLgAQoIUG93ZXJNb24i0wEKBVN0YXRlEggKBE5vbmUQABIRCg1DUFVfRGVlcFNsZWVwEAESEgoOQ1BVX0xpZ2h0U2xlZXAQAhIMCghWZXh0MV9PbhAEEg0KCUxvcmFfUlhPbhAIEg0KCUxvcmFfVFhPbhAQEhEKDUxvcmFfUlhBY3RpdmUQIBIJCgVCVF9PbhBAEgsKBkxFRF9PbhCAARIOCglTY3JlZW5fT24QgAISEwoOU2NyZWVuX0RyYXdpbmcQgAQSDAoHV2lmaV9PbhCACBIPCgpHUFNfQWN0aXZlEIAQIv8CChJQb3dlclN0cmVzc01lc3NhZ2USMgoDY21kGAEgASgOMiUubWVzaHRhc3RpYy5Qb3dlclN0cmVzc01lc3NhZ2UuT3Bjb2RlEhMKC251bV9zZWNvbmRzGAIgASgCIp8CCgZPcGNvZGUSCQoFVU5TRVQQABIOCgpQUklOVF9JTkZPEAESDwoLRk9SQ0VfUVVJRVQQAhINCglFTkRfUVVJRVQQAxINCglTQ1JFRU5fT04QEBIOCgpTQ1JFRU5fT0ZGEBESDAoIQ1BVX0lETEUQIBIRCg1DUFVfREVFUFNMRUVQECESDgoKQ1BVX0ZVTExPThAiEgoKBkxFRF9PThAwEgsKB0xFRF9PRkYQMRIMCghMT1JBX09GRhBAEgsKB0xPUkFfVFgQQRILCgdMT1JBX1JYEEISCgoGQlRfT0ZGEFASCQoFQlRfT04QURIMCghXSUZJX09GRhBgEgsKB1dJRklfT04QYRILCgdHUFNfT0ZGEHASCgoGR1BTX09OEHFCYwoTY29tLmdlZWtzdmlsbGUubWVzaEIOUG93ZXJNb25Qcm90b3NaImdpdGh1Yi5jb20vbWVzaHRhc3RpYy9nby9nZW5lcmF0ZWSqAhRNZXNodGFzdGljLlByb3RvYnVmc7oCAGIGcHJvdG8z\");\n\n/**\n * Note: There are no 'PowerMon' messages normally in use (PowerMons are sent only as structured logs - slogs).\n * But we wrap our State enum in this message to effectively nest a namespace (without our linter yelling at us)\n *\n * @generated from message meshtastic.PowerMon\n */\nexport type PowerMon = Message<\"meshtastic.PowerMon\"> & {\n};\n\n/**\n * Describes the message meshtastic.PowerMon.\n * Use `create(PowerMonSchema)` to create a new message.\n */\nexport const PowerMonSchema: GenMessage<PowerMon> = /*@__PURE__*/\n  messageDesc(file_powermon, 0);\n\n/**\n * Any significant power changing event in meshtastic should be tagged with a powermon state transition.\n * If you are making new meshtastic features feel free to add new entries at the end of this definition.\n *\n * @generated from enum meshtastic.PowerMon.State\n */\nexport enum PowerMon_State {\n  /**\n   * @generated from enum value: None = 0;\n   */\n  None = 0,\n\n  /**\n   * @generated from enum value: CPU_DeepSleep = 1;\n   */\n  CPU_DeepSleep = 1,\n\n  /**\n   * @generated from enum value: CPU_LightSleep = 2;\n   */\n  CPU_LightSleep = 2,\n\n  /**\n   *\n   * The external Vext1 power is on.  Many boards have auxillary power rails that the CPU turns on only\n   * occasionally.  In cases where that rail has multiple devices on it we usually want to have logging on\n   * the state of that rail as an independent record.\n   * For instance on the Heltec Tracker 1.1 board, this rail is the power source for the GPS and screen.\n   *\n   * The log messages will be short and complete (see PowerMon.Event in the protobufs for details).\n   * something like \"S:PM:C,0x00001234,REASON\" where the hex number is the bitmask of all current states.\n   * (We use a bitmask for states so that if a log message gets lost it won't be fatal)\n   *\n   * @generated from enum value: Vext1_On = 4;\n   */\n  Vext1_On = 4,\n\n  /**\n   * @generated from enum value: Lora_RXOn = 8;\n   */\n  Lora_RXOn = 8,\n\n  /**\n   * @generated from enum value: Lora_TXOn = 16;\n   */\n  Lora_TXOn = 16,\n\n  /**\n   * @generated from enum value: Lora_RXActive = 32;\n   */\n  Lora_RXActive = 32,\n\n  /**\n   * @generated from enum value: BT_On = 64;\n   */\n  BT_On = 64,\n\n  /**\n   * @generated from enum value: LED_On = 128;\n   */\n  LED_On = 128,\n\n  /**\n   * @generated from enum value: Screen_On = 256;\n   */\n  Screen_On = 256,\n\n  /**\n   * @generated from enum value: Screen_Drawing = 512;\n   */\n  Screen_Drawing = 512,\n\n  /**\n   * @generated from enum value: Wifi_On = 1024;\n   */\n  Wifi_On = 1024,\n\n  /**\n   *\n   * GPS is actively trying to find our location\n   * See GPSPowerState for more details\n   *\n   * @generated from enum value: GPS_Active = 2048;\n   */\n  GPS_Active = 2048,\n}\n\n/**\n * Describes the enum meshtastic.PowerMon.State.\n */\nexport const PowerMon_StateSchema: GenEnum<PowerMon_State> = /*@__PURE__*/\n  enumDesc(file_powermon, 0, 0);\n\n/**\n *\n * PowerStress testing support via the C++ PowerStress module\n *\n * @generated from message meshtastic.PowerStressMessage\n */\nexport type PowerStressMessage = Message<\"meshtastic.PowerStressMessage\"> & {\n  /**\n   *\n   * What type of HardwareMessage is this?\n   *\n   * @generated from field: meshtastic.PowerStressMessage.Opcode cmd = 1;\n   */\n  cmd: PowerStressMessage_Opcode;\n\n  /**\n   * @generated from field: float num_seconds = 2;\n   */\n  numSeconds: number;\n};\n\n/**\n * Describes the message meshtastic.PowerStressMessage.\n * Use `create(PowerStressMessageSchema)` to create a new message.\n */\nexport const PowerStressMessageSchema: GenMessage<PowerStressMessage> = /*@__PURE__*/\n  messageDesc(file_powermon, 1);\n\n/**\n *\n * What operation would we like the UUT to perform.\n * note: senders should probably set want_response in their request packets, so that they can know when the state\n * machine has started processing their request\n *\n * @generated from enum meshtastic.PowerStressMessage.Opcode\n */\nexport enum PowerStressMessage_Opcode {\n  /**\n   *\n   * Unset/unused\n   *\n   * @generated from enum value: UNSET = 0;\n   */\n  UNSET = 0,\n\n  /**\n   * Print board version slog and send an ack that we are alive and ready to process commands\n   *\n   * @generated from enum value: PRINT_INFO = 1;\n   */\n  PRINT_INFO = 1,\n\n  /**\n   * Try to turn off all automatic processing of packets, screen, sleeping, etc (to make it easier to measure in isolation)\n   *\n   * @generated from enum value: FORCE_QUIET = 2;\n   */\n  FORCE_QUIET = 2,\n\n  /**\n   * Stop powerstress processing - probably by just rebooting the board\n   *\n   * @generated from enum value: END_QUIET = 3;\n   */\n  END_QUIET = 3,\n\n  /**\n   * Turn the screen on\n   *\n   * @generated from enum value: SCREEN_ON = 16;\n   */\n  SCREEN_ON = 16,\n\n  /**\n   * Turn the screen off\n   *\n   * @generated from enum value: SCREEN_OFF = 17;\n   */\n  SCREEN_OFF = 17,\n\n  /**\n   * Let the CPU run but we assume mostly idling for num_seconds\n   *\n   * @generated from enum value: CPU_IDLE = 32;\n   */\n  CPU_IDLE = 32,\n\n  /**\n   * Force deep sleep for FIXME seconds\n   *\n   * @generated from enum value: CPU_DEEPSLEEP = 33;\n   */\n  CPU_DEEPSLEEP = 33,\n\n  /**\n   * Spin the CPU as fast as possible for num_seconds\n   *\n   * @generated from enum value: CPU_FULLON = 34;\n   */\n  CPU_FULLON = 34,\n\n  /**\n   * Turn the LED on for num_seconds (and leave it on - for baseline power measurement purposes)\n   *\n   * @generated from enum value: LED_ON = 48;\n   */\n  LED_ON = 48,\n\n  /**\n   * Force the LED off for num_seconds\n   *\n   * @generated from enum value: LED_OFF = 49;\n   */\n  LED_OFF = 49,\n\n  /**\n   * Completely turn off the LORA radio for num_seconds\n   *\n   * @generated from enum value: LORA_OFF = 64;\n   */\n  LORA_OFF = 64,\n\n  /**\n   * Send Lora packets for num_seconds\n   *\n   * @generated from enum value: LORA_TX = 65;\n   */\n  LORA_TX = 65,\n\n  /**\n   * Receive Lora packets for num_seconds (node will be mostly just listening, unless an external agent is helping stress this by sending packets on the current channel)\n   *\n   * @generated from enum value: LORA_RX = 66;\n   */\n  LORA_RX = 66,\n\n  /**\n   * Turn off the BT radio for num_seconds\n   *\n   * @generated from enum value: BT_OFF = 80;\n   */\n  BT_OFF = 80,\n\n  /**\n   * Turn on the BT radio for num_seconds\n   *\n   * @generated from enum value: BT_ON = 81;\n   */\n  BT_ON = 81,\n\n  /**\n   * Turn off the WIFI radio for num_seconds\n   *\n   * @generated from enum value: WIFI_OFF = 96;\n   */\n  WIFI_OFF = 96,\n\n  /**\n   * Turn on the WIFI radio for num_seconds\n   *\n   * @generated from enum value: WIFI_ON = 97;\n   */\n  WIFI_ON = 97,\n\n  /**\n   * Turn off the GPS radio for num_seconds\n   *\n   * @generated from enum value: GPS_OFF = 112;\n   */\n  GPS_OFF = 112,\n\n  /**\n   * Turn on the GPS radio for num_seconds\n   *\n   * @generated from enum value: GPS_ON = 113;\n   */\n  GPS_ON = 113,\n}\n\n/**\n * Describes the enum meshtastic.PowerStressMessage.Opcode.\n */\nexport const PowerStressMessage_OpcodeSchema: GenEnum<PowerStressMessage_Opcode> = /*@__PURE__*/\n  enumDesc(file_powermon, 1, 0);\n\n","// @generated by protoc-gen-es v2.1.0 with parameter \"target=ts\"\n// @generated from file remote_hardware.proto (package meshtastic, syntax proto3)\n/* eslint-disable */\n\nimport type { GenEnum, GenFile, GenMessage } from \"@bufbuild/protobuf/codegenv1\";\nimport { enumDesc, fileDesc, messageDesc } from \"@bufbuild/protobuf/codegenv1\";\nimport type { Message } from \"npm:@bufbuild/protobuf@^2.1.0\";\n\n/**\n * Describes the file remote_hardware.proto.\n */\nexport const file_remote_hardware: GenFile = /*@__PURE__*/\n  fileDesc(\"ChVyZW1vdGVfaGFyZHdhcmUucHJvdG8SCm1lc2h0YXN0aWMi1gEKD0hhcmR3YXJlTWVzc2FnZRIuCgR0eXBlGAEgASgOMiAubWVzaHRhc3RpYy5IYXJkd2FyZU1lc3NhZ2UuVHlwZRIRCglncGlvX21hc2sYAiABKAQSEgoKZ3Bpb192YWx1ZRgDIAEoBCJsCgRUeXBlEgkKBVVOU0VUEAASDwoLV1JJVEVfR1BJT1MQARIPCgtXQVRDSF9HUElPUxACEhEKDUdQSU9TX0NIQU5HRUQQAxIOCgpSRUFEX0dQSU9TEAQSFAoQUkVBRF9HUElPU19SRVBMWRAFQmMKE2NvbS5nZWVrc3ZpbGxlLm1lc2hCDlJlbW90ZUhhcmR3YXJlWiJnaXRodWIuY29tL21lc2h0YXN0aWMvZ28vZ2VuZXJhdGVkqgIUTWVzaHRhc3RpYy5Qcm90b2J1ZnO6AgBiBnByb3RvMw\");\n\n/**\n *\n * An example app to show off the module system. This message is used for\n * REMOTE_HARDWARE_APP PortNums.\n * Also provides easy remote access to any GPIO.\n * In the future other remote hardware operations can be added based on user interest\n * (i.e. serial output, spi/i2c input/output).\n * FIXME - currently this feature is turned on by default which is dangerous\n * because no security yet (beyond the channel mechanism).\n * It should be off by default and then protected based on some TBD mechanism\n * (a special channel once multichannel support is included?)\n *\n * @generated from message meshtastic.HardwareMessage\n */\nexport type HardwareMessage = Message<\"meshtastic.HardwareMessage\"> & {\n  /**\n   *\n   * What type of HardwareMessage is this?\n   *\n   * @generated from field: meshtastic.HardwareMessage.Type type = 1;\n   */\n  type: HardwareMessage_Type;\n\n  /**\n   *\n   * What gpios are we changing. Not used for all MessageTypes, see MessageType for details\n   *\n   * @generated from field: uint64 gpio_mask = 2;\n   */\n  gpioMask: bigint;\n\n  /**\n   *\n   * For gpios that were listed in gpio_mask as valid, what are the signal levels for those gpios.\n   * Not used for all MessageTypes, see MessageType for details\n   *\n   * @generated from field: uint64 gpio_value = 3;\n   */\n  gpioValue: bigint;\n};\n\n/**\n * Describes the message meshtastic.HardwareMessage.\n * Use `create(HardwareMessageSchema)` to create a new message.\n */\nexport const HardwareMessageSchema: GenMessage<HardwareMessage> = /*@__PURE__*/\n  messageDesc(file_remote_hardware, 0);\n\n/**\n *\n * TODO: REPLACE\n *\n * @generated from enum meshtastic.HardwareMessage.Type\n */\nexport enum HardwareMessage_Type {\n  /**\n   *\n   * Unset/unused\n   *\n   * @generated from enum value: UNSET = 0;\n   */\n  UNSET = 0,\n\n  /**\n   *\n   * Set gpio gpios based on gpio_mask/gpio_value\n   *\n   * @generated from enum value: WRITE_GPIOS = 1;\n   */\n  WRITE_GPIOS = 1,\n\n  /**\n   *\n   * We are now interested in watching the gpio_mask gpios.\n   * If the selected gpios change, please broadcast GPIOS_CHANGED.\n   * Will implicitly change the gpios requested to be INPUT gpios.\n   *\n   * @generated from enum value: WATCH_GPIOS = 2;\n   */\n  WATCH_GPIOS = 2,\n\n  /**\n   *\n   * The gpios listed in gpio_mask have changed, the new values are listed in gpio_value\n   *\n   * @generated from enum value: GPIOS_CHANGED = 3;\n   */\n  GPIOS_CHANGED = 3,\n\n  /**\n   *\n   * Read the gpios specified in gpio_mask, send back a READ_GPIOS_REPLY reply with gpio_value populated\n   *\n   * @generated from enum value: READ_GPIOS = 4;\n   */\n  READ_GPIOS = 4,\n\n  /**\n   *\n   * A reply to READ_GPIOS. gpio_mask and gpio_value will be populated\n   *\n   * @generated from enum value: READ_GPIOS_REPLY = 5;\n   */\n  READ_GPIOS_REPLY = 5,\n}\n\n/**\n * Describes the enum meshtastic.HardwareMessage.Type.\n */\nexport const HardwareMessage_TypeSchema: GenEnum<HardwareMessage_Type> = /*@__PURE__*/\n  enumDesc(file_remote_hardware, 0, 0);\n\n","// @generated by protoc-gen-es v2.1.0 with parameter \"target=ts\"\n// @generated from file rtttl.proto (package meshtastic, syntax proto3)\n/* eslint-disable */\n\nimport type { GenFile, GenMessage } from \"@bufbuild/protobuf/codegenv1\";\nimport { fileDesc, messageDesc } from \"@bufbuild/protobuf/codegenv1\";\nimport type { Message } from \"npm:@bufbuild/protobuf@^2.1.0\";\n\n/**\n * Describes the file rtttl.proto.\n */\nexport const file_rtttl: GenFile = /*@__PURE__*/\n  fileDesc(\"CgtydHR0bC5wcm90bxIKbWVzaHRhc3RpYyIfCgtSVFRUTENvbmZpZxIQCghyaW5ndG9uZRgBIAEoCUJmChNjb20uZ2Vla3N2aWxsZS5tZXNoQhFSVFRUTENvbmZpZ1Byb3Rvc1oiZ2l0aHViLmNvbS9tZXNodGFzdGljL2dvL2dlbmVyYXRlZKoCFE1lc2h0YXN0aWMuUHJvdG9idWZzugIAYgZwcm90bzM\");\n\n/**\n *\n * Canned message module configuration.\n *\n * @generated from message meshtastic.RTTTLConfig\n */\nexport type RTTTLConfig = Message<\"meshtastic.RTTTLConfig\"> & {\n  /**\n   *\n   * Ringtone for PWM Buzzer in RTTTL Format.\n   *\n   * @generated from field: string ringtone = 1;\n   */\n  ringtone: string;\n};\n\n/**\n * Describes the message meshtastic.RTTTLConfig.\n * Use `create(RTTTLConfigSchema)` to create a new message.\n */\nexport const RTTTLConfigSchema: GenMessage<RTTTLConfig> = /*@__PURE__*/\n  messageDesc(file_rtttl, 0);\n\n","// @generated by protoc-gen-es v2.1.0 with parameter \"target=ts\"\n// @generated from file storeforward.proto (package meshtastic, syntax proto3)\n/* eslint-disable */\n\nimport type { GenEnum, GenFile, GenMessage } from \"@bufbuild/protobuf/codegenv1\";\nimport { enumDesc, fileDesc, messageDesc } from \"@bufbuild/protobuf/codegenv1\";\nimport type { Message } from \"npm:@bufbuild/protobuf@^2.1.0\";\n\n/**\n * Describes the file storeforward.proto.\n */\nexport const file_storeforward: GenFile = /*@__PURE__*/\n  fileDesc(\"ChJzdG9yZWZvcndhcmQucHJvdG8SCm1lc2h0YXN0aWMinAcKD1N0b3JlQW5kRm9yd2FyZBI3CgJychgBIAEoDjIrLm1lc2h0YXN0aWMuU3RvcmVBbmRGb3J3YXJkLlJlcXVlc3RSZXNwb25zZRI3CgVzdGF0cxgCIAEoCzImLm1lc2h0YXN0aWMuU3RvcmVBbmRGb3J3YXJkLlN0YXRpc3RpY3NIABI2CgdoaXN0b3J5GAMgASgLMiMubWVzaHRhc3RpYy5TdG9yZUFuZEZvcndhcmQuSGlzdG9yeUgAEjoKCWhlYXJ0YmVhdBgEIAEoCzIlLm1lc2h0YXN0aWMuU3RvcmVBbmRGb3J3YXJkLkhlYXJ0YmVhdEgAEg4KBHRleHQYBSABKAxIABrNAQoKU3RhdGlzdGljcxIWCg5tZXNzYWdlc190b3RhbBgBIAEoDRIWCg5tZXNzYWdlc19zYXZlZBgCIAEoDRIUCgxtZXNzYWdlc19tYXgYAyABKA0SDwoHdXBfdGltZRgEIAEoDRIQCghyZXF1ZXN0cxgFIAEoDRIYChByZXF1ZXN0c19oaXN0b3J5GAYgASgNEhEKCWhlYXJ0YmVhdBgHIAEoCBISCgpyZXR1cm5fbWF4GAggASgNEhUKDXJldHVybl93aW5kb3cYCSABKA0aSQoHSGlzdG9yeRIYChBoaXN0b3J5X21lc3NhZ2VzGAEgASgNEg4KBndpbmRvdxgCIAEoDRIUCgxsYXN0X3JlcXVlc3QYAyABKA0aLgoJSGVhcnRiZWF0Eg4KBnBlcmlvZBgBIAEoDRIRCglzZWNvbmRhcnkYAiABKA0ivAIKD1JlcXVlc3RSZXNwb25zZRIJCgVVTlNFVBAAEhAKDFJPVVRFUl9FUlJPUhABEhQKEFJPVVRFUl9IRUFSVEJFQVQQAhIPCgtST1VURVJfUElORxADEg8KC1JPVVRFUl9QT05HEAQSDwoLUk9VVEVSX0JVU1kQBRISCg5ST1VURVJfSElTVE9SWRAGEhAKDFJPVVRFUl9TVEFUUxAHEhYKElJPVVRFUl9URVhUX0RJUkVDVBAIEhkKFVJPVVRFUl9URVhUX0JST0FEQ0FTVBAJEhAKDENMSUVOVF9FUlJPUhBAEhIKDkNMSUVOVF9ISVNUT1JZEEESEAoMQ0xJRU5UX1NUQVRTEEISDwoLQ0xJRU5UX1BJTkcQQxIPCgtDTElFTlRfUE9ORxBEEhAKDENMSUVOVF9BQk9SVBBqQgkKB3ZhcmlhbnRCagoTY29tLmdlZWtzdmlsbGUubWVzaEIVU3RvcmVBbmRGb3J3YXJkUHJvdG9zWiJnaXRodWIuY29tL21lc2h0YXN0aWMvZ28vZ2VuZXJhdGVkqgIUTWVzaHRhc3RpYy5Qcm90b2J1ZnO6AgBiBnByb3RvMw\");\n\n/**\n *\n * TODO: REPLACE\n *\n * @generated from message meshtastic.StoreAndForward\n */\nexport type StoreAndForward = Message<\"meshtastic.StoreAndForward\"> & {\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from field: meshtastic.StoreAndForward.RequestResponse rr = 1;\n   */\n  rr: StoreAndForward_RequestResponse;\n\n  /**\n   *\n   * TODO: REPLACE\n   *\n   * @generated from oneof meshtastic.StoreAndForward.variant\n   */\n  variant: {\n    /**\n     *\n     * TODO: REPLACE\n     *\n     * @generated from field: meshtastic.StoreAndForward.Statistics stats = 2;\n     */\n    value: StoreAndForward_Statistics;\n    case: \"stats\";\n  } | {\n    /**\n     *\n     * TODO: REPLACE\n     *\n     * @generated from field: meshtastic.StoreAndForward.History history = 3;\n     */\n    value: StoreAndForward_History;\n    case: \"history\";\n  } | {\n    /**\n     *\n     * TODO: REPLACE\n     *\n     * @generated from field: meshtastic.StoreAndForward.Heartbeat heartbeat = 4;\n     */\n    value: StoreAndForward_Heartbeat;\n    case: \"heartbeat\";\n  } | {\n    /**\n     *\n     * Text from history message.\n     *\n     * @generated from field: bytes text = 5;\n     */\n    value: Uint8Array;\n    case: \"text\";\n  } | { case: undefined; value?: undefined };\n};\n\n/**\n * Describes the message meshtastic.StoreAndForward.\n * Use `create(StoreAndForwardSchema)` to create a new message.\n */\nexport const StoreAndForwardSchema: GenMessage<StoreAndForward> = /*@__PURE__*/\n  messageDesc(file_storeforward, 0);\n\n/**\n *\n * TODO: REPLACE\n *\n * @generated from message meshtastic.StoreAndForward.Statistics\n */\nexport type StoreAndForward_Statistics = Message<\"meshtastic.StoreAndForward.Statistics\"> & {\n  /**\n   *\n   * Number of messages we have ever seen\n   *\n   * @generated from field: uint32 messages_total = 1;\n   */\n  messagesTotal: number;\n\n  /**\n   *\n   * Number of messages we have currently saved our history.\n   *\n   * @generated from field: uint32 messages_saved = 2;\n   */\n  messagesSaved: number;\n\n  /**\n   *\n   * Maximum number of messages we will save\n   *\n   * @generated from field: uint32 messages_max = 3;\n   */\n  messagesMax: number;\n\n  /**\n   *\n   * Router uptime in seconds\n   *\n   * @generated from field: uint32 up_time = 4;\n   */\n  upTime: number;\n\n  /**\n   *\n   * Number of times any client sent a request to the S&F.\n   *\n   * @generated from field: uint32 requests = 5;\n   */\n  requests: number;\n\n  /**\n   *\n   * Number of times the history was requested.\n   *\n   * @generated from field: uint32 requests_history = 6;\n   */\n  requestsHistory: number;\n\n  /**\n   *\n   * Is the heartbeat enabled on the server?\n   *\n   * @generated from field: bool heartbeat = 7;\n   */\n  heartbeat: boolean;\n\n  /**\n   *\n   * Maximum number of messages the server will return.\n   *\n   * @generated from field: uint32 return_max = 8;\n   */\n  returnMax: number;\n\n  /**\n   *\n   * Maximum history window in minutes the server will return messages from.\n   *\n   * @generated from field: uint32 return_window = 9;\n   */\n  returnWindow: number;\n};\n\n/**\n * Describes the message meshtastic.StoreAndForward.Statistics.\n * Use `create(StoreAndForward_StatisticsSchema)` to create a new message.\n */\nexport const StoreAndForward_StatisticsSchema: GenMessage<StoreAndForward_Statistics> = /*@__PURE__*/\n  messageDesc(file_storeforward, 0, 0);\n\n/**\n *\n * TODO: REPLACE\n *\n * @generated from message meshtastic.StoreAndForward.History\n */\nexport type StoreAndForward_History = Message<\"meshtastic.StoreAndForward.History\"> & {\n  /**\n   *\n   * Number of that will be sent to the client\n   *\n   * @generated from field: uint32 history_messages = 1;\n   */\n  historyMessages: number;\n\n  /**\n   *\n   * The window of messages that was used to filter the history client requested\n   *\n   * @generated from field: uint32 window = 2;\n   */\n  window: number;\n\n  /**\n   *\n   * Index in the packet history of the last message sent in a previous request to the server.\n   * Will be sent to the client before sending the history and can be set in a subsequent request to avoid getting packets the server already sent to the client.\n   *\n   * @generated from field: uint32 last_request = 3;\n   */\n  lastRequest: number;\n};\n\n/**\n * Describes the message meshtastic.StoreAndForward.History.\n * Use `create(StoreAndForward_HistorySchema)` to create a new message.\n */\nexport const StoreAndForward_HistorySchema: GenMessage<StoreAndForward_History> = /*@__PURE__*/\n  messageDesc(file_storeforward, 0, 1);\n\n/**\n *\n * TODO: REPLACE\n *\n * @generated from message meshtastic.StoreAndForward.Heartbeat\n */\nexport type StoreAndForward_Heartbeat = Message<\"meshtastic.StoreAndForward.Heartbeat\"> & {\n  /**\n   *\n   * Period in seconds that the heartbeat is sent out that will be sent to the client\n   *\n   * @generated from field: uint32 period = 1;\n   */\n  period: number;\n\n  /**\n   *\n   * If set, this is not the primary Store & Forward router on the mesh\n   *\n   * @generated from field: uint32 secondary = 2;\n   */\n  secondary: number;\n};\n\n/**\n * Describes the message meshtastic.StoreAndForward.Heartbeat.\n * Use `create(StoreAndForward_HeartbeatSchema)` to create a new message.\n */\nexport const StoreAndForward_HeartbeatSchema: GenMessage<StoreAndForward_Heartbeat> = /*@__PURE__*/\n  messageDesc(file_storeforward, 0, 2);\n\n/**\n *\n * 001 - 063 = From Router\n * 064 - 127 = From Client\n *\n * @generated from enum meshtastic.StoreAndForward.RequestResponse\n */\nexport enum StoreAndForward_RequestResponse {\n  /**\n   *\n   * Unset/unused\n   *\n   * @generated from enum value: UNSET = 0;\n   */\n  UNSET = 0,\n\n  /**\n   *\n   * Router is an in error state.\n   *\n   * @generated from enum value: ROUTER_ERROR = 1;\n   */\n  ROUTER_ERROR = 1,\n\n  /**\n   *\n   * Router heartbeat\n   *\n   * @generated from enum value: ROUTER_HEARTBEAT = 2;\n   */\n  ROUTER_HEARTBEAT = 2,\n\n  /**\n   *\n   * Router has requested the client respond. This can work as a\n   * \"are you there\" message.\n   *\n   * @generated from enum value: ROUTER_PING = 3;\n   */\n  ROUTER_PING = 3,\n\n  /**\n   *\n   * The response to a \"Ping\"\n   *\n   * @generated from enum value: ROUTER_PONG = 4;\n   */\n  ROUTER_PONG = 4,\n\n  /**\n   *\n   * Router is currently busy. Please try again later.\n   *\n   * @generated from enum value: ROUTER_BUSY = 5;\n   */\n  ROUTER_BUSY = 5,\n\n  /**\n   *\n   * Router is responding to a request for history.\n   *\n   * @generated from enum value: ROUTER_HISTORY = 6;\n   */\n  ROUTER_HISTORY = 6,\n\n  /**\n   *\n   * Router is responding to a request for stats.\n   *\n   * @generated from enum value: ROUTER_STATS = 7;\n   */\n  ROUTER_STATS = 7,\n\n  /**\n   *\n   * Router sends a text message from its history that was a direct message.\n   *\n   * @generated from enum value: ROUTER_TEXT_DIRECT = 8;\n   */\n  ROUTER_TEXT_DIRECT = 8,\n\n  /**\n   *\n   * Router sends a text message from its history that was a broadcast.\n   *\n   * @generated from enum value: ROUTER_TEXT_BROADCAST = 9;\n   */\n  ROUTER_TEXT_BROADCAST = 9,\n\n  /**\n   *\n   * Client is an in error state.\n   *\n   * @generated from enum value: CLIENT_ERROR = 64;\n   */\n  CLIENT_ERROR = 64,\n\n  /**\n   *\n   * Client has requested a replay from the router.\n   *\n   * @generated from enum value: CLIENT_HISTORY = 65;\n   */\n  CLIENT_HISTORY = 65,\n\n  /**\n   *\n   * Client has requested stats from the router.\n   *\n   * @generated from enum value: CLIENT_STATS = 66;\n   */\n  CLIENT_STATS = 66,\n\n  /**\n   *\n   * Client has requested the router respond. This can work as a\n   * \"are you there\" message.\n   *\n   * @generated from enum value: CLIENT_PING = 67;\n   */\n  CLIENT_PING = 67,\n\n  /**\n   *\n   * The response to a \"Ping\"\n   *\n   * @generated from enum value: CLIENT_PONG = 68;\n   */\n  CLIENT_PONG = 68,\n\n  /**\n   *\n   * Client has requested that the router abort processing the client's request\n   *\n   * @generated from enum value: CLIENT_ABORT = 106;\n   */\n  CLIENT_ABORT = 106,\n}\n\n/**\n * Describes the enum meshtastic.StoreAndForward.RequestResponse.\n */\nexport const StoreAndForward_RequestResponseSchema: GenEnum<StoreAndForward_RequestResponse> = /*@__PURE__*/\n  enumDesc(file_storeforward, 0, 0);\n\n","import type {\n  BleConnection,\n  HttpConnection,\n  SerialConnection,\n} from \"./adapters/index.ts\";\nimport type * as Protobuf from \"@meshtastic/protobufs\";\n\nexport interface QueueItem {\n  id: number;\n  data: Uint8Array;\n  sent: boolean;\n  added: Date;\n  promise: Promise<number>;\n}\n\nexport interface HttpRetryConfig {\n  maxRetries: number;\n  initialDelayMs: number;\n  maxDelayMs: number;\n  backoffFactor: number;\n}\n\nexport enum DeviceStatusEnum {\n  DeviceRestarting = 1,\n  DeviceDisconnected = 2,\n  DeviceConnecting = 3,\n  DeviceReconnecting = 4,\n  DeviceConnected = 5,\n  DeviceConfiguring = 6,\n  DeviceConfigured = 7,\n}\n\nexport type ConnectionParameters =\n  | HttpConnectionParameters\n  | BleConnectionParameters\n  | SerialConnectionParameters;\n\nexport interface HttpConnectionParameters {\n  /** Address The IP Address/Domain to connect to, without protocol */\n  address: string;\n  /**\n   * Enables transport layer security. Notes: Slower, devices' certificate must\n   * be trusted by the browser\n   */\n  tls?: boolean;\n  /** Enables receiving messages all at once, versus one per request */\n  receiveBatchRequests?: boolean;\n  /**\n   * (ms) Sets a fixed interval in that the device is fetched for new messages,\n   * defaults to 5 seconds\n   */\n  fetchInterval: number;\n}\n\nexport interface BleConnectionParameters {\n  /** Optional filter options for the web bluetooth api requestDevice() method */\n  deviceFilter?: RequestDeviceOptions;\n  /** Connect directly to a Bluetooth deivce, obtained from `getDevices()` */\n  device?: BluetoothDevice;\n}\n\nexport interface SerialConnectionParameters {\n  baudRate?: number;\n  /** Connect directly to a Serial port, obtained from `getPorts()` */\n  port?: SerialPort;\n  concurrentLogOutput: boolean;\n}\n\nexport type LogEventPacket = LogEvent & { date: Date };\n\nexport type PacketDestination = \"broadcast\" | \"direct\";\n\nexport interface PacketMetadata<T> {\n  id: number;\n  rxTime: Date;\n  type: PacketDestination;\n  from: number;\n  to: number;\n  channel: ChannelNumber;\n  data: T;\n}\n\nexport enum EmitterScope {\n  MeshDevice = 1,\n  SerialConnection = 2,\n  NodeSerialConnection = 3,\n  BleConnection = 4,\n  HttpConnection = 5,\n}\n\nexport enum Emitter {\n  Constructor = 0,\n  SendText = 1,\n  SendWaypoint = 2,\n  SendPacket = 3,\n  SendRaw = 4,\n  SetConfig = 5,\n  SetModuleConfig = 6,\n  ConfirmSetConfig = 7,\n  SetOwner = 8,\n  SetChannel = 9,\n  ConfirmSetChannel = 10,\n  ClearChannel = 11,\n  GetChannel = 12,\n  GetAllChannels = 13,\n  GetConfig = 14,\n  GetModuleConfig = 15,\n  GetOwner = 16,\n  Configure = 17,\n  HandleFromRadio = 18,\n  HandleMeshPacket = 19,\n  Connect = 20,\n  Ping = 21,\n  ReadFromRadio = 22,\n  WriteToRadio = 23,\n  SetDebugMode = 24,\n  GetMetadata = 25,\n  ResetNodes = 26,\n  Shutdown = 27,\n  Reboot = 28,\n  RebootOta = 29,\n  FactoryReset = 30,\n  EnterDfuMode = 31,\n  RemoveNodeByNum = 32,\n  SetCannedMessages = 33,\n}\n\nexport interface LogEvent {\n  scope: EmitterScope;\n  emitter: Emitter;\n  message: string;\n  level: Protobuf.Mesh.LogRecord_Level;\n  packet?: Uint8Array;\n}\n\nexport enum ChannelNumber {\n  Primary = 0,\n  Channel1 = 1,\n  Channel2 = 2,\n  Channel3 = 3,\n  Channel4 = 4,\n  Channel5 = 5,\n  Channel6 = 6,\n  Admin = 7,\n}\n\nexport type ConnectionType = BleConnection | HttpConnection | SerialConnection;\n\nexport type ConnectionTypeName = \"ble\" | \"http\" | \"serial\";\n\nexport type Destination = number | \"self\" | \"broadcast\";\n\nexport interface PacketError {\n  id: number;\n  error: Protobuf.Mesh.Routing_Error;\n}\n","export * from \"./eventSystem.ts\";\nexport * from \"./general.ts\";\nexport * from \"./queue.ts\";\nexport * from \"./transformHandler.ts\";\nexport * from \"./xmodem.ts\";\n","import { SimpleEventDispatcher } from \"ste-simple-events\";\nimport type * as Protobuf from \"@meshtastic/protobufs\";\nimport type { PacketMetadata } from \"../types.ts\";\nimport type * as Types from \"../types.ts\";\n\nexport class EventSystem {\n  /**\n   * Fires when a new FromRadio message has been received from the device\n   *\n   * @event onLogEvent\n   */\n  public readonly onLogEvent =\n    new SimpleEventDispatcher<Types.LogEventPacket>();\n\n  /**\n   * Fires when a new FromRadio message has been received from the device\n   *\n   * @event onFromRadio\n   */\n  public readonly onFromRadio =\n    new SimpleEventDispatcher<Protobuf.Mesh.FromRadio>();\n\n  /**\n   * Fires when a new FromRadio message containing a Data packet has been\n   * received from the device\n   *\n   * @event onMeshPacket\n   */\n  public readonly onMeshPacket =\n    new SimpleEventDispatcher<Protobuf.Mesh.MeshPacket>();\n\n  /**\n   * Fires when a new MyNodeInfo message has been received from the device\n   *\n   * @event onMyNodeInfo\n   */\n  public readonly onMyNodeInfo =\n    new SimpleEventDispatcher<Protobuf.Mesh.MyNodeInfo>();\n\n  /**\n   * Fires when a new MeshPacket message containing a NodeInfo packet has been\n   * received from device\n   *\n   * @event onNodeInfoPacket\n   */\n  public readonly onNodeInfoPacket =\n    new SimpleEventDispatcher<Protobuf.Mesh.NodeInfo>();\n\n  /**\n   * Fires when a new Channel message is received\n   *\n   * @event onChannelPacket\n   */\n  public readonly onChannelPacket =\n    new SimpleEventDispatcher<Protobuf.Channel.Channel>();\n\n  /**\n   * Fires when a new Config message is received\n   *\n   * @event onConfigPacket\n   */\n  public readonly onConfigPacket =\n    new SimpleEventDispatcher<Protobuf.Config.Config>();\n\n  /**\n   * Fires when a new ModuleConfig message is received\n   *\n   * @event onModuleConfigPacket\n   */\n  public readonly onModuleConfigPacket =\n    new SimpleEventDispatcher<Protobuf.ModuleConfig.ModuleConfig>();\n\n  /**\n   * Fires when a new MeshPacket message containing a ATAK packet has been\n   * received from device\n   *\n   * @event onAtakPacket\n   */\n  public readonly onAtakPacket = new SimpleEventDispatcher<\n    PacketMetadata<Uint8Array>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing a Text packet has been\n   * received from device\n   *\n   * @event onMessagePacket\n   */\n  public readonly onMessagePacket = new SimpleEventDispatcher<\n    PacketMetadata<string>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing a Remote Hardware packet has\n   * been received from device\n   *\n   * @event onRemoteHardwarePacket\n   */\n  public readonly onRemoteHardwarePacket = new SimpleEventDispatcher<\n    PacketMetadata<Protobuf.RemoteHardware.HardwareMessage>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing a Position packet has been\n   * received from device\n   *\n   * @event onPositionPacket\n   */\n  public readonly onPositionPacket = new SimpleEventDispatcher<\n    PacketMetadata<Protobuf.Mesh.Position>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing a User packet has been\n   * received from device\n   *\n   * @event onUserPacket\n   */\n  public readonly onUserPacket = new SimpleEventDispatcher<\n    PacketMetadata<Protobuf.Mesh.User>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing a Routing packet has been\n   * received from device\n   *\n   * @event onRoutingPacket\n   */\n  public readonly onRoutingPacket = new SimpleEventDispatcher<\n    PacketMetadata<Protobuf.Mesh.Routing>\n  >();\n\n  /**\n   * Fires when the device receives a Metadata packet\n   *\n   * @event onDeviceMetadataPacket\n   */\n  public readonly onDeviceMetadataPacket = new SimpleEventDispatcher<\n    PacketMetadata<Protobuf.Mesh.DeviceMetadata>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing a Waypoint packet has been\n   * received from device\n   *\n   * @event onWaypointPacket\n   */\n  public readonly onWaypointPacket = new SimpleEventDispatcher<\n    PacketMetadata<Protobuf.Mesh.Waypoint>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing an Audio packet has been\n   * received from device\n   *\n   * @event onAudioPacket\n   */\n  public readonly onAudioPacket = new SimpleEventDispatcher<\n    PacketMetadata<Uint8Array>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing a Detection Sensor packet has been\n   * received from device\n   *\n   * @event onDetectionSensorPacket\n   */\n  public readonly onDetectionSensorPacket = new SimpleEventDispatcher<\n    PacketMetadata<Uint8Array>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing a Ping packet has been\n   * received from device\n   *\n   * @event onPingPacket\n   */\n  public readonly onPingPacket = new SimpleEventDispatcher<\n    PacketMetadata<Uint8Array>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing a IP Tunnel packet has been\n   * received from device\n   *\n   * @event onIpTunnelPacket\n   */\n  public readonly onIpTunnelPacket = new SimpleEventDispatcher<\n    PacketMetadata<Uint8Array>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing a Paxcounter packet has been\n   * received from device\n   *\n   * @event onPaxcounterPacket\n   */\n  public readonly onPaxcounterPacket = new SimpleEventDispatcher<\n    PacketMetadata<Protobuf.PaxCount.Paxcount>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing a Serial packet has been\n   * received from device\n   *\n   * @event onSerialPacket\n   */\n  public readonly onSerialPacket = new SimpleEventDispatcher<\n    PacketMetadata<Uint8Array>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing a Store and Forward packet\n   * has been received from device\n   *\n   * @event onStoreForwardPacket\n   */\n  public readonly onStoreForwardPacket = new SimpleEventDispatcher<\n    PacketMetadata<Uint8Array>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing a Store and Forward packet\n   * has been received from device\n   *\n   * @event onRangeTestPacket\n   */\n  public readonly onRangeTestPacket = new SimpleEventDispatcher<\n    PacketMetadata<Uint8Array>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing a Telemetry packet has been\n   * received from device\n   *\n   * @event onTelemetryPacket\n   */\n  public readonly onTelemetryPacket = new SimpleEventDispatcher<\n    PacketMetadata<Protobuf.Telemetry.Telemetry>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing a ZPS packet has been\n   * received from device\n   *\n   * @event onZPSPacket\n   */\n  public readonly onZpsPacket = new SimpleEventDispatcher<\n    PacketMetadata<Uint8Array>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing a Simulator packet has been\n   * received from device\n   *\n   * @event onSimulatorPacket\n   */\n  public readonly onSimulatorPacket = new SimpleEventDispatcher<\n    PacketMetadata<Uint8Array>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing a Trace Route packet has been\n   * received from device\n   *\n   * @event onTraceRoutePacket\n   */\n  public readonly onTraceRoutePacket = new SimpleEventDispatcher<\n    PacketMetadata<Protobuf.Mesh.RouteDiscovery>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing a Neighbor Info packet has been\n   * received from device\n   *\n   * @event onNeighborInfoPacket\n   */\n  public readonly onNeighborInfoPacket = new SimpleEventDispatcher<\n    PacketMetadata<Protobuf.Mesh.NeighborInfo>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing an ATAK packet has been\n   * received from device\n   *\n   * @event onAtakPluginPacket\n   */\n  public readonly onAtakPluginPacket = new SimpleEventDispatcher<\n    PacketMetadata<Uint8Array>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing a Map Report packet has been\n   * received from device\n   *\n   * @event onMapReportPacket\n   */\n  public readonly onMapReportPacket = new SimpleEventDispatcher<\n    PacketMetadata<Uint8Array>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing a Private packet has been\n   * received from device\n   *\n   * @event onPrivatePacket\n   */\n  public readonly onPrivatePacket = new SimpleEventDispatcher<\n    PacketMetadata<Uint8Array>\n  >();\n\n  /**\n   * Fires when a new MeshPacket message containing an ATAK Forwarder packet has been\n   * received from device\n   *\n   * @event onAtakForwarderPacket\n   */\n  public readonly onAtakForwarderPacket = new SimpleEventDispatcher<\n    PacketMetadata<Uint8Array>\n  >();\n\n  /**\n   * Fires when the devices connection or configuration status changes\n   *\n   * @event onDeviceStatus\n   */\n  public readonly onDeviceStatus =\n    new SimpleEventDispatcher<Types.DeviceStatusEnum>();\n\n  /**\n   * Fires when a new FromRadio message containing a LogRecord packet has been\n   * received from device\n   *\n   * @event onLogRecord\n   */\n  public readonly onLogRecord =\n    new SimpleEventDispatcher<Protobuf.Mesh.LogRecord>();\n\n  /**\n   * Fires when the device receives a meshPacket, returns a timestamp\n   *\n   * @event onMeshHeartbeat\n   */\n  public readonly onMeshHeartbeat = new SimpleEventDispatcher<Date>();\n\n  /**\n   * Outputs any debug log data (currently serial connections only)\n   *\n   * @event onDeviceDebugLog\n   */\n  public readonly onDeviceDebugLog = new SimpleEventDispatcher<Uint8Array>();\n\n  /**\n   * Outputs status of pending settings changes\n   *\n   * @event onpendingSettingsChange\n   */\n  public readonly onPendingSettingsChange =\n    new SimpleEventDispatcher<boolean>();\n\n  /**\n   * Fires when a QueueStatus message is generated\n   *\n   * @event onQueueStatus\n   */\n  public readonly onQueueStatus =\n    new SimpleEventDispatcher<Protobuf.Mesh.QueueStatus>();\n}\n","/**\n * Converts a Uint8Array to an ArrayBuffer efficiently, with additional safety checks.\n * @param array - The Uint8Array to convert\n * @returns A new ArrayBuffer containing the Uint8Array data\n * @throws { TypeError } If input is not a Uint8Array\n */\nexport const typedArrayToBuffer = (array: Uint8Array): ArrayBuffer => {\n  if (!(array instanceof Uint8Array)) {\n    throw new TypeError(\"Input must be a Uint8Array\");\n  }\n\n  if (array.byteLength === 0) {\n    return new ArrayBuffer(0);\n  }\n\n  // Check if the buffer is shared\n  if (array.buffer instanceof SharedArrayBuffer) {\n    // Always create a new buffer for shared memory\n    const newBuffer = new ArrayBuffer(array.byteLength);\n    new Uint8Array(newBuffer).set(array);\n    return newBuffer;\n  }\n\n  // If array uses the entire buffer and isn't offset, return it directly\n  if (array.byteOffset === 0 && array.byteLength === array.buffer.byteLength) {\n    return array.buffer;\n  }\n\n  // Otherwise, return a slice of the buffer containing just our data\n  return array.buffer.slice(\n    array.byteOffset,\n    array.byteOffset + array.byteLength,\n  );\n};\n","import { SimpleEventDispatcher } from \"ste-simple-events\";\nimport { fromBinary } from \"@bufbuild/protobuf\";\nimport * as Protobuf from \"@meshtastic/protobufs\";\nimport type { PacketError, QueueItem } from \"../types.ts\";\n\nexport class Queue {\n  private queue: QueueItem[] = [];\n  private lock = false;\n  private ackNotifier = new SimpleEventDispatcher<number>();\n  private errorNotifier = new SimpleEventDispatcher<PacketError>();\n  private timeout: number;\n\n  constructor() {\n    this.timeout = 60000;\n  }\n\n  public getState(): QueueItem[] {\n    return this.queue;\n  }\n\n  public clear(): void {\n    this.queue = [];\n  }\n\n  public push(item: Omit<QueueItem, \"promise\" | \"sent\" | \"added\">): void {\n    const queueItem: QueueItem = {\n      ...item,\n      sent: false,\n      added: new Date(),\n      promise: new Promise<number>((resolve, reject) => {\n        this.ackNotifier.subscribe((id) => {\n          if (item.id === id) {\n            this.remove(item.id);\n            resolve(id);\n          }\n        });\n        this.errorNotifier.subscribe((e) => {\n          if (item.id === e.id) {\n            this.remove(item.id);\n            reject(e);\n          }\n        });\n        setTimeout(() => {\n          if (this.queue.findIndex((qi) => qi.id === item.id) !== -1) {\n            this.remove(item.id);\n            const decoded = fromBinary(Protobuf.Mesh.ToRadioSchema, item.data);\n            console.warn(\n              `Packet ${item.id} of type ${decoded.payloadVariant.case} timed out`,\n            );\n\n            reject({\n              id: item.id,\n              error: Protobuf.Mesh.Routing_Error.TIMEOUT,\n            });\n          }\n        }, this.timeout);\n      }),\n    };\n    this.queue.push(queueItem);\n  }\n\n  public remove(id: number): void {\n    if (this.lock) {\n      setTimeout(() => this.remove(id), 100);\n      return;\n    }\n    this.queue = this.queue.filter((item) => item.id !== id);\n  }\n\n  public processAck(id: number): void {\n    this.ackNotifier.dispatch(id);\n  }\n\n  public processError(e: PacketError): void {\n    console.error(\n      `Error received for packet ${e.id}: ${\n        Protobuf.Mesh.Routing_Error[e.error]\n      }`,\n    );\n    this.errorNotifier.dispatch(e);\n  }\n\n  public async wait(id: number): Promise<number> {\n    const queueItem = this.queue.find((qi) => qi.id === id);\n    if (!queueItem) {\n      throw new Error(\"Packet does not exist\");\n    }\n    return queueItem.promise;\n  }\n\n  public async processQueue(\n    writeToRadio: (data: Uint8Array) => Promise<void>,\n  ): Promise<void> {\n    if (this.lock) {\n      return;\n    }\n    this.lock = true;\n    while (this.queue.filter((p) => !p.sent).length > 0) {\n      const item = this.queue.filter((p) => !p.sent)[0];\n      if (item) {\n        await new Promise((resolve) => setTimeout(resolve, 200));\n        try {\n          await writeToRadio(item.data);\n          item.sent = true;\n        } catch (error) {\n          console.error(`Error sending packet ${item.id}`, error);\n        }\n      }\n    }\n    this.lock = false;\n  }\n}\n","import type { SimpleEventDispatcher } from \"ste-simple-events\";\nimport type { Logger } from \"tslog\";\nimport * as Protobuf from \"@meshtastic/protobufs\";\nimport * as Types from \"../types.ts\";\n\nexport const transformHandler = (\n  log: Logger<unknown>,\n  onReleaseEvent: SimpleEventDispatcher<boolean>,\n  onDeviceDebugLog: SimpleEventDispatcher<Uint8Array>,\n  concurrentLogOutput: boolean,\n) => {\n  let byteBuffer = new Uint8Array([]);\n  return new TransformStream<Uint8Array, Uint8Array>({\n    transform(chunk: Uint8Array, controller): void {\n      log = log.getSubLogger({ name: \"streamTransformer\" });\n      onReleaseEvent.subscribe(() => {\n        controller.terminate();\n      });\n      byteBuffer = new Uint8Array([...byteBuffer, ...chunk]);\n      let processingExhausted = false;\n      while (byteBuffer.length !== 0 && !processingExhausted) {\n        const framingIndex = byteBuffer.findIndex((byte) => byte === 0x94);\n        const framingByte2 = byteBuffer[framingIndex + 1];\n        if (framingByte2 === 0xc3) {\n          if (byteBuffer.subarray(0, framingIndex).length) {\n            if (concurrentLogOutput) {\n              onDeviceDebugLog.dispatch(byteBuffer.subarray(0, framingIndex));\n            } else {\n              log.warn(\n                Types.EmitterScope.SerialConnection,\n                Types.Emitter.Connect,\n                `⚠️ Found unneccesary message padding, removing: ${byteBuffer\n                  .subarray(0, framingIndex)\n                  .toString()}`,\n              );\n            }\n\n            byteBuffer = byteBuffer.subarray(framingIndex);\n          }\n\n          const msb = byteBuffer[2];\n          const lsb = byteBuffer[3];\n\n          if (\n            msb !== undefined &&\n            lsb !== undefined &&\n            byteBuffer.length >= 4 + (msb << 8) + lsb\n          ) {\n            const packet = byteBuffer.subarray(4, 4 + (msb << 8) + lsb);\n\n            const malformedDetectorIndex = packet.findIndex(\n              (byte) => byte === 0x94,\n            );\n            if (\n              malformedDetectorIndex !== -1 &&\n              packet[malformedDetectorIndex + 1] === 0xc3\n            ) {\n              log.warn(\n                Types.EmitterScope.SerialConnection,\n                Types.Emitter.Connect,\n                `⚠️ Malformed packet found, discarding: ${byteBuffer\n                  .subarray(0, malformedDetectorIndex - 1)\n                  .toString()}`,\n                Protobuf.Mesh.LogRecord_Level.WARNING,\n              );\n\n              byteBuffer = byteBuffer.subarray(malformedDetectorIndex);\n            } else {\n              byteBuffer = byteBuffer.subarray(3 + (msb << 8) + lsb + 1);\n              controller.enqueue(packet);\n            }\n          } else {\n            /** Only partioal message in buffer, wait for the rest */\n            processingExhausted = true;\n          }\n        } else {\n          /** Message not complete, only 1 byte in buffer */\n          processingExhausted = true;\n        }\n      }\n    },\n  });\n};\n","import crc16ccitt from \"crc/calculators/crc16ccitt\";\nimport { create, toBinary } from \"@bufbuild/protobuf\";\nimport * as Protobuf from \"@meshtastic/protobufs\";\n\n//if counter > 35 then reset counter/clear/error/reject promise\ntype XmodemProps = (toRadio: Uint8Array, id?: number) => Promise<number>;\n\nexport class Xmodem {\n  private sendRaw: XmodemProps;\n  private rxBuffer: Uint8Array[];\n  private txBuffer: Uint8Array[];\n  private textEncoder: TextEncoder;\n  private counter: number;\n\n  constructor(sendRaw: XmodemProps) {\n    this.sendRaw = sendRaw;\n    this.rxBuffer = [];\n    this.txBuffer = [];\n    this.textEncoder = new TextEncoder();\n    this.counter = 0;\n  }\n\n  async downloadFile(filename: string): Promise<number> {\n    return await this.sendCommand(\n      Protobuf.Xmodem.XModem_Control.STX,\n      this.textEncoder.encode(filename),\n      0,\n    );\n  }\n\n  async uploadFile(filename: string, data: Uint8Array): Promise<number> {\n    for (let i = 0; i < data.length; i += 128) {\n      this.txBuffer.push(data.slice(i, i + 128));\n    }\n\n    return await this.sendCommand(\n      Protobuf.Xmodem.XModem_Control.SOH,\n      this.textEncoder.encode(filename),\n      0,\n    );\n  }\n\n  async sendCommand(\n    command: Protobuf.Xmodem.XModem_Control,\n    buffer?: Uint8Array,\n    sequence?: number,\n    crc16?: number,\n  ): Promise<number> {\n    const toRadio = create(Protobuf.Mesh.ToRadioSchema, {\n      payloadVariant: {\n        case: \"xmodemPacket\",\n        value: {\n          buffer,\n          control: command,\n          seq: sequence,\n          crc16: crc16,\n        },\n      },\n    });\n    return await this.sendRaw(toBinary(Protobuf.Mesh.ToRadioSchema, toRadio));\n  }\n\n  async handlePacket(packet: Protobuf.Xmodem.XModem): Promise<number> {\n    await new Promise((resolve) => setTimeout(resolve, 100));\n\n    switch (packet.control) {\n      case Protobuf.Xmodem.XModem_Control.NUL: {\n        // nothing\n        break;\n      }\n      case Protobuf.Xmodem.XModem_Control.SOH: {\n        this.counter = packet.seq;\n        if (this.validateCrc16(packet)) {\n          this.rxBuffer[this.counter] = packet.buffer;\n          return this.sendCommand(Protobuf.Xmodem.XModem_Control.ACK);\n        }\n        return await this.sendCommand(\n          Protobuf.Xmodem.XModem_Control.NAK,\n          undefined,\n          packet.seq,\n        );\n      }\n      case Protobuf.Xmodem.XModem_Control.STX: {\n        break;\n      }\n      case Protobuf.Xmodem.XModem_Control.EOT: {\n        // end of transmission\n        break;\n      }\n      case Protobuf.Xmodem.XModem_Control.ACK: {\n        this.counter++;\n        if (this.txBuffer[this.counter - 1]) {\n          return this.sendCommand(\n            Protobuf.Xmodem.XModem_Control.SOH,\n            this.txBuffer[this.counter - 1],\n            this.counter,\n            crc16ccitt(this.txBuffer[this.counter - 1] ?? new Uint8Array()),\n          );\n        }\n        if (this.counter === this.txBuffer.length + 1) {\n          return this.sendCommand(Protobuf.Xmodem.XModem_Control.EOT);\n        }\n        this.clear();\n        break;\n      }\n      case Protobuf.Xmodem.XModem_Control.NAK: {\n        return this.sendCommand(\n          Protobuf.Xmodem.XModem_Control.SOH,\n          this.txBuffer[this.counter],\n          this.counter,\n          crc16ccitt(this.txBuffer[this.counter - 1] ?? new Uint8Array()),\n        );\n      }\n      case Protobuf.Xmodem.XModem_Control.CAN: {\n        this.clear();\n        break;\n      }\n      case Protobuf.Xmodem.XModem_Control.CTRLZ: {\n        break;\n      }\n    }\n\n    return Promise.resolve(0);\n  }\n\n  validateCrc16(packet: Protobuf.Xmodem.XModem): boolean {\n    return crc16ccitt(packet.buffer) === packet.crc16;\n  }\n\n  clear() {\n    this.counter = 0;\n    this.rxBuffer = [];\n    this.txBuffer = [];\n  }\n}\n","import {\n  FromNumUuid,\n  FromRadioUuid,\n  ServiceUuid,\n  ToRadioUuid,\n} from \"../constants.ts\";\nimport { MeshDevice } from \"../meshDevice.ts\";\nimport * as Types from \"../types.ts\";\nimport { typedArrayToBuffer } from \"../utils/index.ts\";\n\n/** Allows to connect to a Meshtastic device via bluetooth */\nexport class BleConnection extends MeshDevice {\n  /** Defines the connection type as ble */\n  public connType: Types.ConnectionTypeName;\n\n  public portId: string;\n\n  /** Currently connected BLE device */\n  public device: BluetoothDevice | undefined;\n\n  private gattServer: BluetoothRemoteGATTServer | undefined;\n\n  /** Short Description */\n  private service: BluetoothRemoteGATTService | undefined;\n\n  /** Short Description */\n  private toRadioCharacteristic: BluetoothRemoteGATTCharacteristic | undefined;\n\n  /** Short Description */\n  private fromRadioCharacteristic:\n    | BluetoothRemoteGATTCharacteristic\n    | undefined;\n\n  /** Short Description */\n  private fromNumCharacteristic: BluetoothRemoteGATTCharacteristic | undefined;\n\n  private timerUpdateFromRadio: NodeJS.Timeout | null = null;\n\n  constructor(configId?: number) {\n    super(configId);\n\n    this.log = this.log.getSubLogger({ name: \"HttpConnection\" });\n\n    this.connType = \"ble\";\n    this.portId = \"\";\n    this.device = undefined;\n    this.service = undefined;\n    this.gattServer = undefined;\n    this.toRadioCharacteristic = undefined;\n    this.fromRadioCharacteristic = undefined;\n    this.fromNumCharacteristic = undefined;\n    // this.pendingRead = false;\n\n    this.log.debug(\n      Types.Emitter[Types.Emitter.Constructor],\n      \"🔷 BleConnection instantiated\",\n    );\n  }\n\n  /**\n   * Gets web bluetooth support avaliability for the device\n   *\n   * @returns {Promise<void>}\n   */\n  public supported(): Promise<boolean> {\n    return navigator.bluetooth.getAvailability();\n  }\n\n  /**\n   * Gets list of bluetooth devices that can be passed to `connect`\n   *\n   * @returns {Promise<BluetoothDevice[]>} Array of avaliable BLE devices\n   */\n  public getDevices(): Promise<BluetoothDevice[]> {\n    return navigator.bluetooth.getDevices();\n  }\n\n  /**\n   * Opens browser dialog to select a device\n   */\n  public getDevice(filter?: RequestDeviceOptions): Promise<BluetoothDevice> {\n    return navigator.bluetooth.requestDevice(\n      filter ?? {\n        filters: [{ services: [ServiceUuid] }],\n      },\n    );\n  }\n\n  /**\n   * Initiates the connect process to a Meshtastic device via Bluetooth\n   */\n  public async connect({\n    device,\n    deviceFilter,\n  }: Types.BleConnectionParameters): Promise<void> {\n    /** Set device state to connecting */\n    this.updateDeviceStatus(Types.DeviceStatusEnum.DeviceConnecting);\n\n    /** Set device if specified, else request. */\n    this.device = device ?? (await this.getDevice(deviceFilter));\n\n    this.portId = this.device.id;\n\n    /** Setup event listners */\n    this.device.addEventListener(\"gattserverdisconnected\", () => {\n      this.log.info(\n        Types.Emitter[Types.Emitter.Connect],\n        \"Device disconnected\",\n      );\n      this.updateDeviceStatus(Types.DeviceStatusEnum.DeviceDisconnected);\n      this.complete();\n    });\n\n    let error = \"\";\n    /** Connect to device */\n    await this.device.gatt\n      ?.connect()\n      .then((server) => {\n        this.log.info(\n          Types.Emitter[Types.Emitter.Connect],\n          `✅ Got GATT Server for device: ${server.device.id}`,\n        );\n        this.gattServer = server;\n      })\n      .catch((e: Error) => {\n        this.log.error(\n          Types.Emitter[Types.Emitter.Connect],\n          `❌ Failed to connect: ${e.message}`,\n        );\n        if (e.message == \"Connect failed\") {\n          error = e.message;\n        }\n      });\n\n    if (error) {\n      console.log(\"Error Message!  Abort Abort!\");\n      this.disconnect();\n      return;\n    }\n\n    await this.gattServer\n      ?.getPrimaryService(ServiceUuid)\n      .then((service) => {\n        this.log.info(\n          Types.Emitter[Types.Emitter.Connect],\n          `✅ Got GATT Service for device: ${service.device.id}`,\n        );\n        this.service = service;\n      })\n      .catch((e: Error) => {\n        this.log.error(\n          Types.Emitter[Types.Emitter.Connect],\n          `❌ Failed to get primary service: q${e.message}`,\n        );\n      });\n\n    [ToRadioUuid, FromRadioUuid, FromNumUuid].map(async (uuid) => {\n      await this.service\n        ?.getCharacteristic(uuid)\n        .then((characteristic) => {\n          this.log.info(\n            Types.Emitter[Types.Emitter.Connect],\n            `✅ Got Characteristic ${characteristic.uuid} for device: ${characteristic.uuid}`,\n          );\n          switch (uuid) {\n            case ToRadioUuid: {\n              this.toRadioCharacteristic = characteristic;\n              break;\n            }\n            case FromRadioUuid: {\n              this.fromRadioCharacteristic = characteristic;\n              break;\n            }\n            case FromNumUuid: {\n              this.fromNumCharacteristic = characteristic;\n              break;\n            }\n          }\n        })\n        .catch((e: Error) => {\n          this.log.error(\n            Types.Emitter[Types.Emitter.Connect],\n            `❌ Failed to get toRadio characteristic: q${e.message}`,\n          );\n        });\n    });\n\n    await this.fromNumCharacteristic?.startNotifications(); // TODO: catch\n\n    this.fromNumCharacteristic?.addEventListener(\n      \"characteristicvaluechanged\",\n      () => {\n        this.readFromRadio();\n      },\n    );\n\n    this.updateDeviceStatus(Types.DeviceStatusEnum.DeviceConnected);\n\n    this.configure().catch(() => {\n      // TODO: FIX, workaround for `wantConfigId` not getting acks.\n    });\n\n    this.timerUpdateFromRadio = setInterval(() => this.readFromRadio(), 1000);\n  }\n\n  /** Disconnects from the Meshtastic device */\n  public disconnect(): void {\n    this.device?.gatt?.disconnect();\n    this.updateDeviceStatus(Types.DeviceStatusEnum.DeviceDisconnected);\n    this.complete();\n    if (this.timerUpdateFromRadio) {\n      clearInterval(this.timerUpdateFromRadio);\n    }\n    this.timerUpdateFromRadio = null;\n  }\n\n  /**\n   * Pings device to check if it is avaliable\n   *\n   * @todo Implement\n   */\n  public async ping(): Promise<boolean> {\n    return await Promise.resolve(true);\n  }\n\n  /**\n   * Reads data packets from the radio until empty\n   * @throws Error if reading fails\n   */\n  protected async readFromRadio(): Promise<void> {\n    try {\n      let hasMoreData = true;\n      while (hasMoreData && this.fromRadioCharacteristic) {\n        const value = await this.fromRadioCharacteristic.readValue();\n\n        if (value.byteLength === 0) {\n          hasMoreData = false;\n          continue;\n        }\n\n        await this.handleFromRadio(new Uint8Array(value.buffer));\n        this.updateDeviceStatus(Types.DeviceStatusEnum.DeviceConnected);\n      }\n    } catch (error) {\n      this.log.error(\n        Types.Emitter[Types.Emitter.ReadFromRadio],\n        `❌ ${error instanceof Error ? error.message : \"Unknown error\"}`,\n      );\n      throw error; // Re-throw to let caller handle\n    } finally {\n      // this.pendingRead = false;\n    }\n  }\n\n  /**\n   * Sends supplied protobuf message to the radio\n   */\n  protected async writeToRadio(data: Uint8Array): Promise<void> {\n    await this.toRadioCharacteristic?.writeValue(typedArrayToBuffer(data));\n    // This should be automatic (onCharacteristicValueChanged)\n    await this.readFromRadio();\n  }\n}\n","import { MeshDevice } from \"../meshDevice.ts\";\nimport * as Types from \"../types.ts\";\nimport { typedArrayToBuffer } from \"../utils/index.ts\";\n\n/** Allows to connect to a Meshtastic device over HTTP(S) */\nexport class HttpConnection extends MeshDevice {\n  /** Defines the connection type as http */\n  public connType: Types.ConnectionTypeName;\n\n  /** URL of the device that is to be connected to. */\n  protected portId: string;\n\n  /** Enables receiving messages all at once, versus one per request */\n  private receiveBatchRequests: boolean;\n\n  private readLoop: ReturnType<typeof setInterval> | null;\n\n  private pendingRequest: boolean;\n\n  private abortController: AbortController;\n\n  private readonly defaultRetryConfig: Types.HttpRetryConfig = {\n    maxRetries: 3,\n    initialDelayMs: 1000,\n    maxDelayMs: 10000,\n    backoffFactor: 2,\n  };\n\n  constructor(configId?: number) {\n    super(configId);\n\n    this.log = this.log.getSubLogger({ name: \"HttpConnection\" });\n\n    this.connType = \"http\";\n    this.portId = \"\";\n    this.receiveBatchRequests = false;\n    this.readLoop = null;\n    this.pendingRequest = false;\n    this.abortController = new AbortController();\n\n    this.log.debug(\n      Types.Emitter[Types.Emitter.Constructor],\n      \"🔷 HttpConnection instantiated\",\n    );\n  }\n\n  /**\n   * Checks if the error should trigger a retry attempt\n   * @param response - The fetch response\n   * @returns boolean indicating if should retry\n   */\n  private shouldRetry(response: Response): boolean {\n    if (response.status >= 500 && response.status <= 599) {\n      return true;\n    }\n\n    if (!response.ok && response.status < 400) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Implements exponential backoff retry logic for HTTP operations\n   * @param operation - The async operation to retry\n   * @param retryConfig - Configuration for retry behavior\n   * @param operationName - Name of the operation for logging\n   */\n  private async withRetry(\n    operation: () => Promise<Response>,\n    retryConfig: Types.HttpRetryConfig,\n    operationName: string,\n  ): Promise<Response> {\n    let delay = retryConfig.initialDelayMs;\n\n    for (let attempt = 1; attempt <= retryConfig.maxRetries; attempt++) {\n      try {\n        const response = await operation();\n\n        // If the response is success or a non-retryable error, return it\n        if (!this.shouldRetry(response)) {\n          return response;\n        }\n\n        const error = new Error(\n          `HTTP ${response.status}: ${response.statusText}`,\n        );\n\n        if (attempt === retryConfig.maxRetries) {\n          throw error;\n        }\n\n        this.log.warn(\n          `${operationName} failed (attempt ${attempt}/${retryConfig.maxRetries}): ${error.message}`,\n        );\n\n        await new Promise((resolve) => setTimeout(resolve, delay));\n        delay = Math.min(\n          delay * retryConfig.backoffFactor,\n          retryConfig.maxDelayMs,\n        );\n      } catch (error) {\n        // If it's not a Response error (e.g., network error), don't retry\n        if (!(error instanceof Error) || !error.message.startsWith(\"HTTP\")) {\n          throw error;\n        }\n\n        if (attempt === retryConfig.maxRetries) {\n          throw error;\n        }\n\n        this.log.warn(\n          `${operationName} failed (attempt ${attempt}/${retryConfig.maxRetries}): ${error.message}`,\n        );\n      }\n    }\n\n    // This line should never be reached due to the error handling above,\n    throw new Error(\"Unexpected end of retry loop\");\n  }\n\n  /**\n   * Attempts a single connection to the device\n   */\n  private async attemptConnection(\n    params: Types.HttpConnectionParameters,\n  ): Promise<Response> {\n    const { address, tls = false } = params;\n    this.portId = `${tls ? \"https://\" : \"http://\"}${address}`;\n\n    // We create a dummy request here just to have a Response object to work with\n    // The actual connection check is done via ping()\n    const response = await fetch(`${this.portId}/hotspot-detect.html`, {\n      signal: this.abortController.signal,\n      mode: \"no-cors\",\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n\n    return response;\n  }\n\n  /**\n   * Initiates the connect process to a Meshtastic device via HTTP(S)\n   */\n  public async connect({\n    address,\n    fetchInterval = 3000,\n    receiveBatchRequests = false,\n    tls = false,\n  }: Types.HttpConnectionParameters): Promise<void> {\n    // Set initial state\n    this.updateDeviceStatus(Types.DeviceStatusEnum.DeviceConnecting);\n    this.receiveBatchRequests = receiveBatchRequests;\n\n    try {\n      // Attempt connection with retries\n      await this.withRetry(\n        () => this.attemptConnection({ address, tls, fetchInterval }),\n        {\n          ...this.defaultRetryConfig,\n          maxRetries: 5, // More retries for initial connection\n          maxDelayMs: 10000, // Max 10s between retries\n        },\n        \"Connect\",\n      );\n\n      // If connection successful, set up device\n      if (this.deviceStatus === Types.DeviceStatusEnum.DeviceConnecting) {\n        this.log.debug(\n          Types.Emitter[Types.Emitter.Connect],\n          \"Connection succeeded, starting configuration and request timer.\",\n        );\n\n        // Start device configuration\n        await this.configure().catch((error) => {\n          this.log.warn(\n            Types.Emitter[Types.Emitter.Connect],\n            `Configuration warning: ${error.message}`,\n          );\n        });\n\n        if (!this.readLoop) {\n          this.readLoop = setInterval(async () => {\n            try {\n              await this.readFromRadio();\n            } catch (error) {\n              if (error instanceof Error) {\n                this.log.error(\n                  Types.Emitter[Types.Emitter.Connect],\n                  `❌ Read loop error: ${error.message}`,\n                );\n              }\n            }\n          }, fetchInterval);\n        }\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        this.log.error(\n          Types.Emitter[Types.Emitter.Connect],\n          `❌ Connection failed: ${error.message}`,\n        );\n      }\n\n      // Only attempt reconnection if we haven't been disconnected\n      if (this.deviceStatus !== Types.DeviceStatusEnum.DeviceDisconnected) {\n        this.updateDeviceStatus(Types.DeviceStatusEnum.DeviceReconnecting);\n\n        this.connect({\n          address,\n          fetchInterval,\n          receiveBatchRequests,\n          tls,\n        });\n      }\n    }\n  }\n  /** Disconnects from the Meshtastic device */\n  public disconnect(): void {\n    this.abortController.abort();\n    this.updateDeviceStatus(Types.DeviceStatusEnum.DeviceDisconnected);\n    if (this.readLoop) {\n      clearInterval(this.readLoop);\n      this.complete();\n    }\n  }\n\n  /** Pings device to check if it is available with retry logic */\n  public async ping(): Promise<boolean> {\n    this.log.debug(\n      Types.Emitter[Types.Emitter.Ping],\n      \"Attempting device ping.\",\n    );\n\n    const { signal } = this.abortController;\n\n    try {\n      const response = await this.withRetry(\n        async () => {\n          return await fetch(`${this.portId}/hotspot-detect.html`, {\n            signal,\n            mode: \"no-cors\",\n          });\n        },\n        { ...this.defaultRetryConfig },\n        \"Ping\",\n      );\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      this.updateDeviceStatus(Types.DeviceStatusEnum.DeviceConnected);\n      return true;\n    } catch (error) {\n      if (error instanceof Error) {\n        this.log.error(\n          Types.Emitter[Types.Emitter.Ping],\n          `❌ ${error.message}`,\n        );\n      }\n      this.updateDeviceStatus(Types.DeviceStatusEnum.DeviceReconnecting);\n      return false;\n    }\n  }\n\n  /** Reads any avaliable protobuf messages from the radio */\n  protected async readFromRadio(): Promise<void> {\n    if (this.pendingRequest) {\n      return;\n    }\n    let readBuffer = new ArrayBuffer(1);\n    const { signal } = this.abortController;\n\n    let error = false;\n    while (readBuffer.byteLength > 0 && !error) {\n      this.pendingRequest = true;\n      await fetch(\n        `${this.portId}/api/v1/fromradio?all=${\n          this.receiveBatchRequests ? \"true\" : \"false\"\n        }`,\n        {\n          signal,\n          method: \"GET\",\n          headers: {\n            Accept: \"application/x-protobuf\",\n          },\n        },\n      )\n        .then(async (response) => {\n          this.pendingRequest = false;\n          this.updateDeviceStatus(Types.DeviceStatusEnum.DeviceConnected);\n\n          readBuffer = await response.arrayBuffer();\n\n          if (readBuffer.byteLength > 0) {\n            this.handleFromRadio(new Uint8Array(readBuffer));\n          }\n        })\n        .catch((e: Error) => {\n          this.pendingRequest = false;\n          this.log.error(\n            Types.Emitter[Types.Emitter.ReadFromRadio],\n            `❌ ${e.message}`,\n          );\n          error = true;\n          this.updateDeviceStatus(Types.DeviceStatusEnum.DeviceReconnecting);\n        });\n    }\n  }\n\n  /**\n   * Sends supplied protobuf message to the radio\n   */\n  protected async writeToRadio(data: Uint8Array): Promise<void> {\n    const { signal } = this.abortController;\n\n    await fetch(`${this.portId}/api/v1/toradio`, {\n      signal,\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/x-protobuf\",\n      },\n      body: typedArrayToBuffer(data),\n    })\n      .then(async () => {\n        this.updateDeviceStatus(Types.DeviceStatusEnum.DeviceConnected);\n\n        await this.readFromRadio().catch((e: Error) => {\n          this.log.error(\n            Types.Emitter[Types.Emitter.WriteToRadio],\n            `❌ ${e.message}`,\n          );\n        });\n      })\n      .catch((e: Error) => {\n        this.log.error(\n          Types.Emitter[Types.Emitter.WriteToRadio],\n          `❌ ${e.message}`,\n        );\n        this.updateDeviceStatus(Types.DeviceStatusEnum.DeviceReconnecting);\n      });\n  }\n}\n","import { SimpleEventDispatcher } from \"ste-simple-events\";\nimport { MeshDevice } from \"../meshDevice.ts\";\nimport * as Types from \"../types.ts\";\nimport { transformHandler } from \"../utils/index.ts\";\n\n/** Allows to connect to a Meshtastic device over WebSerial */\nexport class SerialConnection extends MeshDevice {\n  /** Defines the connection type as serial */\n  public connType: Types.ConnectionTypeName;\n\n  protected portId: string;\n\n  /** Serial port used to communicate with device. */\n  public port: SerialPort | undefined;\n\n  private readerHack: ReadableStreamDefaultReader<Uint8Array> | undefined;\n\n  /** Transform stream for parsing raw serial data */\n  private transformer?: TransformStream<Uint8Array, Uint8Array>;\n\n  /** Should locks be prevented */\n  private preventLock?: boolean;\n\n  /** Unfortunately, this is currently the only way to release the lock on a stream after piping it\n   *  through a transform stream (https://stackoverflow.com/questions/71262432) */\n  private pipePromise?: Promise<void>;\n\n  /* Reference for the heartbeat ping interval so it can be canceled on disconnect. */\n  private heartbeatInterval?: ReturnType<typeof setInterval> | undefined;\n\n  /**\n   * Fires when `disconnect()` is called, used to instruct serial port and\n   * readers to release there locks\n   *\n   * @event onReleaseEvent\n   */\n  private readonly onReleaseEvent: SimpleEventDispatcher<boolean>;\n\n  constructor(configId?: number) {\n    super(configId);\n\n    this.log = this.log.getSubLogger({ name: \"SerialConnection\" });\n\n    this.connType = \"serial\";\n    this.portId = \"\";\n    this.port = undefined;\n    this.transformer = undefined;\n    this.onReleaseEvent = new SimpleEventDispatcher<boolean>();\n    this.preventLock = false;\n    this.heartbeatInterval = undefined;\n\n    this.log.debug(\n      Types.Emitter[Types.Emitter.Constructor],\n      \"🔷 SerialConnection instantiated\",\n    );\n  }\n\n  /**\n   * Reads packets from transformed serial port steam and processes them.\n   */\n  private async readFromRadio(\n    reader: ReadableStreamDefaultReader<Uint8Array>,\n  ): Promise<void> {\n    this.onReleaseEvent.subscribe(async () => {\n      this.preventLock = true;\n      await reader.cancel();\n      await this.pipePromise?.catch(() => {});\n      reader.releaseLock();\n      await this.port?.close();\n    });\n\n    while (this.port?.readable && !this.preventLock) {\n      await reader\n        .read()\n        .then(({ value }) => {\n          if (value) {\n            this.handleFromRadio(value);\n          }\n        })\n        .catch(() => {\n          this.log.debug(\n            Types.Emitter[Types.Emitter.ReadFromRadio],\n            \"Releasing reader\",\n          );\n        });\n    }\n  }\n\n  /** Gets list of serial ports that can be passed to `connect` */\n  public async getPorts(): Promise<SerialPort[]> {\n    return await navigator.serial.getPorts();\n  }\n\n  /**\n   * Opens browsers connection dialogue to select a serial port\n   */\n  public async getPort(filter?: SerialPortRequestOptions): Promise<SerialPort> {\n    return await navigator.serial.requestPort(filter);\n  }\n\n  public getCurrentPort() {\n    return this.port;\n  }\n\n  /**\n   * Initiates the connect process to a Meshtastic device via Web Serial\n   */\n  public async connect({\n    port,\n    baudRate = 115200,\n    concurrentLogOutput = false,\n  }: Types.SerialConnectionParameters): Promise<void> {\n    /** Set device state to connecting */\n    this.updateDeviceStatus(Types.DeviceStatusEnum.DeviceConnecting);\n\n    /** Set device if specified, else request. */\n    this.port = port ?? (await this.getPort());\n\n    // this.portId = this.port. TODO: add once WebSerial adds unique/port identifiers\n\n    /** Setup event listners */\n    this.port.addEventListener(\"disconnect\", () => {\n      this.log.info(\n        Types.Emitter[Types.Emitter.Connect],\n        \"Device disconnected\",\n      );\n      this.updateDeviceStatus(Types.DeviceStatusEnum.DeviceDisconnected);\n      this.complete();\n    });\n\n    this.preventLock = false;\n\n    /** Connect to device */\n    await this.port\n      .open({\n        baudRate,\n      })\n      .then(() => {\n        if (this.port?.readable && this.port.writable) {\n          this.transformer = transformHandler(\n            this.log,\n            this.onReleaseEvent,\n            this.events.onDeviceDebugLog,\n            concurrentLogOutput,\n          );\n\n          this.pipePromise = this.port.readable.pipeTo(\n            this.transformer.writable,\n          );\n          const reader = (this.readerHack =\n            this.transformer.readable.getReader());\n          this.readFromRadio(reader);\n\n          this.updateDeviceStatus(Types.DeviceStatusEnum.DeviceConnected);\n\n          this.configure().catch(() => {\n            // TODO: FIX, workaround for `wantConfigId` not getting acks.\n          });\n\n          // Set up an interval to send a heartbeat ping once every minute.\n          // The firmware requires at least one ping per 15 minutes, so this should be more than enough.\n          this.heartbeatInterval = setInterval(() => {\n            this.heartbeat().catch((err) => {\n              console.error(\"Heartbeat error\", err);\n            });\n          }, 60 * 1000);\n        } else {\n          console.log(\"not readable or writable\");\n        }\n      })\n      .catch((e: Error) => {\n        this.log.error(Types.Emitter[Types.Emitter.Connect], `❌ ${e.message}`);\n      });\n  }\n\n  /** Disconnects from the serial port */\n  public async reconnect(): Promise<void> {\n    await this.connect({\n      port: this.port,\n      concurrentLogOutput: false,\n    });\n  }\n\n  /** Disconnects from the serial port */\n  public async disconnect(): Promise<SerialPort | undefined> {\n    // this.onReleaseEvent.dispatch(true);\n    // HACK: Inline onReleaseEvent\n    // -- This should be used as an event, like intened\n    this.preventLock = true;\n    await this.readerHack?.cancel();\n    await this.pipePromise?.catch(() => {});\n    this.readerHack?.releaseLock();\n    if (this.port?.readable) {\n      await this.port?.close();\n    }\n\n    // stop the interval when disconnecting.\n    if (this.heartbeatInterval) {\n      clearInterval(this.heartbeatInterval);\n      this.heartbeatInterval = undefined;\n    }\n    // -------\n    this.updateDeviceStatus(Types.DeviceStatusEnum.DeviceDisconnected);\n    this.complete();\n    // await this.onReleaseEvent.toPromise();\n    return this.port;\n  }\n\n  /** Pings device to check if it is avaliable */\n  public async ping(): Promise<boolean> {\n    return await Promise.resolve(true);\n  }\n\n  /**\n   * Sends supplied protobuf message to the radio\n   */\n  protected async writeToRadio(data: Uint8Array): Promise<void> {\n    while (this.port?.writable?.locked) {\n      await new Promise((resolve) => setTimeout(resolve, 100));\n    }\n    const writer = this.port?.writable?.getWriter();\n\n    await writer?.write(\n      new Uint8Array([0x94, 0xc3, 0x00, data.length, ...data]),\n    );\n    writer?.releaseLock();\n  }\n}\n","import {\n  BleConnection,\n  HttpConnection,\n  SerialConnection,\n} from \"./adapters/index.ts\";\nimport type * as Types from \"./types.ts\";\n\n/**\n * Allows to create new connections to devices and manages them. Alternatively,\n * new connections can be created directly by instantiating their respective the\n * interface classes.\n */\nexport class Client {\n  /** Array containing all created connection interfaces */\n  deviceInterfaces: Types.ConnectionType[];\n\n  constructor() {\n    this.deviceInterfaces = [];\n  }\n\n  /**\n   * Creates a new Bluetooth Low Enery connection interface\n   */\n  public createBleConnection(configId?: number): BleConnection {\n    const bleConnection = new BleConnection(configId);\n    this.deviceInterfaces.push(bleConnection);\n    return bleConnection;\n  }\n\n  /**\n   * Creates a new HTTP(S) connection interface\n   */\n  public createHttpConnection(configId?: number): HttpConnection {\n    const httpConnection = new HttpConnection(configId);\n    this.deviceInterfaces.push(httpConnection);\n    return httpConnection;\n  }\n\n  /**\n   * Creates a new Serial connection interface\n   */\n  public createSerialConnection(configId?: number): SerialConnection {\n    const serialConnection = new SerialConnection(configId);\n    this.deviceInterfaces.push(serialConnection);\n    return serialConnection;\n  }\n\n  /**\n   * Adds an already created connection interface to the client\n   */\n  public addConnection(connectionObj: Types.ConnectionType): void {\n    this.deviceInterfaces.push(connectionObj);\n  }\n\n  /**\n   * Removes a connection interface from the client\n   */\n  public removeConnection(connectionObj: Types.ConnectionType): void {\n    const index = this.deviceInterfaces.indexOf(connectionObj);\n    if (index !== -1) {\n      this.deviceInterfaces.splice(index, 1);\n    }\n  }\n}\n"],"mappings":"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","names":["isMessage","ScalarType","messageDesc","messageDesc","IMPLICIT","messageDesc","WireType","messageDesc","recurseDeps","EDITION_PROTO2","EDITION_PROTO3","IMPLICIT","_a","proto","_b","EDITION_PROTO2","EDITION_PROTO3","IMPLICIT","boot","ExtensionRangeOptions_VerificationState","FieldDescriptorProto_Type","FieldDescriptorProto_Label","FileOptions_OptimizeMode","FieldOptions_CType","FieldOptions_JSType","FieldOptions_OptionRetention","FieldOptions_OptionTargetType","MethodOptions_IdempotencyLevel","FeatureSet_FieldPresence","FeatureSet_EnumType","FeatureSet_RepeatedFieldEncoding","FeatureSet_Utf8Validation","FeatureSet_MessageEncoding","FeatureSet_JsonFormat","GeneratedCodeInfo_Annotation_Semantic","Edition","LEGACY_REQUIRED","Channel_Role","Theme","Language","Config_DeviceConfig_Role","Config_DeviceConfig_RebroadcastMode","Config_PositionConfig_PositionFlags","Config_PositionConfig_GpsMode","Config_NetworkConfig_AddressMode","Config_DisplayConfig_GpsCoordinateFormat","Config_DisplayConfig_DisplayUnits","Config_DisplayConfig_OledType","Config_DisplayConfig_DisplayMode","Config_DisplayConfig_CompassOrientation","Config_LoRaConfig_RegionCode","Config_LoRaConfig_ModemPreset","Config_BluetoothConfig_PairingMode","Constants","ModuleConfig_DetectionSensorConfig_TriggerType","ModuleConfig_AudioConfig_Audio_Baud","ModuleConfig_SerialConfig_Serial_Baud","ModuleConfig_SerialConfig_Serial_Mode","ModuleConfig_CannedMessageConfig_InputEventChar","RemoteHardwarePinType","PortNum","TelemetrySensorType","XModem_Control","Position_LocSource","Position_AltSource","Routing_Error","MeshPacket_Priority","MeshPacket_Delayed","LogRecord_Level","HardwareModel","Constants","CriticalErrorCode","AdminMessage_ConfigType","AdminMessage_ModuleConfigType","Team","MemberRole","PowerMon_State","PowerStressMessage_Opcode","HardwareMessage_Type","StoreAndForward_RequestResponse","DeviceStatusEnum","EmitterScope","Emitter","ChannelNumber","SimpleEventDispatcher","SimpleEventDispatcher","SimpleEventDispatcher","SimpleEventDispatcher"]}